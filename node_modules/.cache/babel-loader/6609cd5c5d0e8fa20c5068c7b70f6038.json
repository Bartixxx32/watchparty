{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _regeneratorRuntime = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _inherits = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _createClass = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _classCallCheck = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transport = void 0;\n\nvar awaitqueue_1 = require(\"awaitqueue\");\n\nvar queue_microtask_1 = __importDefault(require(\"queue-microtask\"));\n\nvar Logger_1 = require(\"./Logger\");\n\nvar EnhancedEventEmitter_1 = require(\"./EnhancedEventEmitter\");\n\nvar errors_1 = require(\"./errors\");\n\nvar utils = __importStar(require(\"./utils\"));\n\nvar ortc = __importStar(require(\"./ortc\"));\n\nvar Producer_1 = require(\"./Producer\");\n\nvar Consumer_1 = require(\"./Consumer\");\n\nvar DataProducer_1 = require(\"./DataProducer\");\n\nvar DataConsumer_1 = require(\"./DataConsumer\");\n\nvar logger = new Logger_1.Logger('Transport');\n\nvar ConsumerCreationTask = /*#__PURE__*/_createClass(function ConsumerCreationTask(consumerOptions) {\n  var _this = this;\n\n  _classCallCheck(this, ConsumerCreationTask);\n\n  this.consumerOptions = consumerOptions;\n  this.promise = new Promise(function (resolve, reject) {\n    _this.resolve = resolve;\n    _this.reject = reject;\n  });\n});\n\nvar Transport = /*#__PURE__*/function (_EnhancedEventEmitter) {\n  _inherits(Transport, _EnhancedEventEmitter);\n\n  var _super = _createSuper(Transport);\n\n  function Transport(_ref) {\n    var _this2;\n\n    var direction = _ref.direction,\n        id = _ref.id,\n        iceParameters = _ref.iceParameters,\n        iceCandidates = _ref.iceCandidates,\n        dtlsParameters = _ref.dtlsParameters,\n        sctpParameters = _ref.sctpParameters,\n        iceServers = _ref.iceServers,\n        iceTransportPolicy = _ref.iceTransportPolicy,\n        additionalSettings = _ref.additionalSettings,\n        proprietaryConstraints = _ref.proprietaryConstraints,\n        appData = _ref.appData,\n        handlerFactory = _ref.handlerFactory,\n        extendedRtpCapabilities = _ref.extendedRtpCapabilities,\n        canProduceByKind = _ref.canProduceByKind;\n\n    _classCallCheck(this, Transport);\n\n    _this2 = _super.call(this); // Closed flag.\n\n    _this2._closed = false; // Transport connection state.\n\n    _this2._connectionState = 'new'; // Map of Producers indexed by id.\n\n    _this2._producers = new Map(); // Map of Consumers indexed by id.\n\n    _this2._consumers = new Map(); // Map of DataProducers indexed by id.\n\n    _this2._dataProducers = new Map(); // Map of DataConsumers indexed by id.\n\n    _this2._dataConsumers = new Map(); // Whether the Consumer for RTP probation has been created.\n\n    _this2._probatorConsumerCreated = false; // AwaitQueue instance to make async tasks happen sequentially.\n\n    _this2._awaitQueue = new awaitqueue_1.AwaitQueue(); // Consumer creation tasks awaiting to be processed.\n\n    _this2._pendingConsumerTasks = []; // Consumer creation in progress flag.\n\n    _this2._consumerCreationInProgress = false; // Consumers pending to be paused.\n\n    _this2._pendingPauseConsumers = new Map(); // Consumer pause in progress flag.\n\n    _this2._consumerPauseInProgress = false; // Consumers pending to be resumed.\n\n    _this2._pendingResumeConsumers = new Map(); // Consumer resume in progress flag.\n\n    _this2._consumerResumeInProgress = false; // Consumers pending to be closed.\n\n    _this2._pendingCloseConsumers = new Map(); // Consumer close in progress flag.\n\n    _this2._consumerCloseInProgress = false; // Observer instance.\n\n    _this2._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n    logger.debug('constructor() [id:%s, direction:%s]', id, direction);\n    _this2._id = id;\n    _this2._direction = direction;\n    _this2._extendedRtpCapabilities = extendedRtpCapabilities;\n    _this2._canProduceByKind = canProduceByKind;\n    _this2._maxSctpMessageSize = sctpParameters ? sctpParameters.maxMessageSize : null; // Clone and sanitize additionalSettings.\n\n    additionalSettings = utils.clone(additionalSettings, {});\n    delete additionalSettings.iceServers;\n    delete additionalSettings.iceTransportPolicy;\n    delete additionalSettings.bundlePolicy;\n    delete additionalSettings.rtcpMuxPolicy;\n    delete additionalSettings.sdpSemantics;\n    _this2._handler = handlerFactory();\n\n    _this2._handler.run({\n      direction: direction,\n      iceParameters: iceParameters,\n      iceCandidates: iceCandidates,\n      dtlsParameters: dtlsParameters,\n      sctpParameters: sctpParameters,\n      iceServers: iceServers,\n      iceTransportPolicy: iceTransportPolicy,\n      additionalSettings: additionalSettings,\n      proprietaryConstraints: proprietaryConstraints,\n      extendedRtpCapabilities: extendedRtpCapabilities\n    });\n\n    _this2._appData = appData || {};\n\n    _this2.handleHandler();\n\n    return _this2;\n  }\n  /**\n   * Transport id.\n   */\n\n\n  _createClass(Transport, [{\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n    /**\n     * Whether the Transport is closed.\n     */\n\n  }, {\n    key: \"closed\",\n    get: function get() {\n      return this._closed;\n    }\n    /**\n     * Transport direction.\n     */\n\n  }, {\n    key: \"direction\",\n    get: function get() {\n      return this._direction;\n    }\n    /**\n     * RTC handler instance.\n     */\n\n  }, {\n    key: \"handler\",\n    get: function get() {\n      return this._handler;\n    }\n    /**\n     * Connection state.\n     */\n\n  }, {\n    key: \"connectionState\",\n    get: function get() {\n      return this._connectionState;\n    }\n    /**\n     * App custom data.\n     */\n\n  }, {\n    key: \"appData\",\n    get: function get() {\n      return this._appData;\n    }\n    /**\n     * Invalid setter.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ,\n    set: function set(appData) {\n      throw new Error('cannot override appData object');\n    }\n  }, {\n    key: \"observer\",\n    get: function get() {\n      return this._observer;\n    }\n    /**\n     * Close the Transport.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._closed) {\n        return;\n      }\n\n      logger.debug('close()');\n      this._closed = true; // Stop the AwaitQueue.\n\n      this._awaitQueue.stop(); // Close the handler.\n\n\n      this._handler.close(); // Close all Producers.\n\n\n      var _iterator = _createForOfIteratorHelper(this._producers.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var producer = _step.value;\n          producer.transportClosed();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._producers.clear(); // Close all Consumers.\n\n\n      var _iterator2 = _createForOfIteratorHelper(this._consumers.values()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var consumer = _step2.value;\n          consumer.transportClosed();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this._consumers.clear(); // Close all DataProducers.\n\n\n      var _iterator3 = _createForOfIteratorHelper(this._dataProducers.values()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var dataProducer = _step3.value;\n          dataProducer.transportClosed();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this._dataProducers.clear(); // Close all DataConsumers.\n\n\n      var _iterator4 = _createForOfIteratorHelper(this._dataConsumers.values()),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var dataConsumer = _step4.value;\n          dataConsumer.transportClosed();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      this._dataConsumers.clear(); // Emit observer event.\n\n\n      this._observer.safeEmit('close');\n    }\n    /**\n     * Get associated Transport (RTCPeerConnection) stats.\n     *\n     * @returns {RTCStatsReport}\n     */\n\n  }, {\n    key: \"getStats\",\n    value: function () {\n      var _getStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._closed) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new errors_1.InvalidStateError('closed');\n\n              case 2:\n                return _context.abrupt(\"return\", this._handler.getTransportStats());\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getStats() {\n        return _getStats.apply(this, arguments);\n      }\n\n      return getStats;\n    }()\n    /**\n     * Restart ICE connection.\n     */\n\n  }, {\n    key: \"restartIce\",\n    value: function () {\n      var _restartIce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref2) {\n        var _this3 = this;\n\n        var iceParameters;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                iceParameters = _ref2.iceParameters;\n                logger.debug('restartIce()');\n\n                if (!this._closed) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new errors_1.InvalidStateError('closed');\n\n              case 6:\n                if (iceParameters) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                throw new TypeError('missing iceParameters');\n\n              case 8:\n                return _context3.abrupt(\"return\", this._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          return _context2.abrupt(\"return\", _this3._handler.restartIce(iceParameters));\n\n                        case 1:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                })), 'transport.restartIce()'));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function restartIce(_x) {\n        return _restartIce.apply(this, arguments);\n      }\n\n      return restartIce;\n    }()\n    /**\n     * Update ICE servers.\n     */\n\n  }, {\n    key: \"updateIceServers\",\n    value: function () {\n      var _updateIceServers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _this4 = this;\n\n        var _ref4,\n            iceServers,\n            _args5 = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _ref4 = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {}, iceServers = _ref4.iceServers;\n                logger.debug('updateIceServers()');\n\n                if (!this._closed) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                throw new errors_1.InvalidStateError('closed');\n\n              case 6:\n                if (Array.isArray(iceServers)) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                throw new TypeError('missing iceServers');\n\n              case 8:\n                return _context5.abrupt(\"return\", this._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n                  return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          return _context4.abrupt(\"return\", _this4._handler.updateIceServers(iceServers));\n\n                        case 1:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                })), 'transport.updateIceServers()'));\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function updateIceServers() {\n        return _updateIceServers.apply(this, arguments);\n      }\n\n      return updateIceServers;\n    }()\n    /**\n     * Create a Producer.\n     */\n\n  }, {\n    key: \"produce\",\n    value: function () {\n      var _produce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var _this5 = this;\n\n        var _ref6,\n            track,\n            encodings,\n            codecOptions,\n            codec,\n            _ref6$stopTracks,\n            stopTracks,\n            _ref6$disableTrackOnP,\n            disableTrackOnPause,\n            _ref6$zeroRtpOnPause,\n            zeroRtpOnPause,\n            _ref6$appData,\n            appData,\n            _args7 = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _ref6 = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {}, track = _ref6.track, encodings = _ref6.encodings, codecOptions = _ref6.codecOptions, codec = _ref6.codec, _ref6$stopTracks = _ref6.stopTracks, stopTracks = _ref6$stopTracks === void 0 ? true : _ref6$stopTracks, _ref6$disableTrackOnP = _ref6.disableTrackOnPause, disableTrackOnPause = _ref6$disableTrackOnP === void 0 ? true : _ref6$disableTrackOnP, _ref6$zeroRtpOnPause = _ref6.zeroRtpOnPause, zeroRtpOnPause = _ref6$zeroRtpOnPause === void 0 ? false : _ref6$zeroRtpOnPause, _ref6$appData = _ref6.appData, appData = _ref6$appData === void 0 ? {} : _ref6$appData;\n                logger.debug('produce() [track:%o]', track);\n\n                if (!this._closed) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                throw new errors_1.InvalidStateError('closed');\n\n              case 6:\n                if (track) {\n                  _context7.next = 10;\n                  break;\n                }\n\n                throw new TypeError('missing track');\n\n              case 10:\n                if (!(this._direction !== 'send')) {\n                  _context7.next = 14;\n                  break;\n                }\n\n                throw new errors_1.UnsupportedError('not a sending Transport');\n\n              case 14:\n                if (this._canProduceByKind[track.kind]) {\n                  _context7.next = 18;\n                  break;\n                }\n\n                throw new errors_1.UnsupportedError(\"cannot produce \".concat(track.kind));\n\n              case 18:\n                if (!(track.readyState === 'ended')) {\n                  _context7.next = 22;\n                  break;\n                }\n\n                throw new errors_1.InvalidStateError('track ended');\n\n              case 22:\n                if (!(this.listenerCount('connect') === 0 && this._connectionState === 'new')) {\n                  _context7.next = 26;\n                  break;\n                }\n\n                throw new TypeError('no \"connect\" listener set into this transport');\n\n              case 26:\n                if (!(this.listenerCount('produce') === 0)) {\n                  _context7.next = 30;\n                  break;\n                }\n\n                throw new TypeError('no \"produce\" listener set into this transport');\n\n              case 30:\n                if (!(appData && typeof appData !== 'object')) {\n                  _context7.next = 32;\n                  break;\n                }\n\n                throw new TypeError('if given, appData must be an object');\n\n              case 32:\n                return _context7.abrupt(\"return\", this._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n                  var normalizedEncodings, _yield$_this5$_handle, localId, rtpParameters, rtpSender, _yield$Promise, id, producer;\n\n                  return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          if (!(encodings && !Array.isArray(encodings))) {\n                            _context6.next = 4;\n                            break;\n                          }\n\n                          throw TypeError('encodings must be an array');\n\n                        case 4:\n                          if (encodings && encodings.length === 0) {\n                            normalizedEncodings = undefined;\n                          } else if (encodings) {\n                            normalizedEncodings = encodings.map(function (encoding) {\n                              var normalizedEncoding = {\n                                active: true\n                              };\n\n                              if (encoding.active === false) {\n                                normalizedEncoding.active = false;\n                              }\n\n                              if (typeof encoding.dtx === 'boolean') {\n                                normalizedEncoding.dtx = encoding.dtx;\n                              }\n\n                              if (typeof encoding.scalabilityMode === 'string') {\n                                normalizedEncoding.scalabilityMode = encoding.scalabilityMode;\n                              }\n\n                              if (typeof encoding.scaleResolutionDownBy === 'number') {\n                                normalizedEncoding.scaleResolutionDownBy = encoding.scaleResolutionDownBy;\n                              }\n\n                              if (typeof encoding.maxBitrate === 'number') {\n                                normalizedEncoding.maxBitrate = encoding.maxBitrate;\n                              }\n\n                              if (typeof encoding.maxFramerate === 'number') {\n                                normalizedEncoding.maxFramerate = encoding.maxFramerate;\n                              }\n\n                              if (typeof encoding.adaptivePtime === 'boolean') {\n                                normalizedEncoding.adaptivePtime = encoding.adaptivePtime;\n                              }\n\n                              if (typeof encoding.priority === 'string') {\n                                normalizedEncoding.priority = encoding.priority;\n                              }\n\n                              if (typeof encoding.networkPriority === 'string') {\n                                normalizedEncoding.networkPriority = encoding.networkPriority;\n                              }\n\n                              return normalizedEncoding;\n                            });\n                          }\n\n                        case 5:\n                          _context6.next = 7;\n                          return _this5._handler.send({\n                            track: track,\n                            encodings: normalizedEncodings,\n                            codecOptions: codecOptions,\n                            codec: codec\n                          });\n\n                        case 7:\n                          _yield$_this5$_handle = _context6.sent;\n                          localId = _yield$_this5$_handle.localId;\n                          rtpParameters = _yield$_this5$_handle.rtpParameters;\n                          rtpSender = _yield$_this5$_handle.rtpSender;\n                          _context6.prev = 11;\n                          // This will fill rtpParameters's missing fields with default values.\n                          ortc.validateRtpParameters(rtpParameters);\n                          _context6.next = 15;\n                          return new Promise(function (resolve, reject) {\n                            _this5.safeEmit('produce', {\n                              kind: track.kind,\n                              rtpParameters: rtpParameters,\n                              appData: appData\n                            }, resolve, reject);\n                          });\n\n                        case 15:\n                          _yield$Promise = _context6.sent;\n                          id = _yield$Promise.id;\n                          producer = new Producer_1.Producer({\n                            id: id,\n                            localId: localId,\n                            rtpSender: rtpSender,\n                            track: track,\n                            rtpParameters: rtpParameters,\n                            stopTracks: stopTracks,\n                            disableTrackOnPause: disableTrackOnPause,\n                            zeroRtpOnPause: zeroRtpOnPause,\n                            appData: appData\n                          });\n\n                          _this5._producers.set(producer.id, producer);\n\n                          _this5.handleProducer(producer); // Emit observer event.\n\n\n                          _this5._observer.safeEmit('newproducer', producer);\n\n                          return _context6.abrupt(\"return\", producer);\n\n                        case 24:\n                          _context6.prev = 24;\n                          _context6.t0 = _context6[\"catch\"](11);\n\n                          _this5._handler.stopSending(localId).catch(function () {});\n\n                          throw _context6.t0;\n\n                        case 28:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6, null, [[11, 24]]);\n                })), 'transport.produce()') // This catch is needed to stop the given track if the command above\n                // failed due to closed Transport.\n                .catch(function (error) {\n                  if (stopTracks) {\n                    try {\n                      track.stop();\n                    } catch (error2) {}\n                  }\n\n                  throw error;\n                }));\n\n              case 33:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function produce() {\n        return _produce.apply(this, arguments);\n      }\n\n      return produce;\n    }()\n    /**\n     * Create a Consumer to consume a remote Producer.\n     */\n\n  }, {\n    key: \"consume\",\n    value: function () {\n      var _consume = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(_ref8) {\n        var _this6 = this;\n\n        var id, producerId, kind, rtpParameters, streamId, _ref8$appData, appData, canConsume, consumerCreationTask;\n\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                id = _ref8.id, producerId = _ref8.producerId, kind = _ref8.kind, rtpParameters = _ref8.rtpParameters, streamId = _ref8.streamId, _ref8$appData = _ref8.appData, appData = _ref8$appData === void 0 ? {} : _ref8$appData;\n                logger.debug('consume()');\n                rtpParameters = utils.clone(rtpParameters, undefined);\n\n                if (!this._closed) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                throw new errors_1.InvalidStateError('closed');\n\n              case 7:\n                if (!(this._direction !== 'recv')) {\n                  _context8.next = 11;\n                  break;\n                }\n\n                throw new errors_1.UnsupportedError('not a receiving Transport');\n\n              case 11:\n                if (!(typeof id !== 'string')) {\n                  _context8.next = 15;\n                  break;\n                }\n\n                throw new TypeError('missing id');\n\n              case 15:\n                if (!(typeof producerId !== 'string')) {\n                  _context8.next = 19;\n                  break;\n                }\n\n                throw new TypeError('missing producerId');\n\n              case 19:\n                if (!(kind !== 'audio' && kind !== 'video')) {\n                  _context8.next = 23;\n                  break;\n                }\n\n                throw new TypeError(\"invalid kind '\".concat(kind, \"'\"));\n\n              case 23:\n                if (!(this.listenerCount('connect') === 0 && this._connectionState === 'new')) {\n                  _context8.next = 27;\n                  break;\n                }\n\n                throw new TypeError('no \"connect\" listener set into this transport');\n\n              case 27:\n                if (!(appData && typeof appData !== 'object')) {\n                  _context8.next = 29;\n                  break;\n                }\n\n                throw new TypeError('if given, appData must be an object');\n\n              case 29:\n                // Ensure the device can consume it.\n                canConsume = ortc.canReceive(rtpParameters, this._extendedRtpCapabilities);\n\n                if (canConsume) {\n                  _context8.next = 32;\n                  break;\n                }\n\n                throw new errors_1.UnsupportedError('cannot consume this Producer');\n\n              case 32:\n                consumerCreationTask = new ConsumerCreationTask({\n                  id: id,\n                  producerId: producerId,\n                  kind: kind,\n                  rtpParameters: rtpParameters,\n                  streamId: streamId,\n                  appData: appData\n                }); // Store the Consumer creation task.\n\n                this._pendingConsumerTasks.push(consumerCreationTask); // There is no Consumer creation in progress, create it now.\n\n\n                (0, queue_microtask_1.default)(function () {\n                  if (_this6._closed) {\n                    throw new errors_1.InvalidStateError('closed');\n                  }\n\n                  if (_this6._consumerCreationInProgress === false) {\n                    _this6.createPendingConsumers();\n                  }\n                });\n                return _context8.abrupt(\"return\", consumerCreationTask.promise);\n\n              case 36:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function consume(_x2) {\n        return _consume.apply(this, arguments);\n      }\n\n      return consume;\n    }()\n    /**\n     * Create a DataProducer\n     */\n\n  }, {\n    key: \"produceData\",\n    value: function () {\n      var _produceData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var _this7 = this;\n\n        var _ref9,\n            _ref9$ordered,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            _ref9$label,\n            label,\n            _ref9$protocol,\n            protocol,\n            _ref9$appData,\n            appData,\n            _args10 = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _ref9 = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {}, _ref9$ordered = _ref9.ordered, ordered = _ref9$ordered === void 0 ? true : _ref9$ordered, maxPacketLifeTime = _ref9.maxPacketLifeTime, maxRetransmits = _ref9.maxRetransmits, _ref9$label = _ref9.label, label = _ref9$label === void 0 ? '' : _ref9$label, _ref9$protocol = _ref9.protocol, protocol = _ref9$protocol === void 0 ? '' : _ref9$protocol, _ref9$appData = _ref9.appData, appData = _ref9$appData === void 0 ? {} : _ref9$appData;\n                logger.debug('produceData()');\n\n                if (!this._closed) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                throw new errors_1.InvalidStateError('closed');\n\n              case 6:\n                if (!(this._direction !== 'send')) {\n                  _context10.next = 10;\n                  break;\n                }\n\n                throw new errors_1.UnsupportedError('not a sending Transport');\n\n              case 10:\n                if (this._maxSctpMessageSize) {\n                  _context10.next = 14;\n                  break;\n                }\n\n                throw new errors_1.UnsupportedError('SCTP not enabled by remote Transport');\n\n              case 14:\n                if (!(this.listenerCount('connect') === 0 && this._connectionState === 'new')) {\n                  _context10.next = 18;\n                  break;\n                }\n\n                throw new TypeError('no \"connect\" listener set into this transport');\n\n              case 18:\n                if (!(this.listenerCount('producedata') === 0)) {\n                  _context10.next = 22;\n                  break;\n                }\n\n                throw new TypeError('no \"producedata\" listener set into this transport');\n\n              case 22:\n                if (!(appData && typeof appData !== 'object')) {\n                  _context10.next = 24;\n                  break;\n                }\n\n                throw new TypeError('if given, appData must be an object');\n\n              case 24:\n                if (maxPacketLifeTime || maxRetransmits) {\n                  ordered = false;\n                } // Enqueue command.\n\n\n                return _context10.abrupt(\"return\", this._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n                  var _yield$_this7$_handle, dataChannel, sctpStreamParameters, _yield$Promise2, id, dataProducer;\n\n                  return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          _context9.next = 2;\n                          return _this7._handler.sendDataChannel({\n                            ordered: ordered,\n                            maxPacketLifeTime: maxPacketLifeTime,\n                            maxRetransmits: maxRetransmits,\n                            label: label,\n                            protocol: protocol\n                          });\n\n                        case 2:\n                          _yield$_this7$_handle = _context9.sent;\n                          dataChannel = _yield$_this7$_handle.dataChannel;\n                          sctpStreamParameters = _yield$_this7$_handle.sctpStreamParameters;\n                          // This will fill sctpStreamParameters's missing fields with default values.\n                          ortc.validateSctpStreamParameters(sctpStreamParameters);\n                          _context9.next = 8;\n                          return new Promise(function (resolve, reject) {\n                            _this7.safeEmit('producedata', {\n                              sctpStreamParameters: sctpStreamParameters,\n                              label: label,\n                              protocol: protocol,\n                              appData: appData\n                            }, resolve, reject);\n                          });\n\n                        case 8:\n                          _yield$Promise2 = _context9.sent;\n                          id = _yield$Promise2.id;\n                          dataProducer = new DataProducer_1.DataProducer({\n                            id: id,\n                            dataChannel: dataChannel,\n                            sctpStreamParameters: sctpStreamParameters,\n                            appData: appData\n                          });\n\n                          _this7._dataProducers.set(dataProducer.id, dataProducer);\n\n                          _this7.handleDataProducer(dataProducer); // Emit observer event.\n\n\n                          _this7._observer.safeEmit('newdataproducer', dataProducer);\n\n                          return _context9.abrupt(\"return\", dataProducer);\n\n                        case 15:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                })), 'transport.produceData()'));\n\n              case 26:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function produceData() {\n        return _produceData.apply(this, arguments);\n      }\n\n      return produceData;\n    }()\n    /**\n     * Create a DataConsumer\n     */\n\n  }, {\n    key: \"consumeData\",\n    value: function () {\n      var _consumeData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(_ref11) {\n        var _this8 = this;\n\n        var id, dataProducerId, sctpStreamParameters, _ref11$label, label, _ref11$protocol, protocol, _ref11$appData, appData;\n\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                id = _ref11.id, dataProducerId = _ref11.dataProducerId, sctpStreamParameters = _ref11.sctpStreamParameters, _ref11$label = _ref11.label, label = _ref11$label === void 0 ? '' : _ref11$label, _ref11$protocol = _ref11.protocol, protocol = _ref11$protocol === void 0 ? '' : _ref11$protocol, _ref11$appData = _ref11.appData, appData = _ref11$appData === void 0 ? {} : _ref11$appData;\n                logger.debug('consumeData()');\n                sctpStreamParameters = utils.clone(sctpStreamParameters, undefined);\n\n                if (!this._closed) {\n                  _context12.next = 7;\n                  break;\n                }\n\n                throw new errors_1.InvalidStateError('closed');\n\n              case 7:\n                if (!(this._direction !== 'recv')) {\n                  _context12.next = 11;\n                  break;\n                }\n\n                throw new errors_1.UnsupportedError('not a receiving Transport');\n\n              case 11:\n                if (this._maxSctpMessageSize) {\n                  _context12.next = 15;\n                  break;\n                }\n\n                throw new errors_1.UnsupportedError('SCTP not enabled by remote Transport');\n\n              case 15:\n                if (!(typeof id !== 'string')) {\n                  _context12.next = 19;\n                  break;\n                }\n\n                throw new TypeError('missing id');\n\n              case 19:\n                if (!(typeof dataProducerId !== 'string')) {\n                  _context12.next = 23;\n                  break;\n                }\n\n                throw new TypeError('missing dataProducerId');\n\n              case 23:\n                if (!(this.listenerCount('connect') === 0 && this._connectionState === 'new')) {\n                  _context12.next = 27;\n                  break;\n                }\n\n                throw new TypeError('no \"connect\" listener set into this transport');\n\n              case 27:\n                if (!(appData && typeof appData !== 'object')) {\n                  _context12.next = 29;\n                  break;\n                }\n\n                throw new TypeError('if given, appData must be an object');\n\n              case 29:\n                // This may throw.\n                ortc.validateSctpStreamParameters(sctpStreamParameters); // Enqueue command.\n\n                return _context12.abrupt(\"return\", this._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n                  var _yield$_this8$_handle, dataChannel, dataConsumer;\n\n                  return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n                    while (1) {\n                      switch (_context11.prev = _context11.next) {\n                        case 0:\n                          _context11.next = 2;\n                          return _this8._handler.receiveDataChannel({\n                            sctpStreamParameters: sctpStreamParameters,\n                            label: label,\n                            protocol: protocol\n                          });\n\n                        case 2:\n                          _yield$_this8$_handle = _context11.sent;\n                          dataChannel = _yield$_this8$_handle.dataChannel;\n                          dataConsumer = new DataConsumer_1.DataConsumer({\n                            id: id,\n                            dataProducerId: dataProducerId,\n                            dataChannel: dataChannel,\n                            sctpStreamParameters: sctpStreamParameters,\n                            appData: appData\n                          });\n\n                          _this8._dataConsumers.set(dataConsumer.id, dataConsumer);\n\n                          _this8.handleDataConsumer(dataConsumer); // Emit observer event.\n\n\n                          _this8._observer.safeEmit('newdataconsumer', dataConsumer);\n\n                          return _context11.abrupt(\"return\", dataConsumer);\n\n                        case 9:\n                        case \"end\":\n                          return _context11.stop();\n                      }\n                    }\n                  }, _callee11);\n                })), 'transport.consumeData()'));\n\n              case 31:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function consumeData(_x3) {\n        return _consumeData.apply(this, arguments);\n      }\n\n      return consumeData;\n    }() // This method is guaranteed to never throw.\n\n  }, {\n    key: \"createPendingConsumers\",\n    value: function () {\n      var _createPendingConsumers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        var _this9 = this;\n\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                this._consumerCreationInProgress = true;\n\n                this._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n                  var pendingConsumerTasks, videoConsumerForProbator, optionsList, _iterator5, _step5, _task2, _task2$consumerOption, _id, _kind, _rtpParameters, streamId, results, idx, task, result, _task$consumerOptions, id, producerId, kind, rtpParameters, appData, localId, rtpReceiver, track, consumer, _iterator6, _step6, _task, probatorRtpParameters;\n\n                  return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          if (!(_this9._pendingConsumerTasks.length === 0)) {\n                            _context13.next = 3;\n                            break;\n                          }\n\n                          logger.debug('createPendingConsumers() | there is no Consumer to be created');\n                          return _context13.abrupt(\"return\");\n\n                        case 3:\n                          pendingConsumerTasks = _toConsumableArray(_this9._pendingConsumerTasks); // Clear pending Consumer tasks.\n\n                          _this9._pendingConsumerTasks = []; // Video Consumer in order to create the probator.\n\n                          videoConsumerForProbator = undefined; // Fill options list.\n\n                          optionsList = [];\n                          _iterator5 = _createForOfIteratorHelper(pendingConsumerTasks);\n\n                          try {\n                            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                              _task2 = _step5.value;\n                              _task2$consumerOption = _task2.consumerOptions, _id = _task2$consumerOption.id, _kind = _task2$consumerOption.kind, _rtpParameters = _task2$consumerOption.rtpParameters, streamId = _task2$consumerOption.streamId;\n                              optionsList.push({\n                                trackId: _id,\n                                kind: _kind,\n                                rtpParameters: _rtpParameters,\n                                streamId: streamId\n                              });\n                            }\n                          } catch (err) {\n                            _iterator5.e(err);\n                          } finally {\n                            _iterator5.f();\n                          }\n\n                          _context13.prev = 9;\n                          _context13.next = 12;\n                          return _this9._handler.receive(optionsList);\n\n                        case 12:\n                          results = _context13.sent;\n\n                          for (idx = 0; idx < results.length; idx++) {\n                            task = pendingConsumerTasks[idx];\n                            result = results[idx];\n                            _task$consumerOptions = task.consumerOptions, id = _task$consumerOptions.id, producerId = _task$consumerOptions.producerId, kind = _task$consumerOptions.kind, rtpParameters = _task$consumerOptions.rtpParameters, appData = _task$consumerOptions.appData;\n                            localId = result.localId, rtpReceiver = result.rtpReceiver, track = result.track;\n                            consumer = new Consumer_1.Consumer({\n                              id: id,\n                              localId: localId,\n                              producerId: producerId,\n                              rtpReceiver: rtpReceiver,\n                              track: track,\n                              rtpParameters: rtpParameters,\n                              appData: appData\n                            });\n\n                            _this9._consumers.set(consumer.id, consumer);\n\n                            _this9.handleConsumer(consumer); // If this is the first video Consumer and the Consumer for RTP probation\n                            // has not yet been created, it's time to create it.\n\n\n                            if (!_this9._probatorConsumerCreated && !videoConsumerForProbator && kind === 'video') {\n                              videoConsumerForProbator = consumer;\n                            } // Emit observer event.\n\n\n                            _this9._observer.safeEmit('newconsumer', consumer);\n\n                            task.resolve(consumer);\n                          }\n\n                          _context13.next = 20;\n                          break;\n\n                        case 16:\n                          _context13.prev = 16;\n                          _context13.t0 = _context13[\"catch\"](9);\n                          _iterator6 = _createForOfIteratorHelper(pendingConsumerTasks);\n\n                          try {\n                            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                              _task = _step6.value;\n\n                              _task.reject(_context13.t0);\n                            }\n                          } catch (err) {\n                            _iterator6.e(err);\n                          } finally {\n                            _iterator6.f();\n                          }\n\n                        case 20:\n                          if (!videoConsumerForProbator) {\n                            _context13.next = 32;\n                            break;\n                          }\n\n                          _context13.prev = 21;\n                          probatorRtpParameters = ortc.generateProbatorRtpParameters(videoConsumerForProbator.rtpParameters);\n                          _context13.next = 25;\n                          return _this9._handler.receive([{\n                            trackId: 'probator',\n                            kind: 'video',\n                            rtpParameters: probatorRtpParameters\n                          }]);\n\n                        case 25:\n                          logger.debug('createPendingConsumers() | Consumer for RTP probation created');\n                          _this9._probatorConsumerCreated = true;\n                          _context13.next = 32;\n                          break;\n\n                        case 29:\n                          _context13.prev = 29;\n                          _context13.t1 = _context13[\"catch\"](21);\n                          logger.error('createPendingConsumers() | failed to create Consumer for RTP probation:%o', _context13.t1);\n\n                        case 32:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13, null, [[9, 16], [21, 29]]);\n                })), 'transport.createPendingConsumers()').then(function () {\n                  _this9._consumerCreationInProgress = false; // There are pending Consumer tasks, enqueue their creation.\n\n                  if (_this9._pendingConsumerTasks.length > 0) {\n                    _this9.createPendingConsumers();\n                  }\n                }) // NOTE: We only get here when the await queue is closed.\n                .catch(function () {});\n\n              case 2:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function createPendingConsumers() {\n        return _createPendingConsumers.apply(this, arguments);\n      }\n\n      return createPendingConsumers;\n    }()\n  }, {\n    key: \"pausePendingConsumers\",\n    value: function pausePendingConsumers() {\n      var _this10 = this;\n\n      this._consumerPauseInProgress = true;\n\n      this._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n        var pendingPauseConsumers, localIds;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                if (!(_this10._pendingPauseConsumers.size === 0)) {\n                  _context15.next = 3;\n                  break;\n                }\n\n                logger.debug('pausePendingConsumers() | there is no Consumer to be paused');\n                return _context15.abrupt(\"return\");\n\n              case 3:\n                pendingPauseConsumers = Array.from(_this10._pendingPauseConsumers.values()); // Clear pending pause Consumer map.\n\n                _this10._pendingPauseConsumers.clear();\n\n                _context15.prev = 5;\n                localIds = pendingPauseConsumers.map(function (consumer) {\n                  return consumer.localId;\n                });\n                _context15.next = 9;\n                return _this10._handler.pauseReceiving(localIds);\n\n              case 9:\n                _context15.next = 14;\n                break;\n\n              case 11:\n                _context15.prev = 11;\n                _context15.t0 = _context15[\"catch\"](5);\n                logger.error('pausePendingConsumers() | failed to pause Consumers:', _context15.t0);\n\n              case 14:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, null, [[5, 11]]);\n      })), 'transport.pausePendingConsumers').then(function () {\n        _this10._consumerPauseInProgress = false; // There are pending Consumers to be paused, do it.\n\n        if (_this10._pendingPauseConsumers.size > 0) {\n          _this10.pausePendingConsumers();\n        }\n      }) // NOTE: We only get here when the await queue is closed.\n      .catch(function () {});\n    }\n  }, {\n    key: \"resumePendingConsumers\",\n    value: function resumePendingConsumers() {\n      var _this11 = this;\n\n      this._consumerResumeInProgress = true;\n\n      this._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n        var pendingResumeConsumers, localIds;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                if (!(_this11._pendingResumeConsumers.size === 0)) {\n                  _context16.next = 3;\n                  break;\n                }\n\n                logger.debug('resumePendingConsumers() | there is no Consumer to be resumed');\n                return _context16.abrupt(\"return\");\n\n              case 3:\n                pendingResumeConsumers = Array.from(_this11._pendingResumeConsumers.values()); // Clear pending resume Consumer map.\n\n                _this11._pendingResumeConsumers.clear();\n\n                _context16.prev = 5;\n                localIds = pendingResumeConsumers.map(function (consumer) {\n                  return consumer.localId;\n                });\n                _context16.next = 9;\n                return _this11._handler.resumeReceiving(localIds);\n\n              case 9:\n                _context16.next = 14;\n                break;\n\n              case 11:\n                _context16.prev = 11;\n                _context16.t0 = _context16[\"catch\"](5);\n                logger.error('resumePendingConsumers() | failed to resume Consumers:', _context16.t0);\n\n              case 14:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, null, [[5, 11]]);\n      })), 'transport.resumePendingConsumers').then(function () {\n        _this11._consumerResumeInProgress = false; // There are pending Consumer to be resumed, do it.\n\n        if (_this11._pendingResumeConsumers.size > 0) {\n          _this11.resumePendingConsumers();\n        }\n      }) // NOTE: We only get here when the await queue is closed.\n      .catch(function () {});\n    }\n  }, {\n    key: \"closePendingConsumers\",\n    value: function closePendingConsumers() {\n      var _this12 = this;\n\n      this._consumerCloseInProgress = true;\n\n      this._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n        var pendingCloseConsumers;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                if (!(_this12._pendingCloseConsumers.size === 0)) {\n                  _context17.next = 3;\n                  break;\n                }\n\n                logger.debug('closePendingConsumers() | there is no Consumer to be closed');\n                return _context17.abrupt(\"return\");\n\n              case 3:\n                pendingCloseConsumers = Array.from(_this12._pendingCloseConsumers.values()); // Clear pending close Consumer map.\n\n                _this12._pendingCloseConsumers.clear();\n\n                _context17.prev = 5;\n                _context17.next = 8;\n                return _this12._handler.stopReceiving(pendingCloseConsumers.map(function (consumer) {\n                  return consumer.localId;\n                }));\n\n              case 8:\n                _context17.next = 13;\n                break;\n\n              case 10:\n                _context17.prev = 10;\n                _context17.t0 = _context17[\"catch\"](5);\n                logger.error('closePendingConsumers() | failed to close Consumers:', _context17.t0);\n\n              case 13:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, null, [[5, 10]]);\n      })), 'transport.closePendingConsumers').then(function () {\n        _this12._consumerCloseInProgress = false; // There are pending Consumer to be resumed, do it.\n\n        if (_this12._pendingCloseConsumers.size > 0) {\n          _this12.closePendingConsumers();\n        }\n      }) // NOTE: We only get here when the await queue is closed.\n      .catch(function () {});\n    }\n  }, {\n    key: \"handleHandler\",\n    value: function handleHandler() {\n      var _this13 = this;\n\n      var handler = this._handler;\n      handler.on('@connect', function (_ref17, callback, errback) {\n        var dtlsParameters = _ref17.dtlsParameters;\n\n        if (_this13._closed) {\n          errback(new errors_1.InvalidStateError('closed'));\n          return;\n        }\n\n        _this13.safeEmit('connect', {\n          dtlsParameters: dtlsParameters\n        }, callback, errback);\n      });\n      handler.on('@connectionstatechange', function (connectionState) {\n        if (connectionState === _this13._connectionState) {\n          return;\n        }\n\n        logger.debug('connection state changed to %s', connectionState);\n        _this13._connectionState = connectionState;\n\n        if (!_this13._closed) {\n          _this13.safeEmit('connectionstatechange', connectionState);\n        }\n      });\n    }\n  }, {\n    key: \"handleProducer\",\n    value: function handleProducer(producer) {\n      var _this14 = this;\n\n      producer.on('@close', function () {\n        _this14._producers.delete(producer.id);\n\n        if (_this14._closed) {\n          return;\n        }\n\n        _this14._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n          return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n            while (1) {\n              switch (_context18.prev = _context18.next) {\n                case 0:\n                  return _context18.abrupt(\"return\", _this14._handler.stopSending(producer.localId));\n\n                case 1:\n                case \"end\":\n                  return _context18.stop();\n              }\n            }\n          }, _callee18);\n        })), 'producer @close event').catch(function (error) {\n          return logger.warn('producer.close() failed:%o', error);\n        });\n      });\n      producer.on('@pause', function (callback, errback) {\n        _this14._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n          return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n            while (1) {\n              switch (_context19.prev = _context19.next) {\n                case 0:\n                  return _context19.abrupt(\"return\", _this14._handler.pauseSending(producer.localId));\n\n                case 1:\n                case \"end\":\n                  return _context19.stop();\n              }\n            }\n          }, _callee19);\n        })), 'producer @pause event').then(callback).catch(errback);\n      });\n      producer.on('@resume', function (callback, errback) {\n        _this14._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n          return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n            while (1) {\n              switch (_context20.prev = _context20.next) {\n                case 0:\n                  return _context20.abrupt(\"return\", _this14._handler.resumeSending(producer.localId));\n\n                case 1:\n                case \"end\":\n                  return _context20.stop();\n              }\n            }\n          }, _callee20);\n        })), 'producer @resume event').then(callback).catch(errback);\n      });\n      producer.on('@replacetrack', function (track, callback, errback) {\n        _this14._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n          return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n            while (1) {\n              switch (_context21.prev = _context21.next) {\n                case 0:\n                  return _context21.abrupt(\"return\", _this14._handler.replaceTrack(producer.localId, track));\n\n                case 1:\n                case \"end\":\n                  return _context21.stop();\n              }\n            }\n          }, _callee21);\n        })), 'producer @replacetrack event').then(callback).catch(errback);\n      });\n      producer.on('@setmaxspatiallayer', function (spatialLayer, callback, errback) {\n        _this14._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n          return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n            while (1) {\n              switch (_context22.prev = _context22.next) {\n                case 0:\n                  return _context22.abrupt(\"return\", _this14._handler.setMaxSpatialLayer(producer.localId, spatialLayer));\n\n                case 1:\n                case \"end\":\n                  return _context22.stop();\n              }\n            }\n          }, _callee22);\n        })), 'producer @setmaxspatiallayer event').then(callback).catch(errback);\n      });\n      producer.on('@setrtpencodingparameters', function (params, callback, errback) {\n        _this14._awaitQueue.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n          return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n            while (1) {\n              switch (_context23.prev = _context23.next) {\n                case 0:\n                  return _context23.abrupt(\"return\", _this14._handler.setRtpEncodingParameters(producer.localId, params));\n\n                case 1:\n                case \"end\":\n                  return _context23.stop();\n              }\n            }\n          }, _callee23);\n        })), 'producer @setrtpencodingparameters event').then(callback).catch(errback);\n      });\n      producer.on('@getstats', function (callback, errback) {\n        if (_this14._closed) {\n          return errback(new errors_1.InvalidStateError('closed'));\n        }\n\n        _this14._handler.getSenderStats(producer.localId).then(callback).catch(errback);\n      });\n    }\n  }, {\n    key: \"handleConsumer\",\n    value: function handleConsumer(consumer) {\n      var _this15 = this;\n\n      consumer.on('@close', function () {\n        _this15._consumers.delete(consumer.id);\n\n        _this15._pendingPauseConsumers.delete(consumer.id);\n\n        _this15._pendingResumeConsumers.delete(consumer.id);\n\n        if (_this15._closed) {\n          return;\n        } // Store the Consumer into the close list.\n\n\n        _this15._pendingCloseConsumers.set(consumer.id, consumer); // There is no Consumer close in progress, do it now.\n\n\n        if (_this15._consumerCloseInProgress === false) {\n          _this15.closePendingConsumers();\n        }\n      });\n      consumer.on('@pause', function () {\n        // If Consumer is pending to be resumed, remove from pending resume list.\n        if (_this15._pendingResumeConsumers.has(consumer.id)) {\n          _this15._pendingResumeConsumers.delete(consumer.id);\n        } // Store the Consumer into the pending list.\n\n\n        _this15._pendingPauseConsumers.set(consumer.id, consumer); // There is no Consumer pause in progress, do it now.\n\n\n        (0, queue_microtask_1.default)(function () {\n          if (_this15._closed) {\n            return;\n          }\n\n          if (_this15._consumerPauseInProgress === false) {\n            _this15.pausePendingConsumers();\n          }\n        });\n      });\n      consumer.on('@resume', function () {\n        // If Consumer is pending to be paused, remove from pending pause list.\n        if (_this15._pendingPauseConsumers.has(consumer.id)) {\n          _this15._pendingPauseConsumers.delete(consumer.id);\n        } // Store the Consumer into the pending list.\n\n\n        _this15._pendingResumeConsumers.set(consumer.id, consumer); // There is no Consumer resume in progress, do it now.\n\n\n        (0, queue_microtask_1.default)(function () {\n          if (_this15._closed) {\n            return;\n          }\n\n          if (_this15._consumerResumeInProgress === false) {\n            _this15.resumePendingConsumers();\n          }\n        });\n      });\n      consumer.on('@getstats', function (callback, errback) {\n        if (_this15._closed) {\n          return errback(new errors_1.InvalidStateError('closed'));\n        }\n\n        _this15._handler.getReceiverStats(consumer.localId).then(callback).catch(errback);\n      });\n    }\n  }, {\n    key: \"handleDataProducer\",\n    value: function handleDataProducer(dataProducer) {\n      var _this16 = this;\n\n      dataProducer.on('@close', function () {\n        _this16._dataProducers.delete(dataProducer.id);\n      });\n    }\n  }, {\n    key: \"handleDataConsumer\",\n    value: function handleDataConsumer(dataConsumer) {\n      var _this17 = this;\n\n      dataConsumer.on('@close', function () {\n        _this17._dataConsumers.delete(dataConsumer.id);\n      });\n    }\n  }]);\n\n  return Transport;\n}(EnhancedEventEmitter_1.EnhancedEventEmitter);\n\nexports.Transport = Transport;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","Transport","awaitqueue_1","require","queue_microtask_1","Logger_1","EnhancedEventEmitter_1","errors_1","utils","ortc","Producer_1","Consumer_1","DataProducer_1","DataConsumer_1","logger","Logger","ConsumerCreationTask","consumerOptions","promise","Promise","resolve","reject","direction","id","iceParameters","iceCandidates","dtlsParameters","sctpParameters","iceServers","iceTransportPolicy","additionalSettings","proprietaryConstraints","appData","handlerFactory","extendedRtpCapabilities","canProduceByKind","_closed","_connectionState","_producers","Map","_consumers","_dataProducers","_dataConsumers","_probatorConsumerCreated","_awaitQueue","AwaitQueue","_pendingConsumerTasks","_consumerCreationInProgress","_pendingPauseConsumers","_consumerPauseInProgress","_pendingResumeConsumers","_consumerResumeInProgress","_pendingCloseConsumers","_consumerCloseInProgress","_observer","EnhancedEventEmitter","debug","_id","_direction","_extendedRtpCapabilities","_canProduceByKind","_maxSctpMessageSize","maxMessageSize","clone","bundlePolicy","rtcpMuxPolicy","sdpSemantics","_handler","run","_appData","handleHandler","Error","stop","close","values","producer","transportClosed","clear","consumer","dataProducer","dataConsumer","safeEmit","InvalidStateError","getTransportStats","TypeError","push","restartIce","Array","isArray","updateIceServers","track","encodings","codecOptions","codec","stopTracks","disableTrackOnPause","zeroRtpOnPause","UnsupportedError","kind","readyState","listenerCount","length","normalizedEncodings","map","encoding","normalizedEncoding","active","dtx","scalabilityMode","scaleResolutionDownBy","maxBitrate","maxFramerate","adaptivePtime","priority","networkPriority","send","localId","rtpParameters","rtpSender","validateRtpParameters","Producer","set","handleProducer","stopSending","catch","error","error2","producerId","streamId","canConsume","canReceive","consumerCreationTask","default","createPendingConsumers","ordered","maxPacketLifeTime","maxRetransmits","label","protocol","sendDataChannel","dataChannel","sctpStreamParameters","validateSctpStreamParameters","DataProducer","handleDataProducer","dataProducerId","receiveDataChannel","DataConsumer","handleDataConsumer","pendingConsumerTasks","videoConsumerForProbator","optionsList","task","trackId","receive","results","idx","rtpReceiver","Consumer","handleConsumer","probatorRtpParameters","generateProbatorRtpParameters","then","size","pendingPauseConsumers","from","localIds","pauseReceiving","pausePendingConsumers","pendingResumeConsumers","resumeReceiving","resumePendingConsumers","pendingCloseConsumers","stopReceiving","closePendingConsumers","handler","on","callback","errback","connectionState","delete","warn","pauseSending","resumeSending","replaceTrack","spatialLayer","setMaxSpatialLayer","params","setRtpEncodingParameters","getSenderStats","has","getReceiverStats"],"sources":["/home/runner/work/watchparty/watchparty/node_modules/mediasoup-client/lib/Transport.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transport = void 0;\nconst awaitqueue_1 = require(\"awaitqueue\");\nconst queue_microtask_1 = __importDefault(require(\"queue-microtask\"));\nconst Logger_1 = require(\"./Logger\");\nconst EnhancedEventEmitter_1 = require(\"./EnhancedEventEmitter\");\nconst errors_1 = require(\"./errors\");\nconst utils = __importStar(require(\"./utils\"));\nconst ortc = __importStar(require(\"./ortc\"));\nconst Producer_1 = require(\"./Producer\");\nconst Consumer_1 = require(\"./Consumer\");\nconst DataProducer_1 = require(\"./DataProducer\");\nconst DataConsumer_1 = require(\"./DataConsumer\");\nconst logger = new Logger_1.Logger('Transport');\nclass ConsumerCreationTask {\n    constructor(consumerOptions) {\n        this.consumerOptions = consumerOptions;\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nclass Transport extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n    constructor({ direction, id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData, handlerFactory, extendedRtpCapabilities, canProduceByKind }) {\n        super();\n        // Closed flag.\n        this._closed = false;\n        // Transport connection state.\n        this._connectionState = 'new';\n        // Map of Producers indexed by id.\n        this._producers = new Map();\n        // Map of Consumers indexed by id.\n        this._consumers = new Map();\n        // Map of DataProducers indexed by id.\n        this._dataProducers = new Map();\n        // Map of DataConsumers indexed by id.\n        this._dataConsumers = new Map();\n        // Whether the Consumer for RTP probation has been created.\n        this._probatorConsumerCreated = false;\n        // AwaitQueue instance to make async tasks happen sequentially.\n        this._awaitQueue = new awaitqueue_1.AwaitQueue();\n        // Consumer creation tasks awaiting to be processed.\n        this._pendingConsumerTasks = [];\n        // Consumer creation in progress flag.\n        this._consumerCreationInProgress = false;\n        // Consumers pending to be paused.\n        this._pendingPauseConsumers = new Map();\n        // Consumer pause in progress flag.\n        this._consumerPauseInProgress = false;\n        // Consumers pending to be resumed.\n        this._pendingResumeConsumers = new Map();\n        // Consumer resume in progress flag.\n        this._consumerResumeInProgress = false;\n        // Consumers pending to be closed.\n        this._pendingCloseConsumers = new Map();\n        // Consumer close in progress flag.\n        this._consumerCloseInProgress = false;\n        // Observer instance.\n        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n        logger.debug('constructor() [id:%s, direction:%s]', id, direction);\n        this._id = id;\n        this._direction = direction;\n        this._extendedRtpCapabilities = extendedRtpCapabilities;\n        this._canProduceByKind = canProduceByKind;\n        this._maxSctpMessageSize =\n            sctpParameters ? sctpParameters.maxMessageSize : null;\n        // Clone and sanitize additionalSettings.\n        additionalSettings = utils.clone(additionalSettings, {});\n        delete additionalSettings.iceServers;\n        delete additionalSettings.iceTransportPolicy;\n        delete additionalSettings.bundlePolicy;\n        delete additionalSettings.rtcpMuxPolicy;\n        delete additionalSettings.sdpSemantics;\n        this._handler = handlerFactory();\n        this._handler.run({\n            direction,\n            iceParameters,\n            iceCandidates,\n            dtlsParameters,\n            sctpParameters,\n            iceServers,\n            iceTransportPolicy,\n            additionalSettings,\n            proprietaryConstraints,\n            extendedRtpCapabilities\n        });\n        this._appData = appData || {};\n        this.handleHandler();\n    }\n    /**\n     * Transport id.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Whether the Transport is closed.\n     */\n    get closed() {\n        return this._closed;\n    }\n    /**\n     * Transport direction.\n     */\n    get direction() {\n        return this._direction;\n    }\n    /**\n     * RTC handler instance.\n     */\n    get handler() {\n        return this._handler;\n    }\n    /**\n     * Connection state.\n     */\n    get connectionState() {\n        return this._connectionState;\n    }\n    /**\n     * App custom data.\n     */\n    get appData() {\n        return this._appData;\n    }\n    /**\n     * Invalid setter.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    set appData(appData) {\n        throw new Error('cannot override appData object');\n    }\n    get observer() {\n        return this._observer;\n    }\n    /**\n     * Close the Transport.\n     */\n    close() {\n        if (this._closed) {\n            return;\n        }\n        logger.debug('close()');\n        this._closed = true;\n        // Stop the AwaitQueue.\n        this._awaitQueue.stop();\n        // Close the handler.\n        this._handler.close();\n        // Close all Producers.\n        for (const producer of this._producers.values()) {\n            producer.transportClosed();\n        }\n        this._producers.clear();\n        // Close all Consumers.\n        for (const consumer of this._consumers.values()) {\n            consumer.transportClosed();\n        }\n        this._consumers.clear();\n        // Close all DataProducers.\n        for (const dataProducer of this._dataProducers.values()) {\n            dataProducer.transportClosed();\n        }\n        this._dataProducers.clear();\n        // Close all DataConsumers.\n        for (const dataConsumer of this._dataConsumers.values()) {\n            dataConsumer.transportClosed();\n        }\n        this._dataConsumers.clear();\n        // Emit observer event.\n        this._observer.safeEmit('close');\n    }\n    /**\n     * Get associated Transport (RTCPeerConnection) stats.\n     *\n     * @returns {RTCStatsReport}\n     */\n    async getStats() {\n        if (this._closed) {\n            throw new errors_1.InvalidStateError('closed');\n        }\n        return this._handler.getTransportStats();\n    }\n    /**\n     * Restart ICE connection.\n     */\n    async restartIce({ iceParameters }) {\n        logger.debug('restartIce()');\n        if (this._closed) {\n            throw new errors_1.InvalidStateError('closed');\n        }\n        else if (!iceParameters) {\n            throw new TypeError('missing iceParameters');\n        }\n        // Enqueue command.\n        return this._awaitQueue.push(async () => this._handler.restartIce(iceParameters), 'transport.restartIce()');\n    }\n    /**\n     * Update ICE servers.\n     */\n    async updateIceServers({ iceServers } = {}) {\n        logger.debug('updateIceServers()');\n        if (this._closed) {\n            throw new errors_1.InvalidStateError('closed');\n        }\n        else if (!Array.isArray(iceServers)) {\n            throw new TypeError('missing iceServers');\n        }\n        // Enqueue command.\n        return this._awaitQueue.push(async () => this._handler.updateIceServers(iceServers), 'transport.updateIceServers()');\n    }\n    /**\n     * Create a Producer.\n     */\n    async produce({ track, encodings, codecOptions, codec, stopTracks = true, disableTrackOnPause = true, zeroRtpOnPause = false, appData = {} } = {}) {\n        logger.debug('produce() [track:%o]', track);\n        if (this._closed) {\n            throw new errors_1.InvalidStateError('closed');\n        }\n        else if (!track) {\n            throw new TypeError('missing track');\n        }\n        else if (this._direction !== 'send') {\n            throw new errors_1.UnsupportedError('not a sending Transport');\n        }\n        else if (!this._canProduceByKind[track.kind]) {\n            throw new errors_1.UnsupportedError(`cannot produce ${track.kind}`);\n        }\n        else if (track.readyState === 'ended') {\n            throw new errors_1.InvalidStateError('track ended');\n        }\n        else if (this.listenerCount('connect') === 0 && this._connectionState === 'new') {\n            throw new TypeError('no \"connect\" listener set into this transport');\n        }\n        else if (this.listenerCount('produce') === 0) {\n            throw new TypeError('no \"produce\" listener set into this transport');\n        }\n        else if (appData && typeof appData !== 'object') {\n            throw new TypeError('if given, appData must be an object');\n        }\n        // Enqueue command.\n        return this._awaitQueue.push(async () => {\n            let normalizedEncodings;\n            if (encodings && !Array.isArray(encodings)) {\n                throw TypeError('encodings must be an array');\n            }\n            else if (encodings && encodings.length === 0) {\n                normalizedEncodings = undefined;\n            }\n            else if (encodings) {\n                normalizedEncodings = encodings\n                    .map((encoding) => {\n                    const normalizedEncoding = { active: true };\n                    if (encoding.active === false) {\n                        normalizedEncoding.active = false;\n                    }\n                    if (typeof encoding.dtx === 'boolean') {\n                        normalizedEncoding.dtx = encoding.dtx;\n                    }\n                    if (typeof encoding.scalabilityMode === 'string') {\n                        normalizedEncoding.scalabilityMode = encoding.scalabilityMode;\n                    }\n                    if (typeof encoding.scaleResolutionDownBy === 'number') {\n                        normalizedEncoding.scaleResolutionDownBy = encoding.scaleResolutionDownBy;\n                    }\n                    if (typeof encoding.maxBitrate === 'number') {\n                        normalizedEncoding.maxBitrate = encoding.maxBitrate;\n                    }\n                    if (typeof encoding.maxFramerate === 'number') {\n                        normalizedEncoding.maxFramerate = encoding.maxFramerate;\n                    }\n                    if (typeof encoding.adaptivePtime === 'boolean') {\n                        normalizedEncoding.adaptivePtime = encoding.adaptivePtime;\n                    }\n                    if (typeof encoding.priority === 'string') {\n                        normalizedEncoding.priority = encoding.priority;\n                    }\n                    if (typeof encoding.networkPriority === 'string') {\n                        normalizedEncoding.networkPriority = encoding.networkPriority;\n                    }\n                    return normalizedEncoding;\n                });\n            }\n            const { localId, rtpParameters, rtpSender } = await this._handler.send({\n                track,\n                encodings: normalizedEncodings,\n                codecOptions,\n                codec\n            });\n            try {\n                // This will fill rtpParameters's missing fields with default values.\n                ortc.validateRtpParameters(rtpParameters);\n                const { id } = await new Promise((resolve, reject) => {\n                    this.safeEmit('produce', {\n                        kind: track.kind,\n                        rtpParameters,\n                        appData\n                    }, resolve, reject);\n                });\n                const producer = new Producer_1.Producer({\n                    id,\n                    localId,\n                    rtpSender,\n                    track,\n                    rtpParameters,\n                    stopTracks,\n                    disableTrackOnPause,\n                    zeroRtpOnPause,\n                    appData\n                });\n                this._producers.set(producer.id, producer);\n                this.handleProducer(producer);\n                // Emit observer event.\n                this._observer.safeEmit('newproducer', producer);\n                return producer;\n            }\n            catch (error) {\n                this._handler.stopSending(localId)\n                    .catch(() => { });\n                throw error;\n            }\n        }, 'transport.produce()')\n            // This catch is needed to stop the given track if the command above\n            // failed due to closed Transport.\n            .catch((error) => {\n            if (stopTracks) {\n                try {\n                    track.stop();\n                }\n                catch (error2) { }\n            }\n            throw error;\n        });\n    }\n    /**\n     * Create a Consumer to consume a remote Producer.\n     */\n    async consume({ id, producerId, kind, rtpParameters, streamId, appData = {} }) {\n        logger.debug('consume()');\n        rtpParameters = utils.clone(rtpParameters, undefined);\n        if (this._closed) {\n            throw new errors_1.InvalidStateError('closed');\n        }\n        else if (this._direction !== 'recv') {\n            throw new errors_1.UnsupportedError('not a receiving Transport');\n        }\n        else if (typeof id !== 'string') {\n            throw new TypeError('missing id');\n        }\n        else if (typeof producerId !== 'string') {\n            throw new TypeError('missing producerId');\n        }\n        else if (kind !== 'audio' && kind !== 'video') {\n            throw new TypeError(`invalid kind '${kind}'`);\n        }\n        else if (this.listenerCount('connect') === 0 && this._connectionState === 'new') {\n            throw new TypeError('no \"connect\" listener set into this transport');\n        }\n        else if (appData && typeof appData !== 'object') {\n            throw new TypeError('if given, appData must be an object');\n        }\n        // Ensure the device can consume it.\n        const canConsume = ortc.canReceive(rtpParameters, this._extendedRtpCapabilities);\n        if (!canConsume) {\n            throw new errors_1.UnsupportedError('cannot consume this Producer');\n        }\n        const consumerCreationTask = new ConsumerCreationTask({\n            id,\n            producerId,\n            kind,\n            rtpParameters,\n            streamId,\n            appData\n        });\n        // Store the Consumer creation task.\n        this._pendingConsumerTasks.push(consumerCreationTask);\n        // There is no Consumer creation in progress, create it now.\n        (0, queue_microtask_1.default)(() => {\n            if (this._closed) {\n                throw new errors_1.InvalidStateError('closed');\n            }\n            if (this._consumerCreationInProgress === false) {\n                this.createPendingConsumers();\n            }\n        });\n        return consumerCreationTask.promise;\n    }\n    /**\n     * Create a DataProducer\n     */\n    async produceData({ ordered = true, maxPacketLifeTime, maxRetransmits, label = '', protocol = '', appData = {} } = {}) {\n        logger.debug('produceData()');\n        if (this._closed) {\n            throw new errors_1.InvalidStateError('closed');\n        }\n        else if (this._direction !== 'send') {\n            throw new errors_1.UnsupportedError('not a sending Transport');\n        }\n        else if (!this._maxSctpMessageSize) {\n            throw new errors_1.UnsupportedError('SCTP not enabled by remote Transport');\n        }\n        else if (this.listenerCount('connect') === 0 && this._connectionState === 'new') {\n            throw new TypeError('no \"connect\" listener set into this transport');\n        }\n        else if (this.listenerCount('producedata') === 0) {\n            throw new TypeError('no \"producedata\" listener set into this transport');\n        }\n        else if (appData && typeof appData !== 'object') {\n            throw new TypeError('if given, appData must be an object');\n        }\n        if (maxPacketLifeTime || maxRetransmits) {\n            ordered = false;\n        }\n        // Enqueue command.\n        return this._awaitQueue.push(async () => {\n            const { dataChannel, sctpStreamParameters } = await this._handler.sendDataChannel({\n                ordered,\n                maxPacketLifeTime,\n                maxRetransmits,\n                label,\n                protocol\n            });\n            // This will fill sctpStreamParameters's missing fields with default values.\n            ortc.validateSctpStreamParameters(sctpStreamParameters);\n            const { id } = await new Promise((resolve, reject) => {\n                this.safeEmit('producedata', {\n                    sctpStreamParameters,\n                    label,\n                    protocol,\n                    appData\n                }, resolve, reject);\n            });\n            const dataProducer = new DataProducer_1.DataProducer({ id, dataChannel, sctpStreamParameters, appData });\n            this._dataProducers.set(dataProducer.id, dataProducer);\n            this.handleDataProducer(dataProducer);\n            // Emit observer event.\n            this._observer.safeEmit('newdataproducer', dataProducer);\n            return dataProducer;\n        }, 'transport.produceData()');\n    }\n    /**\n     * Create a DataConsumer\n     */\n    async consumeData({ id, dataProducerId, sctpStreamParameters, label = '', protocol = '', appData = {} }) {\n        logger.debug('consumeData()');\n        sctpStreamParameters = utils.clone(sctpStreamParameters, undefined);\n        if (this._closed) {\n            throw new errors_1.InvalidStateError('closed');\n        }\n        else if (this._direction !== 'recv') {\n            throw new errors_1.UnsupportedError('not a receiving Transport');\n        }\n        else if (!this._maxSctpMessageSize) {\n            throw new errors_1.UnsupportedError('SCTP not enabled by remote Transport');\n        }\n        else if (typeof id !== 'string') {\n            throw new TypeError('missing id');\n        }\n        else if (typeof dataProducerId !== 'string') {\n            throw new TypeError('missing dataProducerId');\n        }\n        else if (this.listenerCount('connect') === 0 && this._connectionState === 'new') {\n            throw new TypeError('no \"connect\" listener set into this transport');\n        }\n        else if (appData && typeof appData !== 'object') {\n            throw new TypeError('if given, appData must be an object');\n        }\n        // This may throw.\n        ortc.validateSctpStreamParameters(sctpStreamParameters);\n        // Enqueue command.\n        return this._awaitQueue.push(async () => {\n            const { dataChannel } = await this._handler.receiveDataChannel({\n                sctpStreamParameters,\n                label,\n                protocol\n            });\n            const dataConsumer = new DataConsumer_1.DataConsumer({\n                id,\n                dataProducerId,\n                dataChannel,\n                sctpStreamParameters,\n                appData\n            });\n            this._dataConsumers.set(dataConsumer.id, dataConsumer);\n            this.handleDataConsumer(dataConsumer);\n            // Emit observer event.\n            this._observer.safeEmit('newdataconsumer', dataConsumer);\n            return dataConsumer;\n        }, 'transport.consumeData()');\n    }\n    // This method is guaranteed to never throw.\n    async createPendingConsumers() {\n        this._consumerCreationInProgress = true;\n        this._awaitQueue.push(async () => {\n            if (this._pendingConsumerTasks.length === 0) {\n                logger.debug('createPendingConsumers() | there is no Consumer to be created');\n                return;\n            }\n            const pendingConsumerTasks = [...this._pendingConsumerTasks];\n            // Clear pending Consumer tasks.\n            this._pendingConsumerTasks = [];\n            // Video Consumer in order to create the probator.\n            let videoConsumerForProbator = undefined;\n            // Fill options list.\n            const optionsList = [];\n            for (const task of pendingConsumerTasks) {\n                const { id, kind, rtpParameters, streamId } = task.consumerOptions;\n                optionsList.push({\n                    trackId: id,\n                    kind: kind,\n                    rtpParameters,\n                    streamId\n                });\n            }\n            try {\n                const results = await this._handler.receive(optionsList);\n                for (let idx = 0; idx < results.length; idx++) {\n                    const task = pendingConsumerTasks[idx];\n                    const result = results[idx];\n                    const { id, producerId, kind, rtpParameters, appData } = task.consumerOptions;\n                    const { localId, rtpReceiver, track } = result;\n                    const consumer = new Consumer_1.Consumer({\n                        id: id,\n                        localId,\n                        producerId: producerId,\n                        rtpReceiver,\n                        track,\n                        rtpParameters,\n                        appData\n                    });\n                    this._consumers.set(consumer.id, consumer);\n                    this.handleConsumer(consumer);\n                    // If this is the first video Consumer and the Consumer for RTP probation\n                    // has not yet been created, it's time to create it.\n                    if (!this._probatorConsumerCreated &&\n                        !videoConsumerForProbator && kind === 'video') {\n                        videoConsumerForProbator = consumer;\n                    }\n                    // Emit observer event.\n                    this._observer.safeEmit('newconsumer', consumer);\n                    task.resolve(consumer);\n                }\n            }\n            catch (error) {\n                for (const task of pendingConsumerTasks) {\n                    task.reject(error);\n                }\n            }\n            // If RTP probation must be handled, do it now.\n            if (videoConsumerForProbator) {\n                try {\n                    const probatorRtpParameters = ortc.generateProbatorRtpParameters(videoConsumerForProbator.rtpParameters);\n                    await this._handler.receive([{\n                            trackId: 'probator',\n                            kind: 'video',\n                            rtpParameters: probatorRtpParameters\n                        }]);\n                    logger.debug('createPendingConsumers() | Consumer for RTP probation created');\n                    this._probatorConsumerCreated = true;\n                }\n                catch (error) {\n                    logger.error('createPendingConsumers() | failed to create Consumer for RTP probation:%o', error);\n                }\n            }\n        }, 'transport.createPendingConsumers()')\n            .then(() => {\n            this._consumerCreationInProgress = false;\n            // There are pending Consumer tasks, enqueue their creation.\n            if (this._pendingConsumerTasks.length > 0) {\n                this.createPendingConsumers();\n            }\n        })\n            // NOTE: We only get here when the await queue is closed.\n            .catch(() => { });\n    }\n    pausePendingConsumers() {\n        this._consumerPauseInProgress = true;\n        this._awaitQueue.push(async () => {\n            if (this._pendingPauseConsumers.size === 0) {\n                logger.debug('pausePendingConsumers() | there is no Consumer to be paused');\n                return;\n            }\n            const pendingPauseConsumers = Array.from(this._pendingPauseConsumers.values());\n            // Clear pending pause Consumer map.\n            this._pendingPauseConsumers.clear();\n            try {\n                const localIds = pendingPauseConsumers\n                    .map((consumer) => consumer.localId);\n                await this._handler.pauseReceiving(localIds);\n            }\n            catch (error) {\n                logger.error('pausePendingConsumers() | failed to pause Consumers:', error);\n            }\n        }, 'transport.pausePendingConsumers')\n            .then(() => {\n            this._consumerPauseInProgress = false;\n            // There are pending Consumers to be paused, do it.\n            if (this._pendingPauseConsumers.size > 0) {\n                this.pausePendingConsumers();\n            }\n        })\n            // NOTE: We only get here when the await queue is closed.\n            .catch(() => { });\n    }\n    resumePendingConsumers() {\n        this._consumerResumeInProgress = true;\n        this._awaitQueue.push(async () => {\n            if (this._pendingResumeConsumers.size === 0) {\n                logger.debug('resumePendingConsumers() | there is no Consumer to be resumed');\n                return;\n            }\n            const pendingResumeConsumers = Array.from(this._pendingResumeConsumers.values());\n            // Clear pending resume Consumer map.\n            this._pendingResumeConsumers.clear();\n            try {\n                const localIds = pendingResumeConsumers\n                    .map((consumer) => consumer.localId);\n                await this._handler.resumeReceiving(localIds);\n            }\n            catch (error) {\n                logger.error('resumePendingConsumers() | failed to resume Consumers:', error);\n            }\n        }, 'transport.resumePendingConsumers')\n            .then(() => {\n            this._consumerResumeInProgress = false;\n            // There are pending Consumer to be resumed, do it.\n            if (this._pendingResumeConsumers.size > 0) {\n                this.resumePendingConsumers();\n            }\n        })\n            // NOTE: We only get here when the await queue is closed.\n            .catch(() => { });\n    }\n    closePendingConsumers() {\n        this._consumerCloseInProgress = true;\n        this._awaitQueue.push(async () => {\n            if (this._pendingCloseConsumers.size === 0) {\n                logger.debug('closePendingConsumers() | there is no Consumer to be closed');\n                return;\n            }\n            const pendingCloseConsumers = Array.from(this._pendingCloseConsumers.values());\n            // Clear pending close Consumer map.\n            this._pendingCloseConsumers.clear();\n            try {\n                await this._handler.stopReceiving(pendingCloseConsumers.map((consumer) => consumer.localId));\n            }\n            catch (error) {\n                logger.error('closePendingConsumers() | failed to close Consumers:', error);\n            }\n        }, 'transport.closePendingConsumers')\n            .then(() => {\n            this._consumerCloseInProgress = false;\n            // There are pending Consumer to be resumed, do it.\n            if (this._pendingCloseConsumers.size > 0) {\n                this.closePendingConsumers();\n            }\n        })\n            // NOTE: We only get here when the await queue is closed.\n            .catch(() => { });\n    }\n    handleHandler() {\n        const handler = this._handler;\n        handler.on('@connect', ({ dtlsParameters }, callback, errback) => {\n            if (this._closed) {\n                errback(new errors_1.InvalidStateError('closed'));\n                return;\n            }\n            this.safeEmit('connect', { dtlsParameters }, callback, errback);\n        });\n        handler.on('@connectionstatechange', (connectionState) => {\n            if (connectionState === this._connectionState) {\n                return;\n            }\n            logger.debug('connection state changed to %s', connectionState);\n            this._connectionState = connectionState;\n            if (!this._closed) {\n                this.safeEmit('connectionstatechange', connectionState);\n            }\n        });\n    }\n    handleProducer(producer) {\n        producer.on('@close', () => {\n            this._producers.delete(producer.id);\n            if (this._closed) {\n                return;\n            }\n            this._awaitQueue.push(async () => this._handler.stopSending(producer.localId), 'producer @close event')\n                .catch((error) => logger.warn('producer.close() failed:%o', error));\n        });\n        producer.on('@pause', (callback, errback) => {\n            this._awaitQueue.push(async () => this._handler.pauseSending(producer.localId), 'producer @pause event')\n                .then(callback)\n                .catch(errback);\n        });\n        producer.on('@resume', (callback, errback) => {\n            this._awaitQueue.push(async () => this._handler.resumeSending(producer.localId), 'producer @resume event')\n                .then(callback)\n                .catch(errback);\n        });\n        producer.on('@replacetrack', (track, callback, errback) => {\n            this._awaitQueue.push(async () => this._handler.replaceTrack(producer.localId, track), 'producer @replacetrack event')\n                .then(callback)\n                .catch(errback);\n        });\n        producer.on('@setmaxspatiallayer', (spatialLayer, callback, errback) => {\n            this._awaitQueue.push(async () => (this._handler.setMaxSpatialLayer(producer.localId, spatialLayer)), 'producer @setmaxspatiallayer event')\n                .then(callback)\n                .catch(errback);\n        });\n        producer.on('@setrtpencodingparameters', (params, callback, errback) => {\n            this._awaitQueue.push(async () => (this._handler.setRtpEncodingParameters(producer.localId, params)), 'producer @setrtpencodingparameters event')\n                .then(callback)\n                .catch(errback);\n        });\n        producer.on('@getstats', (callback, errback) => {\n            if (this._closed) {\n                return errback(new errors_1.InvalidStateError('closed'));\n            }\n            this._handler.getSenderStats(producer.localId)\n                .then(callback)\n                .catch(errback);\n        });\n    }\n    handleConsumer(consumer) {\n        consumer.on('@close', () => {\n            this._consumers.delete(consumer.id);\n            this._pendingPauseConsumers.delete(consumer.id);\n            this._pendingResumeConsumers.delete(consumer.id);\n            if (this._closed) {\n                return;\n            }\n            // Store the Consumer into the close list.\n            this._pendingCloseConsumers.set(consumer.id, consumer);\n            // There is no Consumer close in progress, do it now.\n            if (this._consumerCloseInProgress === false) {\n                this.closePendingConsumers();\n            }\n        });\n        consumer.on('@pause', () => {\n            // If Consumer is pending to be resumed, remove from pending resume list.\n            if (this._pendingResumeConsumers.has(consumer.id)) {\n                this._pendingResumeConsumers.delete(consumer.id);\n            }\n            // Store the Consumer into the pending list.\n            this._pendingPauseConsumers.set(consumer.id, consumer);\n            // There is no Consumer pause in progress, do it now.\n            (0, queue_microtask_1.default)(() => {\n                if (this._closed) {\n                    return;\n                }\n                if (this._consumerPauseInProgress === false) {\n                    this.pausePendingConsumers();\n                }\n            });\n        });\n        consumer.on('@resume', () => {\n            // If Consumer is pending to be paused, remove from pending pause list.\n            if (this._pendingPauseConsumers.has(consumer.id)) {\n                this._pendingPauseConsumers.delete(consumer.id);\n            }\n            // Store the Consumer into the pending list.\n            this._pendingResumeConsumers.set(consumer.id, consumer);\n            // There is no Consumer resume in progress, do it now.\n            (0, queue_microtask_1.default)(() => {\n                if (this._closed) {\n                    return;\n                }\n                if (this._consumerResumeInProgress === false) {\n                    this.resumePendingConsumers();\n                }\n            });\n        });\n        consumer.on('@getstats', (callback, errback) => {\n            if (this._closed) {\n                return errback(new errors_1.InvalidStateError('closed'));\n            }\n            this._handler.getReceiverStats(consumer.localId)\n                .then(callback)\n                .catch(errback);\n        });\n    }\n    handleDataProducer(dataProducer) {\n        dataProducer.on('@close', () => {\n            this._dataProducers.delete(dataProducer.id);\n        });\n    }\n    handleDataConsumer(dataConsumer) {\n        dataConsumer.on('@close', () => {\n            this._dataConsumers.delete(dataConsumer.id);\n        });\n    }\n}\nexports.Transport = Transport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}