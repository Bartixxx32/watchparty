{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteSdp = void 0;\n\nvar sdpTransform = __importStar(require(\"sdp-transform\"));\n\nvar Logger_1 = require(\"../../Logger\");\n\nvar MediaSection_1 = require(\"./MediaSection\");\n\nvar logger = new Logger_1.Logger('RemoteSdp');\n\nvar RemoteSdp = /*#__PURE__*/function () {\n  function RemoteSdp(_ref) {\n    var iceParameters = _ref.iceParameters,\n        iceCandidates = _ref.iceCandidates,\n        dtlsParameters = _ref.dtlsParameters,\n        sctpParameters = _ref.sctpParameters,\n        plainRtpParameters = _ref.plainRtpParameters,\n        _ref$planB = _ref.planB,\n        planB = _ref$planB === void 0 ? false : _ref$planB;\n\n    _classCallCheck(this, RemoteSdp);\n\n    // MediaSection instances with same order as in the SDP.\n    this._mediaSections = []; // MediaSection indices indexed by MID.\n\n    this._midToIndex = new Map();\n    this._iceParameters = iceParameters;\n    this._iceCandidates = iceCandidates;\n    this._dtlsParameters = dtlsParameters;\n    this._sctpParameters = sctpParameters;\n    this._plainRtpParameters = plainRtpParameters;\n    this._planB = planB;\n    this._sdpObject = {\n      version: 0,\n      origin: {\n        address: '0.0.0.0',\n        ipVer: 4,\n        netType: 'IN',\n        sessionId: 10000,\n        sessionVersion: 0,\n        username: 'mediasoup-client'\n      },\n      name: '-',\n      timing: {\n        start: 0,\n        stop: 0\n      },\n      media: []\n    }; // If ICE parameters are given, add ICE-Lite indicator.\n\n    if (iceParameters && iceParameters.iceLite) {\n      this._sdpObject.icelite = 'ice-lite';\n    } // If DTLS parameters are given, assume WebRTC and BUNDLE.\n\n\n    if (dtlsParameters) {\n      this._sdpObject.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n      }; // NOTE: We take the latest fingerprint.\n\n      var numFingerprints = this._dtlsParameters.fingerprints.length;\n      this._sdpObject.fingerprint = {\n        type: dtlsParameters.fingerprints[numFingerprints - 1].algorithm,\n        hash: dtlsParameters.fingerprints[numFingerprints - 1].value\n      };\n      this._sdpObject.groups = [{\n        type: 'BUNDLE',\n        mids: ''\n      }];\n    } // If there are plain RPT parameters, override SDP origin.\n\n\n    if (plainRtpParameters) {\n      this._sdpObject.origin.address = plainRtpParameters.ip;\n      this._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;\n    }\n  }\n\n  _createClass(RemoteSdp, [{\n    key: \"updateIceParameters\",\n    value: function updateIceParameters(iceParameters) {\n      logger.debug('updateIceParameters() [iceParameters:%o]', iceParameters);\n      this._iceParameters = iceParameters;\n      this._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;\n\n      var _iterator = _createForOfIteratorHelper(this._mediaSections),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var mediaSection = _step.value;\n          mediaSection.setIceParameters(iceParameters);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"updateDtlsRole\",\n    value: function updateDtlsRole(role) {\n      logger.debug('updateDtlsRole() [role:%s]', role);\n      this._dtlsParameters.role = role;\n\n      var _iterator2 = _createForOfIteratorHelper(this._mediaSections),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var mediaSection = _step2.value;\n          mediaSection.setDtlsRole(role);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"getNextMediaSectionIdx\",\n    value: function getNextMediaSectionIdx() {\n      // If a closed media section is found, return its index.\n      for (var idx = 0; idx < this._mediaSections.length; ++idx) {\n        var mediaSection = this._mediaSections[idx];\n\n        if (mediaSection.closed) {\n          return {\n            idx: idx,\n            reuseMid: mediaSection.mid\n          };\n        }\n      } // If no closed media section is found, return next one.\n\n\n      return {\n        idx: this._mediaSections.length\n      };\n    }\n  }, {\n    key: \"send\",\n    value: function send(_ref2) {\n      var offerMediaObject = _ref2.offerMediaObject,\n          reuseMid = _ref2.reuseMid,\n          offerRtpParameters = _ref2.offerRtpParameters,\n          answerRtpParameters = _ref2.answerRtpParameters,\n          codecOptions = _ref2.codecOptions,\n          _ref2$extmapAllowMixe = _ref2.extmapAllowMixed,\n          extmapAllowMixed = _ref2$extmapAllowMixe === void 0 ? false : _ref2$extmapAllowMixe;\n      var mediaSection = new MediaSection_1.AnswerMediaSection({\n        iceParameters: this._iceParameters,\n        iceCandidates: this._iceCandidates,\n        dtlsParameters: this._dtlsParameters,\n        plainRtpParameters: this._plainRtpParameters,\n        planB: this._planB,\n        offerMediaObject: offerMediaObject,\n        offerRtpParameters: offerRtpParameters,\n        answerRtpParameters: answerRtpParameters,\n        codecOptions: codecOptions,\n        extmapAllowMixed: extmapAllowMixed\n      }); // Unified-Plan with closed media section replacement.\n\n      if (reuseMid) {\n        this._replaceMediaSection(mediaSection, reuseMid);\n      } // Unified-Plan or Plan-B with different media kind.\n      else if (!this._midToIndex.has(mediaSection.mid)) {\n        this._addMediaSection(mediaSection);\n      } // Plan-B with same media kind.\n      else {\n        this._replaceMediaSection(mediaSection);\n      }\n    }\n  }, {\n    key: \"receive\",\n    value: function receive(_ref3) {\n      var mid = _ref3.mid,\n          kind = _ref3.kind,\n          offerRtpParameters = _ref3.offerRtpParameters,\n          streamId = _ref3.streamId,\n          trackId = _ref3.trackId;\n\n      var idx = this._midToIndex.get(mid);\n\n      var mediaSection;\n\n      if (idx !== undefined) {\n        mediaSection = this._mediaSections[idx];\n      } // Unified-Plan or different media kind.\n\n\n      if (!mediaSection) {\n        mediaSection = new MediaSection_1.OfferMediaSection({\n          iceParameters: this._iceParameters,\n          iceCandidates: this._iceCandidates,\n          dtlsParameters: this._dtlsParameters,\n          plainRtpParameters: this._plainRtpParameters,\n          planB: this._planB,\n          mid: mid,\n          kind: kind,\n          offerRtpParameters: offerRtpParameters,\n          streamId: streamId,\n          trackId: trackId\n        }); // Let's try to recycle a closed media section (if any).\n        // NOTE: Yes, we can recycle a closed m=audio section with a new m=video.\n\n        var oldMediaSection = this._mediaSections.find(function (m) {\n          return m.closed;\n        });\n\n        if (oldMediaSection) {\n          this._replaceMediaSection(mediaSection, oldMediaSection.mid);\n        } else {\n          this._addMediaSection(mediaSection);\n        }\n      } // Plan-B.\n      else {\n        mediaSection.planBReceive({\n          offerRtpParameters: offerRtpParameters,\n          streamId: streamId,\n          trackId: trackId\n        });\n\n        this._replaceMediaSection(mediaSection);\n      }\n    }\n  }, {\n    key: \"pauseMediaSection\",\n    value: function pauseMediaSection(mid) {\n      var mediaSection = this._findMediaSection(mid);\n\n      mediaSection.pause();\n    }\n  }, {\n    key: \"resumeSendingMediaSection\",\n    value: function resumeSendingMediaSection(mid) {\n      var mediaSection = this._findMediaSection(mid);\n\n      mediaSection.resume();\n    }\n  }, {\n    key: \"resumeReceivingMediaSection\",\n    value: function resumeReceivingMediaSection(mid) {\n      var mediaSection = this._findMediaSection(mid);\n\n      mediaSection.resume();\n    }\n  }, {\n    key: \"disableMediaSection\",\n    value: function disableMediaSection(mid) {\n      var mediaSection = this._findMediaSection(mid);\n\n      mediaSection.disable();\n    }\n    /**\n     * Closes media section. Returns true if the given MID corresponds to a m\n     * section that has been indeed closed. False otherwise.\n     *\n     * NOTE: Closing the first m section is a pain since it invalidates the bundled\n     * transport, so instead closing it we just disable it.\n     */\n\n  }, {\n    key: \"closeMediaSection\",\n    value: function closeMediaSection(mid) {\n      var mediaSection = this._findMediaSection(mid); // NOTE: Closing the first m section is a pain since it invalidates the\n      // bundled transport, so let's avoid it.\n\n\n      if (mid === this._firstMid) {\n        logger.debug('closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]', mid);\n        this.disableMediaSection(mid);\n        return false;\n      }\n\n      mediaSection.close(); // Regenerate BUNDLE mids.\n\n      this._regenerateBundleMids();\n\n      return true;\n    }\n  }, {\n    key: \"muxMediaSectionSimulcast\",\n    value: function muxMediaSectionSimulcast(mid, encodings) {\n      var mediaSection = this._findMediaSection(mid);\n\n      mediaSection.muxSimulcastStreams(encodings);\n\n      this._replaceMediaSection(mediaSection);\n    }\n  }, {\n    key: \"planBStopReceiving\",\n    value: function planBStopReceiving(_ref4) {\n      var mid = _ref4.mid,\n          offerRtpParameters = _ref4.offerRtpParameters;\n\n      var mediaSection = this._findMediaSection(mid);\n\n      mediaSection.planBStopReceiving({\n        offerRtpParameters: offerRtpParameters\n      });\n\n      this._replaceMediaSection(mediaSection);\n    }\n  }, {\n    key: \"sendSctpAssociation\",\n    value: function sendSctpAssociation(_ref5) {\n      var offerMediaObject = _ref5.offerMediaObject;\n      var mediaSection = new MediaSection_1.AnswerMediaSection({\n        iceParameters: this._iceParameters,\n        iceCandidates: this._iceCandidates,\n        dtlsParameters: this._dtlsParameters,\n        sctpParameters: this._sctpParameters,\n        plainRtpParameters: this._plainRtpParameters,\n        offerMediaObject: offerMediaObject\n      });\n\n      this._addMediaSection(mediaSection);\n    }\n  }, {\n    key: \"receiveSctpAssociation\",\n    value: function receiveSctpAssociation() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$oldDataChannelS = _ref6.oldDataChannelSpec,\n          oldDataChannelSpec = _ref6$oldDataChannelS === void 0 ? false : _ref6$oldDataChannelS;\n\n      var mediaSection = new MediaSection_1.OfferMediaSection({\n        iceParameters: this._iceParameters,\n        iceCandidates: this._iceCandidates,\n        dtlsParameters: this._dtlsParameters,\n        sctpParameters: this._sctpParameters,\n        plainRtpParameters: this._plainRtpParameters,\n        mid: 'datachannel',\n        kind: 'application',\n        oldDataChannelSpec: oldDataChannelSpec\n      });\n\n      this._addMediaSection(mediaSection);\n    }\n  }, {\n    key: \"getSdp\",\n    value: function getSdp() {\n      // Increase SDP version.\n      this._sdpObject.origin.sessionVersion++;\n      return sdpTransform.write(this._sdpObject);\n    }\n  }, {\n    key: \"_addMediaSection\",\n    value: function _addMediaSection(newMediaSection) {\n      if (!this._firstMid) {\n        this._firstMid = newMediaSection.mid;\n      } // Add to the vector.\n\n\n      this._mediaSections.push(newMediaSection); // Add to the map.\n\n\n      this._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1); // Add to the SDP object.\n\n\n      this._sdpObject.media.push(newMediaSection.getObject()); // Regenerate BUNDLE mids.\n\n\n      this._regenerateBundleMids();\n    }\n  }, {\n    key: \"_replaceMediaSection\",\n    value: function _replaceMediaSection(newMediaSection, reuseMid) {\n      // Store it in the map.\n      if (typeof reuseMid === 'string') {\n        var idx = this._midToIndex.get(reuseMid);\n\n        if (idx === undefined) {\n          throw new Error(\"no media section found for reuseMid '\".concat(reuseMid, \"'\"));\n        }\n\n        var oldMediaSection = this._mediaSections[idx]; // Replace the index in the vector with the new media section.\n\n        this._mediaSections[idx] = newMediaSection; // Update the map.\n\n        this._midToIndex.delete(oldMediaSection.mid);\n\n        this._midToIndex.set(newMediaSection.mid, idx); // Update the SDP object.\n\n\n        this._sdpObject.media[idx] = newMediaSection.getObject(); // Regenerate BUNDLE mids.\n\n        this._regenerateBundleMids();\n      } else {\n        var _idx = this._midToIndex.get(newMediaSection.mid);\n\n        if (_idx === undefined) {\n          throw new Error(\"no media section found with mid '\".concat(newMediaSection.mid, \"'\"));\n        } // Replace the index in the vector with the new media section.\n\n\n        this._mediaSections[_idx] = newMediaSection; // Update the SDP object.\n\n        this._sdpObject.media[_idx] = newMediaSection.getObject();\n      }\n    }\n  }, {\n    key: \"_findMediaSection\",\n    value: function _findMediaSection(mid) {\n      var idx = this._midToIndex.get(mid);\n\n      if (idx === undefined) {\n        throw new Error(\"no media section found with mid '\".concat(mid, \"'\"));\n      }\n\n      return this._mediaSections[idx];\n    }\n  }, {\n    key: \"_regenerateBundleMids\",\n    value: function _regenerateBundleMids() {\n      if (!this._dtlsParameters) {\n        return;\n      }\n\n      this._sdpObject.groups[0].mids = this._mediaSections.filter(function (mediaSection) {\n        return !mediaSection.closed;\n      }).map(function (mediaSection) {\n        return mediaSection.mid;\n      }).join(' ');\n    }\n  }]);\n\n  return RemoteSdp;\n}();\n\nexports.RemoteSdp = RemoteSdp;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","RemoteSdp","sdpTransform","require","Logger_1","MediaSection_1","logger","Logger","iceParameters","iceCandidates","dtlsParameters","sctpParameters","plainRtpParameters","planB","_mediaSections","_midToIndex","Map","_iceParameters","_iceCandidates","_dtlsParameters","_sctpParameters","_plainRtpParameters","_planB","_sdpObject","version","origin","address","ipVer","netType","sessionId","sessionVersion","username","name","timing","start","stop","media","iceLite","icelite","msidSemantic","semantic","token","numFingerprints","fingerprints","length","fingerprint","type","algorithm","hash","groups","mids","ip","ipVersion","debug","mediaSection","setIceParameters","role","setDtlsRole","idx","closed","reuseMid","mid","offerMediaObject","offerRtpParameters","answerRtpParameters","codecOptions","extmapAllowMixed","AnswerMediaSection","_replaceMediaSection","has","_addMediaSection","kind","streamId","trackId","OfferMediaSection","oldMediaSection","find","planBReceive","_findMediaSection","pause","resume","disable","_firstMid","disableMediaSection","close","_regenerateBundleMids","encodings","muxSimulcastStreams","planBStopReceiving","oldDataChannelSpec","write","newMediaSection","push","set","getObject","Error","delete","filter","map","join"],"sources":["/home/runner/work/watchparty/watchparty/node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoteSdp = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../../Logger\");\nconst MediaSection_1 = require(\"./MediaSection\");\nconst logger = new Logger_1.Logger('RemoteSdp');\nclass RemoteSdp {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false }) {\n        // MediaSection instances with same order as in the SDP.\n        this._mediaSections = [];\n        // MediaSection indices indexed by MID.\n        this._midToIndex = new Map();\n        this._iceParameters = iceParameters;\n        this._iceCandidates = iceCandidates;\n        this._dtlsParameters = dtlsParameters;\n        this._sctpParameters = sctpParameters;\n        this._plainRtpParameters = plainRtpParameters;\n        this._planB = planB;\n        this._sdpObject =\n            {\n                version: 0,\n                origin: {\n                    address: '0.0.0.0',\n                    ipVer: 4,\n                    netType: 'IN',\n                    sessionId: 10000,\n                    sessionVersion: 0,\n                    username: 'mediasoup-client'\n                },\n                name: '-',\n                timing: { start: 0, stop: 0 },\n                media: []\n            };\n        // If ICE parameters are given, add ICE-Lite indicator.\n        if (iceParameters && iceParameters.iceLite) {\n            this._sdpObject.icelite = 'ice-lite';\n        }\n        // If DTLS parameters are given, assume WebRTC and BUNDLE.\n        if (dtlsParameters) {\n            this._sdpObject.msidSemantic = { semantic: 'WMS', token: '*' };\n            // NOTE: We take the latest fingerprint.\n            const numFingerprints = this._dtlsParameters.fingerprints.length;\n            this._sdpObject.fingerprint =\n                {\n                    type: dtlsParameters.fingerprints[numFingerprints - 1].algorithm,\n                    hash: dtlsParameters.fingerprints[numFingerprints - 1].value\n                };\n            this._sdpObject.groups = [{ type: 'BUNDLE', mids: '' }];\n        }\n        // If there are plain RPT parameters, override SDP origin.\n        if (plainRtpParameters) {\n            this._sdpObject.origin.address = plainRtpParameters.ip;\n            this._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;\n        }\n    }\n    updateIceParameters(iceParameters) {\n        logger.debug('updateIceParameters() [iceParameters:%o]', iceParameters);\n        this._iceParameters = iceParameters;\n        this._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;\n        for (const mediaSection of this._mediaSections) {\n            mediaSection.setIceParameters(iceParameters);\n        }\n    }\n    updateDtlsRole(role) {\n        logger.debug('updateDtlsRole() [role:%s]', role);\n        this._dtlsParameters.role = role;\n        for (const mediaSection of this._mediaSections) {\n            mediaSection.setDtlsRole(role);\n        }\n    }\n    getNextMediaSectionIdx() {\n        // If a closed media section is found, return its index.\n        for (let idx = 0; idx < this._mediaSections.length; ++idx) {\n            const mediaSection = this._mediaSections[idx];\n            if (mediaSection.closed) {\n                return { idx, reuseMid: mediaSection.mid };\n            }\n        }\n        // If no closed media section is found, return next one.\n        return { idx: this._mediaSections.length };\n    }\n    send({ offerMediaObject, reuseMid, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {\n        const mediaSection = new MediaSection_1.AnswerMediaSection({\n            iceParameters: this._iceParameters,\n            iceCandidates: this._iceCandidates,\n            dtlsParameters: this._dtlsParameters,\n            plainRtpParameters: this._plainRtpParameters,\n            planB: this._planB,\n            offerMediaObject,\n            offerRtpParameters,\n            answerRtpParameters,\n            codecOptions,\n            extmapAllowMixed\n        });\n        // Unified-Plan with closed media section replacement.\n        if (reuseMid) {\n            this._replaceMediaSection(mediaSection, reuseMid);\n        }\n        // Unified-Plan or Plan-B with different media kind.\n        else if (!this._midToIndex.has(mediaSection.mid)) {\n            this._addMediaSection(mediaSection);\n        }\n        // Plan-B with same media kind.\n        else {\n            this._replaceMediaSection(mediaSection);\n        }\n    }\n    receive({ mid, kind, offerRtpParameters, streamId, trackId }) {\n        const idx = this._midToIndex.get(mid);\n        let mediaSection;\n        if (idx !== undefined) {\n            mediaSection = this._mediaSections[idx];\n        }\n        // Unified-Plan or different media kind.\n        if (!mediaSection) {\n            mediaSection = new MediaSection_1.OfferMediaSection({\n                iceParameters: this._iceParameters,\n                iceCandidates: this._iceCandidates,\n                dtlsParameters: this._dtlsParameters,\n                plainRtpParameters: this._plainRtpParameters,\n                planB: this._planB,\n                mid,\n                kind,\n                offerRtpParameters,\n                streamId,\n                trackId\n            });\n            // Let's try to recycle a closed media section (if any).\n            // NOTE: Yes, we can recycle a closed m=audio section with a new m=video.\n            const oldMediaSection = this._mediaSections.find((m) => (m.closed));\n            if (oldMediaSection) {\n                this._replaceMediaSection(mediaSection, oldMediaSection.mid);\n            }\n            else {\n                this._addMediaSection(mediaSection);\n            }\n        }\n        // Plan-B.\n        else {\n            mediaSection.planBReceive({ offerRtpParameters, streamId, trackId });\n            this._replaceMediaSection(mediaSection);\n        }\n    }\n    pauseMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.pause();\n    }\n    resumeSendingMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.resume();\n    }\n    resumeReceivingMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.resume();\n    }\n    disableMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.disable();\n    }\n    /**\n     * Closes media section. Returns true if the given MID corresponds to a m\n     * section that has been indeed closed. False otherwise.\n     *\n     * NOTE: Closing the first m section is a pain since it invalidates the bundled\n     * transport, so instead closing it we just disable it.\n     */\n    closeMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        // NOTE: Closing the first m section is a pain since it invalidates the\n        // bundled transport, so let's avoid it.\n        if (mid === this._firstMid) {\n            logger.debug('closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]', mid);\n            this.disableMediaSection(mid);\n            return false;\n        }\n        mediaSection.close();\n        // Regenerate BUNDLE mids.\n        this._regenerateBundleMids();\n        return true;\n    }\n    muxMediaSectionSimulcast(mid, encodings) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.muxSimulcastStreams(encodings);\n        this._replaceMediaSection(mediaSection);\n    }\n    planBStopReceiving({ mid, offerRtpParameters }) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.planBStopReceiving({ offerRtpParameters });\n        this._replaceMediaSection(mediaSection);\n    }\n    sendSctpAssociation({ offerMediaObject }) {\n        const mediaSection = new MediaSection_1.AnswerMediaSection({\n            iceParameters: this._iceParameters,\n            iceCandidates: this._iceCandidates,\n            dtlsParameters: this._dtlsParameters,\n            sctpParameters: this._sctpParameters,\n            plainRtpParameters: this._plainRtpParameters,\n            offerMediaObject\n        });\n        this._addMediaSection(mediaSection);\n    }\n    receiveSctpAssociation({ oldDataChannelSpec = false } = {}) {\n        const mediaSection = new MediaSection_1.OfferMediaSection({\n            iceParameters: this._iceParameters,\n            iceCandidates: this._iceCandidates,\n            dtlsParameters: this._dtlsParameters,\n            sctpParameters: this._sctpParameters,\n            plainRtpParameters: this._plainRtpParameters,\n            mid: 'datachannel',\n            kind: 'application',\n            oldDataChannelSpec\n        });\n        this._addMediaSection(mediaSection);\n    }\n    getSdp() {\n        // Increase SDP version.\n        this._sdpObject.origin.sessionVersion++;\n        return sdpTransform.write(this._sdpObject);\n    }\n    _addMediaSection(newMediaSection) {\n        if (!this._firstMid) {\n            this._firstMid = newMediaSection.mid;\n        }\n        // Add to the vector.\n        this._mediaSections.push(newMediaSection);\n        // Add to the map.\n        this._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1);\n        // Add to the SDP object.\n        this._sdpObject.media.push(newMediaSection.getObject());\n        // Regenerate BUNDLE mids.\n        this._regenerateBundleMids();\n    }\n    _replaceMediaSection(newMediaSection, reuseMid) {\n        // Store it in the map.\n        if (typeof reuseMid === 'string') {\n            const idx = this._midToIndex.get(reuseMid);\n            if (idx === undefined) {\n                throw new Error(`no media section found for reuseMid '${reuseMid}'`);\n            }\n            const oldMediaSection = this._mediaSections[idx];\n            // Replace the index in the vector with the new media section.\n            this._mediaSections[idx] = newMediaSection;\n            // Update the map.\n            this._midToIndex.delete(oldMediaSection.mid);\n            this._midToIndex.set(newMediaSection.mid, idx);\n            // Update the SDP object.\n            this._sdpObject.media[idx] = newMediaSection.getObject();\n            // Regenerate BUNDLE mids.\n            this._regenerateBundleMids();\n        }\n        else {\n            const idx = this._midToIndex.get(newMediaSection.mid);\n            if (idx === undefined) {\n                throw new Error(`no media section found with mid '${newMediaSection.mid}'`);\n            }\n            // Replace the index in the vector with the new media section.\n            this._mediaSections[idx] = newMediaSection;\n            // Update the SDP object.\n            this._sdpObject.media[idx] = newMediaSection.getObject();\n        }\n    }\n    _findMediaSection(mid) {\n        const idx = this._midToIndex.get(mid);\n        if (idx === undefined) {\n            throw new Error(`no media section found with mid '${mid}'`);\n        }\n        return this._mediaSections[idx];\n    }\n    _regenerateBundleMids() {\n        if (!this._dtlsParameters) {\n            return;\n        }\n        this._sdpObject.groups[0].mids = this._mediaSections\n            .filter((mediaSection) => !mediaSection.closed)\n            .map((mediaSection) => mediaSection.mid)\n            .join(' ');\n    }\n}\nexports.RemoteSdp = RemoteSdp;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}