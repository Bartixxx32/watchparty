{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _objectSpread = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _regeneratorRuntime = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReactNative = void 0;\n\nvar sdpTransform = __importStar(require(\"sdp-transform\"));\n\nvar Logger_1 = require(\"../Logger\");\n\nvar errors_1 = require(\"../errors\");\n\nvar utils = __importStar(require(\"../utils\"));\n\nvar ortc = __importStar(require(\"../ortc\"));\n\nvar sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\n\nvar sdpPlanBUtils = __importStar(require(\"./sdp/planBUtils\"));\n\nvar HandlerInterface_1 = require(\"./HandlerInterface\");\n\nvar RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\n\nvar logger = new Logger_1.Logger('ReactNative');\nvar SCTP_NUM_STREAMS = {\n  OS: 1024,\n  MIS: 1024\n};\n\nvar ReactNative = /*#__PURE__*/function (_HandlerInterface_1$H) {\n  _inherits(ReactNative, _HandlerInterface_1$H);\n\n  var _super = _createSuper(ReactNative);\n\n  function ReactNative() {\n    var _this;\n\n    _classCallCheck(this, ReactNative);\n\n    _this = _super.call(this); // Local stream for sending.\n\n    _this._sendStream = new MediaStream(); // Map of sending MediaStreamTracks indexed by localId.\n\n    _this._mapSendLocalIdTrack = new Map(); // Next sending localId.\n\n    _this._nextSendLocalId = 0; // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.\n    // Value is an Object with mid, rtpParameters and rtpReceiver.\n\n    _this._mapRecvLocalIdInfo = new Map(); // Whether a DataChannel m=application section has been created.\n\n    _this._hasDataChannelMediaSection = false; // Sending DataChannel id value counter. Incremented for each new DataChannel.\n\n    _this._nextSendSctpStreamId = 0; // Got transport local and remote parameters.\n\n    _this._transportReady = false;\n    return _this;\n  }\n\n  _createClass(ReactNative, [{\n    key: \"name\",\n    get: function get() {\n      return 'ReactNative';\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      logger.debug('close()'); // Free/dispose native MediaStream but DO NOT free/dispose native\n      // MediaStreamTracks (that is parent's business).\n      // @ts-ignore (proprietary API in react-native-webrtc).\n\n      this._sendStream.release(\n      /* releaseTracks */\n      false); // Close RTCPeerConnection.\n\n\n      if (this._pc) {\n        try {\n          this._pc.close();\n        } catch (error) {}\n      }\n\n      this.emit('@close');\n    }\n  }, {\n    key: \"getNativeRtpCapabilities\",\n    value: function () {\n      var _getNativeRtpCapabilities = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var pc, offer, sdpObject, nativeRtpCapabilities;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                logger.debug('getNativeRtpCapabilities()');\n                pc = new RTCPeerConnection({\n                  iceServers: [],\n                  iceTransportPolicy: 'all',\n                  bundlePolicy: 'max-bundle',\n                  rtcpMuxPolicy: 'require',\n                  sdpSemantics: 'plan-b'\n                });\n                _context.prev = 2;\n                _context.next = 5;\n                return pc.createOffer({\n                  offerToReceiveAudio: true,\n                  offerToReceiveVideo: true\n                });\n\n              case 5:\n                offer = _context.sent;\n\n                try {\n                  pc.close();\n                } catch (error) {}\n\n                sdpObject = sdpTransform.parse(offer.sdp);\n                nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\n                  sdpObject: sdpObject\n                });\n                return _context.abrupt(\"return\", nativeRtpCapabilities);\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](2);\n\n                try {\n                  pc.close();\n                } catch (error2) {}\n\n                throw _context.t0;\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 12]]);\n      }));\n\n      function getNativeRtpCapabilities() {\n        return _getNativeRtpCapabilities.apply(this, arguments);\n      }\n\n      return getNativeRtpCapabilities;\n    }()\n  }, {\n    key: \"getNativeSctpCapabilities\",\n    value: function () {\n      var _getNativeSctpCapabilities = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                logger.debug('getNativeSctpCapabilities()');\n                return _context2.abrupt(\"return\", {\n                  numStreams: SCTP_NUM_STREAMS\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getNativeSctpCapabilities() {\n        return _getNativeSctpCapabilities.apply(this, arguments);\n      }\n\n      return getNativeSctpCapabilities;\n    }()\n  }, {\n    key: \"run\",\n    value: function run(_ref) {\n      var _this2 = this;\n\n      var direction = _ref.direction,\n          iceParameters = _ref.iceParameters,\n          iceCandidates = _ref.iceCandidates,\n          dtlsParameters = _ref.dtlsParameters,\n          sctpParameters = _ref.sctpParameters,\n          iceServers = _ref.iceServers,\n          iceTransportPolicy = _ref.iceTransportPolicy,\n          additionalSettings = _ref.additionalSettings,\n          proprietaryConstraints = _ref.proprietaryConstraints,\n          extendedRtpCapabilities = _ref.extendedRtpCapabilities;\n      logger.debug('run()');\n      this._direction = direction;\n      this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n        iceParameters: iceParameters,\n        iceCandidates: iceCandidates,\n        dtlsParameters: dtlsParameters,\n        sctpParameters: sctpParameters,\n        planB: true\n      });\n      this._sendingRtpParametersByKind = {\n        audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n        video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n      };\n      this._sendingRemoteRtpParametersByKind = {\n        audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n        video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n      };\n\n      if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n        this._forcedLocalDtlsRole = dtlsParameters.role === 'server' ? 'client' : 'server';\n      }\n\n      this._pc = new RTCPeerConnection(_objectSpread({\n        iceServers: iceServers || [],\n        iceTransportPolicy: iceTransportPolicy || 'all',\n        bundlePolicy: 'max-bundle',\n        rtcpMuxPolicy: 'require',\n        sdpSemantics: 'plan-b'\n      }, additionalSettings), proprietaryConstraints);\n\n      if (this._pc.connectionState) {\n        this._pc.addEventListener('connectionstatechange', function () {\n          _this2.emit('@connectionstatechange', _this2._pc.connectionState);\n        });\n      } else {\n        this._pc.addEventListener('iceconnectionstatechange', function () {\n          logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n\n          switch (_this2._pc.iceConnectionState) {\n            case 'checking':\n              _this2.emit('@connectionstatechange', 'connecting');\n\n              break;\n\n            case 'connected':\n            case 'completed':\n              _this2.emit('@connectionstatechange', 'connected');\n\n              break;\n\n            case 'failed':\n              _this2.emit('@connectionstatechange', 'failed');\n\n              break;\n\n            case 'disconnected':\n              _this2.emit('@connectionstatechange', 'disconnected');\n\n              break;\n\n            case 'closed':\n              _this2.emit('@connectionstatechange', 'closed');\n\n              break;\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateIceServers\",\n    value: function () {\n      var _updateIceServers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(iceServers) {\n        var configuration;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                logger.debug('updateIceServers()');\n                configuration = this._pc.getConfiguration();\n                configuration.iceServers = iceServers;\n\n                this._pc.setConfiguration(configuration);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateIceServers(_x) {\n        return _updateIceServers.apply(this, arguments);\n      }\n\n      return updateIceServers;\n    }()\n  }, {\n    key: \"restartIce\",\n    value: function () {\n      var _restartIce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(iceParameters) {\n        var offer, answer, _offer, _answer;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                logger.debug('restartIce()'); // Provide the remote SDP handler with new remote ICE parameters.\n\n                this._remoteSdp.updateIceParameters(iceParameters);\n\n                if (this._transportReady) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 4:\n                if (!(this._direction === 'send')) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                _context4.next = 7;\n                return this._pc.createOffer({\n                  iceRestart: true\n                });\n\n              case 7:\n                offer = _context4.sent;\n                logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context4.next = 11;\n                return this._pc.setLocalDescription(offer);\n\n              case 11:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context4.next = 15;\n                return this._pc.setRemoteDescription(answer);\n\n              case 15:\n                _context4.next = 27;\n                break;\n\n              case 17:\n                _offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', _offer);\n                _context4.next = 21;\n                return this._pc.setRemoteDescription(_offer);\n\n              case 21:\n                _context4.next = 23;\n                return this._pc.createAnswer();\n\n              case 23:\n                _answer = _context4.sent;\n                logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', _answer);\n                _context4.next = 27;\n                return this._pc.setLocalDescription(_answer);\n\n              case 27:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function restartIce(_x2) {\n        return _restartIce.apply(this, arguments);\n      }\n\n      return restartIce;\n    }()\n  }, {\n    key: \"getTransportStats\",\n    value: function () {\n      var _getTransportStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this._pc.getStats());\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getTransportStats() {\n        return _getTransportStats.apply(this, arguments);\n      }\n\n      return getTransportStats;\n    }()\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref2) {\n        var track, encodings, codecOptions, codec, _a, offer, localSdpObject, offerMediaObject, sendingRtpParameters, sendingRemoteRtpParameters, idx, _iterator, _step, encoding, answer, localId;\n\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                track = _ref2.track, encodings = _ref2.encodings, codecOptions = _ref2.codecOptions, codec = _ref2.codec;\n                this.assertSendDirection();\n                logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n                if (codec) {\n                  logger.warn('send() | codec selection is not available in %s handler', this.name);\n                }\n\n                this._sendStream.addTrack(track);\n\n                this._pc.addStream(this._sendStream);\n\n                _context6.next = 8;\n                return this._pc.createOffer();\n\n              case 8:\n                offer = _context6.sent;\n                localSdpObject = sdpTransform.parse(offer.sdp);\n                sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n                sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs);\n                sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n                sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);\n\n                if (this._transportReady) {\n                  _context6.next = 17;\n                  break;\n                }\n\n                _context6.next = 17;\n                return this.setupTransport({\n                  localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                  localSdpObject: localSdpObject\n                });\n\n              case 17:\n                if (track.kind === 'video' && encodings && encodings.length > 1) {\n                  logger.debug('send() | enabling simulcast');\n                  localSdpObject = sdpTransform.parse(offer.sdp);\n                  offerMediaObject = localSdpObject.media.find(function (m) {\n                    return m.type === 'video';\n                  });\n                  sdpPlanBUtils.addLegacySimulcast({\n                    offerMediaObject: offerMediaObject,\n                    track: track,\n                    numStreams: encodings.length\n                  });\n                  offer = {\n                    type: 'offer',\n                    sdp: sdpTransform.write(localSdpObject)\n                  };\n                }\n\n                logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context6.next = 21;\n                return this._pc.setLocalDescription(offer);\n\n              case 21:\n                localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n                offerMediaObject = localSdpObject.media.find(function (m) {\n                  return m.type === track.kind;\n                }); // Set RTCP CNAME.\n\n                sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n                  offerMediaObject: offerMediaObject\n                }); // Set RTP encodings.\n\n                sendingRtpParameters.encodings = sdpPlanBUtils.getRtpEncodings({\n                  offerMediaObject: offerMediaObject,\n                  track: track\n                }); // Complete encodings with given values.\n\n                if (encodings) {\n                  for (idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n                    if (encodings[idx]) {\n                      Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n                    }\n                  }\n                } // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n                // each encoding.\n\n\n                if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n                  _iterator = _createForOfIteratorHelper(sendingRtpParameters.encodings);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      encoding = _step.value;\n                      encoding.scalabilityMode = 'L1T3';\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n                }\n\n                this._remoteSdp.send({\n                  offerMediaObject: offerMediaObject,\n                  offerRtpParameters: sendingRtpParameters,\n                  answerRtpParameters: sendingRemoteRtpParameters,\n                  codecOptions: codecOptions\n                });\n\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context6.next = 32;\n                return this._pc.setRemoteDescription(answer);\n\n              case 32:\n                localId = String(this._nextSendLocalId);\n                this._nextSendLocalId++; // Insert into the map.\n\n                this._mapSendLocalIdTrack.set(localId, track);\n\n                return _context6.abrupt(\"return\", {\n                  localId: localId,\n                  rtpParameters: sendingRtpParameters\n                });\n\n              case 36:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function send(_x3) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n  }, {\n    key: \"stopSending\",\n    value: function () {\n      var _stopSending = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(localId) {\n        var track, offer, answer;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this.assertSendDirection();\n                logger.debug('stopSending() [localId:%s]', localId);\n                track = this._mapSendLocalIdTrack.get(localId);\n\n                if (track) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                throw new Error('track not found');\n\n              case 5:\n                this._mapSendLocalIdTrack.delete(localId);\n\n                this._sendStream.removeTrack(track);\n\n                this._pc.addStream(this._sendStream);\n\n                _context7.next = 10;\n                return this._pc.createOffer();\n\n              case 10:\n                offer = _context7.sent;\n                logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context7.prev = 12;\n                _context7.next = 15;\n                return this._pc.setLocalDescription(offer);\n\n              case 15:\n                _context7.next = 23;\n                break;\n\n              case 17:\n                _context7.prev = 17;\n                _context7.t0 = _context7[\"catch\"](12);\n\n                if (!(this._sendStream.getTracks().length === 0)) {\n                  _context7.next = 22;\n                  break;\n                }\n\n                logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', _context7.t0.toString());\n                return _context7.abrupt(\"return\");\n\n              case 22:\n                throw _context7.t0;\n\n              case 23:\n                if (!(this._pc.signalingState === 'stable')) {\n                  _context7.next = 25;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\");\n\n              case 25:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context7.next = 29;\n                return this._pc.setRemoteDescription(answer);\n\n              case 29:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[12, 17]]);\n      }));\n\n      function stopSending(_x4) {\n        return _stopSending.apply(this, arguments);\n      }\n\n      return stopSending;\n    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"pauseSending\",\n    value: function () {\n      var _pauseSending = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(localId) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function pauseSending(_x5) {\n        return _pauseSending.apply(this, arguments);\n      }\n\n      return pauseSending;\n    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"resumeSending\",\n    value: function () {\n      var _resumeSending = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(localId) {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function resumeSending(_x6) {\n        return _resumeSending.apply(this, arguments);\n      }\n\n      return resumeSending;\n    }()\n  }, {\n    key: \"replaceTrack\",\n    value: function () {\n      var _replaceTrack = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      localId, track) {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                throw new errors_1.UnsupportedError('not implemented');\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      function replaceTrack(_x7, _x8) {\n        return _replaceTrack.apply(this, arguments);\n      }\n\n      return replaceTrack;\n    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"setMaxSpatialLayer\",\n    value: function () {\n      var _setMaxSpatialLayer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(localId, spatialLayer) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                throw new errors_1.UnsupportedError('not implemented');\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n\n      function setMaxSpatialLayer(_x9, _x10) {\n        return _setMaxSpatialLayer.apply(this, arguments);\n      }\n\n      return setMaxSpatialLayer;\n    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"setRtpEncodingParameters\",\n    value: function () {\n      var _setRtpEncodingParameters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(localId, params) {\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                throw new errors_1.UnsupportedError('not implemented');\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }));\n\n      function setRtpEncodingParameters(_x11, _x12) {\n        return _setRtpEncodingParameters.apply(this, arguments);\n      }\n\n      return setRtpEncodingParameters;\n    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"getSenderStats\",\n    value: function () {\n      var _getSenderStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(localId) {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                throw new errors_1.UnsupportedError('not implemented');\n\n              case 1:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13);\n      }));\n\n      function getSenderStats(_x13) {\n        return _getSenderStats.apply(this, arguments);\n      }\n\n      return getSenderStats;\n    }()\n  }, {\n    key: \"sendDataChannel\",\n    value: function () {\n      var _sendDataChannel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(_ref3) {\n        var ordered, maxPacketLifeTime, maxRetransmits, label, protocol, _a, options, dataChannel, offer, localSdpObject, offerMediaObject, answer, sctpStreamParameters;\n\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                ordered = _ref3.ordered, maxPacketLifeTime = _ref3.maxPacketLifeTime, maxRetransmits = _ref3.maxRetransmits, label = _ref3.label, protocol = _ref3.protocol;\n                this.assertSendDirection();\n                options = {\n                  negotiated: true,\n                  id: this._nextSendSctpStreamId,\n                  ordered: ordered,\n                  maxPacketLifeTime: maxPacketLifeTime,\n                  maxRetransmitTime: maxPacketLifeTime,\n                  maxRetransmits: maxRetransmits,\n                  protocol: protocol\n                };\n                logger.debug('sendDataChannel() [options:%o]', options);\n                dataChannel = this._pc.createDataChannel(label, options); // Increase next id.\n\n                this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS; // If this is the first DataChannel we need to create the SDP answer with\n                // m=application section.\n\n                if (this._hasDataChannelMediaSection) {\n                  _context14.next = 24;\n                  break;\n                }\n\n                _context14.next = 9;\n                return this._pc.createOffer();\n\n              case 9:\n                offer = _context14.sent;\n                localSdpObject = sdpTransform.parse(offer.sdp);\n                offerMediaObject = localSdpObject.media.find(function (m) {\n                  return m.type === 'application';\n                });\n\n                if (this._transportReady) {\n                  _context14.next = 15;\n                  break;\n                }\n\n                _context14.next = 15;\n                return this.setupTransport({\n                  localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                  localSdpObject: localSdpObject\n                });\n\n              case 15:\n                logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context14.next = 18;\n                return this._pc.setLocalDescription(offer);\n\n              case 18:\n                this._remoteSdp.sendSctpAssociation({\n                  offerMediaObject: offerMediaObject\n                });\n\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context14.next = 23;\n                return this._pc.setRemoteDescription(answer);\n\n              case 23:\n                this._hasDataChannelMediaSection = true;\n\n              case 24:\n                sctpStreamParameters = {\n                  streamId: options.id,\n                  ordered: options.ordered,\n                  maxPacketLifeTime: options.maxPacketLifeTime,\n                  maxRetransmits: options.maxRetransmits\n                };\n                return _context14.abrupt(\"return\", {\n                  dataChannel: dataChannel,\n                  sctpStreamParameters: sctpStreamParameters\n                });\n\n              case 26:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function sendDataChannel(_x14) {\n        return _sendDataChannel.apply(this, arguments);\n      }\n\n      return sendDataChannel;\n    }()\n  }, {\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(optionsList) {\n        var _this3 = this;\n\n        var _a, results, mapStreamId, _iterator2, _step2, options, trackId, kind, rtpParameters, mid, streamId, offer, answer, localSdpObject, _iterator3, _step3, _loop, _iterator4, _step4, _loop2;\n\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                this.assertRecvDirection();\n                results = [];\n                mapStreamId = new Map();\n                _iterator2 = _createForOfIteratorHelper(optionsList);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    options = _step2.value;\n                    trackId = options.trackId, kind = options.kind, rtpParameters = options.rtpParameters;\n                    logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n                    mid = kind;\n                    streamId = options.streamId || rtpParameters.rtcp.cname; // NOTE: In React-Native we cannot reuse the same remote MediaStream for new\n                    // remote tracks. This is because react-native-webrtc does not react on new\n                    // tracks generated within already existing streams, so force the streamId\n                    // to be different. See:\n                    // https://github.com/react-native-webrtc/react-native-webrtc/issues/401\n\n                    logger.debug('receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc');\n                    streamId += \"-hack-\".concat(utils.generateRandomNumber());\n                    mapStreamId.set(trackId, streamId);\n\n                    this._remoteSdp.receive({\n                      mid: mid,\n                      kind: kind,\n                      offerRtpParameters: rtpParameters,\n                      streamId: streamId,\n                      trackId: trackId\n                    });\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n                _context15.next = 9;\n                return this._pc.setRemoteDescription(offer);\n\n              case 9:\n                _context15.next = 11;\n                return this._pc.createAnswer();\n\n              case 11:\n                answer = _context15.sent;\n                localSdpObject = sdpTransform.parse(answer.sdp);\n                _iterator3 = _createForOfIteratorHelper(optionsList);\n\n                try {\n                  _loop = function _loop() {\n                    var options = _step3.value;\n                    var kind = options.kind,\n                        rtpParameters = options.rtpParameters;\n                    var mid = kind;\n                    var answerMediaObject = localSdpObject.media.find(function (m) {\n                      return String(m.mid) === mid;\n                    }); // May need to modify codec parameters in the answer based on codec\n                    // parameters in the offer.\n\n                    sdpCommonUtils.applyCodecParameters({\n                      offerRtpParameters: rtpParameters,\n                      answerMediaObject: answerMediaObject\n                    });\n                  };\n\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    _loop();\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n\n                answer = {\n                  type: 'answer',\n                  sdp: sdpTransform.write(localSdpObject)\n                };\n\n                if (this._transportReady) {\n                  _context15.next = 19;\n                  break;\n                }\n\n                _context15.next = 19;\n                return this.setupTransport({\n                  localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                  localSdpObject: localSdpObject\n                });\n\n              case 19:\n                logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n                _context15.next = 22;\n                return this._pc.setLocalDescription(answer);\n\n              case 22:\n                _iterator4 = _createForOfIteratorHelper(optionsList);\n\n                try {\n                  _loop2 = function _loop2() {\n                    var options = _step4.value;\n                    var kind = options.kind,\n                        trackId = options.trackId,\n                        rtpParameters = options.rtpParameters;\n                    var localId = trackId;\n                    var mid = kind;\n                    var streamId = mapStreamId.get(trackId);\n\n                    var stream = _this3._pc.getRemoteStreams().find(function (s) {\n                      return s.id === streamId;\n                    });\n\n                    var track = stream.getTrackById(localId);\n\n                    if (!track) {\n                      throw new Error('remote track not found');\n                    } // Insert into the map.\n\n\n                    _this3._mapRecvLocalIdInfo.set(localId, {\n                      mid: mid,\n                      rtpParameters: rtpParameters\n                    });\n\n                    results.push({\n                      localId: localId,\n                      track: track\n                    });\n                  };\n\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    _loop2();\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n\n                return _context15.abrupt(\"return\", results);\n\n              case 25:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function receive(_x15) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }()\n  }, {\n    key: \"stopReceiving\",\n    value: function () {\n      var _stopReceiving = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(localIds) {\n        var _iterator5, _step5, localId, _ref4, mid, rtpParameters, offer, answer;\n\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                this.assertRecvDirection();\n                _iterator5 = _createForOfIteratorHelper(localIds);\n\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    localId = _step5.value;\n                    logger.debug('stopReceiving() [localId:%s]', localId);\n                    _ref4 = this._mapRecvLocalIdInfo.get(localId) || {}, mid = _ref4.mid, rtpParameters = _ref4.rtpParameters; // Remove from the map.\n\n                    this._mapRecvLocalIdInfo.delete(localId);\n\n                    this._remoteSdp.planBStopReceiving({\n                      mid: mid,\n                      offerRtpParameters: rtpParameters\n                    });\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n\n                offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n                _context16.next = 7;\n                return this._pc.setRemoteDescription(offer);\n\n              case 7:\n                _context16.next = 9;\n                return this._pc.createAnswer();\n\n              case 9:\n                answer = _context16.sent;\n                logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n                _context16.next = 13;\n                return this._pc.setLocalDescription(answer);\n\n              case 13:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function stopReceiving(_x16) {\n        return _stopReceiving.apply(this, arguments);\n      }\n\n      return stopReceiving;\n    }()\n  }, {\n    key: \"pauseReceiving\",\n    value: function () {\n      var _pauseReceiving = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      localIds) {\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17);\n      }));\n\n      function pauseReceiving(_x17) {\n        return _pauseReceiving.apply(this, arguments);\n      }\n\n      return pauseReceiving;\n    }()\n  }, {\n    key: \"resumeReceiving\",\n    value: function () {\n      var _resumeReceiving = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      localIds) {\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18);\n      }));\n\n      function resumeReceiving(_x18) {\n        return _resumeReceiving.apply(this, arguments);\n      }\n\n      return resumeReceiving;\n    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"getReceiverStats\",\n    value: function () {\n      var _getReceiverStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(localId) {\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                throw new errors_1.UnsupportedError('not implemented');\n\n              case 1:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19);\n      }));\n\n      function getReceiverStats(_x19) {\n        return _getReceiverStats.apply(this, arguments);\n      }\n\n      return getReceiverStats;\n    }()\n  }, {\n    key: \"receiveDataChannel\",\n    value: function () {\n      var _receiveDataChannel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(_ref5) {\n        var sctpStreamParameters, label, protocol, _a, streamId, ordered, maxPacketLifeTime, maxRetransmits, options, dataChannel, offer, answer, _localSdpObject;\n\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                sctpStreamParameters = _ref5.sctpStreamParameters, label = _ref5.label, protocol = _ref5.protocol;\n                this.assertRecvDirection();\n                streamId = sctpStreamParameters.streamId, ordered = sctpStreamParameters.ordered, maxPacketLifeTime = sctpStreamParameters.maxPacketLifeTime, maxRetransmits = sctpStreamParameters.maxRetransmits;\n                options = {\n                  negotiated: true,\n                  id: streamId,\n                  ordered: ordered,\n                  maxPacketLifeTime: maxPacketLifeTime,\n                  maxRetransmitTime: maxPacketLifeTime,\n                  maxRetransmits: maxRetransmits,\n                  protocol: protocol\n                };\n                logger.debug('receiveDataChannel() [options:%o]', options);\n                dataChannel = this._pc.createDataChannel(label, options); // If this is the first DataChannel we need to create the SDP offer with\n                // m=application section.\n\n                if (this._hasDataChannelMediaSection) {\n                  _context20.next = 23;\n                  break;\n                }\n\n                this._remoteSdp.receiveSctpAssociation({\n                  oldDataChannelSpec: true\n                });\n\n                offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n                _context20.next = 12;\n                return this._pc.setRemoteDescription(offer);\n\n              case 12:\n                _context20.next = 14;\n                return this._pc.createAnswer();\n\n              case 14:\n                answer = _context20.sent;\n\n                if (this._transportReady) {\n                  _context20.next = 19;\n                  break;\n                }\n\n                _localSdpObject = sdpTransform.parse(answer.sdp);\n                _context20.next = 19;\n                return this.setupTransport({\n                  localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                  localSdpObject: _localSdpObject\n                });\n\n              case 19:\n                logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context20.next = 22;\n                return this._pc.setLocalDescription(answer);\n\n              case 22:\n                this._hasDataChannelMediaSection = true;\n\n              case 23:\n                return _context20.abrupt(\"return\", {\n                  dataChannel: dataChannel\n                });\n\n              case 24:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function receiveDataChannel(_x20) {\n        return _receiveDataChannel.apply(this, arguments);\n      }\n\n      return receiveDataChannel;\n    }()\n  }, {\n    key: \"setupTransport\",\n    value: function () {\n      var _setupTransport = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(_ref6) {\n        var _this4 = this;\n\n        var localDtlsRole, localSdpObject, dtlsParameters;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                localDtlsRole = _ref6.localDtlsRole, localSdpObject = _ref6.localSdpObject;\n\n                if (!localSdpObject) {\n                  localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n                } // Get our local DTLS parameters.\n\n\n                dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n                  sdpObject: localSdpObject\n                }); // Set our DTLS role.\n\n                dtlsParameters.role = localDtlsRole; // Update the remote DTLS role in the SDP.\n\n                this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client'); // Need to tell the remote transport about our parameters.\n\n\n                _context21.next = 7;\n                return new Promise(function (resolve, reject) {\n                  _this4.safeEmit('@connect', {\n                    dtlsParameters: dtlsParameters\n                  }, resolve, reject);\n                });\n\n              case 7:\n                this._transportReady = true;\n\n              case 8:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function setupTransport(_x21) {\n        return _setupTransport.apply(this, arguments);\n      }\n\n      return setupTransport;\n    }()\n  }, {\n    key: \"assertSendDirection\",\n    value: function assertSendDirection() {\n      if (this._direction !== 'send') {\n        throw new Error('method can just be called for handlers with \"send\" direction');\n      }\n    }\n  }, {\n    key: \"assertRecvDirection\",\n    value: function assertRecvDirection() {\n      if (this._direction !== 'recv') {\n        throw new Error('method can just be called for handlers with \"recv\" direction');\n      }\n    }\n  }], [{\n    key: \"createFactory\",\n    value:\n    /**\n     * Creates a factory function.\n     */\n    function createFactory() {\n      return function () {\n        return new ReactNative();\n      };\n    }\n  }]);\n\n  return ReactNative;\n}(HandlerInterface_1.HandlerInterface);\n\nexports.ReactNative = ReactNative;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","ReactNative","sdpTransform","require","Logger_1","errors_1","utils","ortc","sdpCommonUtils","sdpPlanBUtils","HandlerInterface_1","RemoteSdp_1","logger","Logger","SCTP_NUM_STREAMS","OS","MIS","_sendStream","MediaStream","_mapSendLocalIdTrack","Map","_nextSendLocalId","_mapRecvLocalIdInfo","_hasDataChannelMediaSection","_nextSendSctpStreamId","_transportReady","debug","release","_pc","close","error","emit","pc","RTCPeerConnection","iceServers","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","sdpSemantics","createOffer","offerToReceiveAudio","offerToReceiveVideo","offer","sdpObject","parse","sdp","nativeRtpCapabilities","extractRtpCapabilities","error2","numStreams","direction","iceParameters","iceCandidates","dtlsParameters","sctpParameters","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","_direction","_remoteSdp","RemoteSdp","planB","_sendingRtpParametersByKind","audio","getSendingRtpParameters","video","_sendingRemoteRtpParametersByKind","getSendingRemoteRtpParameters","role","_forcedLocalDtlsRole","connectionState","addEventListener","warn","iceConnectionState","configuration","getConfiguration","setConfiguration","updateIceParameters","iceRestart","setLocalDescription","answer","type","getSdp","setRemoteDescription","createAnswer","getStats","track","encodings","codecOptions","codec","assertSendDirection","kind","id","name","addTrack","addStream","localSdpObject","sendingRtpParameters","clone","codecs","reduceCodecs","sendingRemoteRtpParameters","setupTransport","localDtlsRole","_a","length","offerMediaObject","media","find","addLegacySimulcast","write","localDescription","rtcp","cname","getCname","getRtpEncodings","idx","assign","mimeType","toLowerCase","encoding","scalabilityMode","send","offerRtpParameters","answerRtpParameters","localId","String","set","rtpParameters","Error","delete","removeTrack","getTracks","toString","signalingState","UnsupportedError","spatialLayer","params","ordered","maxPacketLifeTime","maxRetransmits","label","protocol","options","negotiated","maxRetransmitTime","dataChannel","createDataChannel","sendSctpAssociation","sctpStreamParameters","streamId","optionsList","assertRecvDirection","results","mapStreamId","trackId","mid","generateRandomNumber","receive","answerMediaObject","applyCodecParameters","stream","getRemoteStreams","s","getTrackById","push","localIds","planBStopReceiving","receiveSctpAssociation","oldDataChannelSpec","extractDtlsParameters","updateDtlsRole","Promise","resolve","reject","safeEmit","HandlerInterface"],"sources":["/home/runner/work/watchparty/watchparty/node_modules/mediasoup-client/lib/handlers/ReactNative.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReactNative = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../Logger\");\nconst errors_1 = require(\"../errors\");\nconst utils = __importStar(require(\"../utils\"));\nconst ortc = __importStar(require(\"../ortc\"));\nconst sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\nconst sdpPlanBUtils = __importStar(require(\"./sdp/planBUtils\"));\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst logger = new Logger_1.Logger('ReactNative');\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\nclass ReactNative extends HandlerInterface_1.HandlerInterface {\n    /**\n     * Creates a factory function.\n     */\n    static createFactory() {\n        return () => new ReactNative();\n    }\n    constructor() {\n        super();\n        // Local stream for sending.\n        this._sendStream = new MediaStream();\n        // Map of sending MediaStreamTracks indexed by localId.\n        this._mapSendLocalIdTrack = new Map();\n        // Next sending localId.\n        this._nextSendLocalId = 0;\n        // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.\n        // Value is an Object with mid, rtpParameters and rtpReceiver.\n        this._mapRecvLocalIdInfo = new Map();\n        // Whether a DataChannel m=application section has been created.\n        this._hasDataChannelMediaSection = false;\n        // Sending DataChannel id value counter. Incremented for each new DataChannel.\n        this._nextSendSctpStreamId = 0;\n        // Got transport local and remote parameters.\n        this._transportReady = false;\n    }\n    get name() {\n        return 'ReactNative';\n    }\n    close() {\n        logger.debug('close()');\n        // Free/dispose native MediaStream but DO NOT free/dispose native\n        // MediaStreamTracks (that is parent's business).\n        // @ts-ignore (proprietary API in react-native-webrtc).\n        this._sendStream.release(/* releaseTracks */ false);\n        // Close RTCPeerConnection.\n        if (this._pc) {\n            try {\n                this._pc.close();\n            }\n            catch (error) { }\n        }\n        this.emit('@close');\n    }\n    async getNativeRtpCapabilities() {\n        logger.debug('getNativeRtpCapabilities()');\n        const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            sdpSemantics: 'plan-b'\n        });\n        try {\n            const offer = await pc.createOffer({\n                offerToReceiveAudio: true,\n                offerToReceiveVideo: true\n            });\n            try {\n                pc.close();\n            }\n            catch (error) { }\n            const sdpObject = sdpTransform.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            return nativeRtpCapabilities;\n        }\n        catch (error) {\n            try {\n                pc.close();\n            }\n            catch (error2) { }\n            throw error;\n        }\n    }\n    async getNativeSctpCapabilities() {\n        logger.debug('getNativeSctpCapabilities()');\n        return {\n            numStreams: SCTP_NUM_STREAMS\n        };\n    }\n    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger.debug('run()');\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n            iceParameters,\n            iceCandidates,\n            dtlsParameters,\n            sctpParameters,\n            planB: true\n        });\n        this._sendingRtpParametersByKind =\n            {\n                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n            };\n        this._sendingRemoteRtpParametersByKind =\n            {\n                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n            };\n        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n            this._forcedLocalDtlsRole = dtlsParameters.role === 'server'\n                ? 'client'\n                : 'server';\n        }\n        this._pc = new RTCPeerConnection({\n            iceServers: iceServers || [],\n            iceTransportPolicy: iceTransportPolicy || 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            sdpSemantics: 'plan-b',\n            ...additionalSettings\n        }, proprietaryConstraints);\n        if (this._pc.connectionState) {\n            this._pc.addEventListener('connectionstatechange', () => {\n                this.emit('@connectionstatechange', this._pc.connectionState);\n            });\n        }\n        else {\n            this._pc.addEventListener('iceconnectionstatechange', () => {\n                logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n                switch (this._pc.iceConnectionState) {\n                    case 'checking':\n                        this.emit('@connectionstatechange', 'connecting');\n                        break;\n                    case 'connected':\n                    case 'completed':\n                        this.emit('@connectionstatechange', 'connected');\n                        break;\n                    case 'failed':\n                        this.emit('@connectionstatechange', 'failed');\n                        break;\n                    case 'disconnected':\n                        this.emit('@connectionstatechange', 'disconnected');\n                        break;\n                    case 'closed':\n                        this.emit('@connectionstatechange', 'closed');\n                        break;\n                }\n            });\n        }\n    }\n    async updateIceServers(iceServers) {\n        logger.debug('updateIceServers()');\n        const configuration = this._pc.getConfiguration();\n        configuration.iceServers = iceServers;\n        this._pc.setConfiguration(configuration);\n    }\n    async restartIce(iceParameters) {\n        logger.debug('restartIce()');\n        // Provide the remote SDP handler with new remote ICE parameters.\n        this._remoteSdp.updateIceParameters(iceParameters);\n        if (!this._transportReady) {\n            return;\n        }\n        if (this._direction === 'send') {\n            const offer = await this._pc.createOffer({ iceRestart: true });\n            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n        }\n        else {\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n        }\n    }\n    async getTransportStats() {\n        return this._pc.getStats();\n    }\n    async send({ track, encodings, codecOptions, codec }) {\n        var _a;\n        this.assertSendDirection();\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n        if (codec) {\n            logger.warn('send() | codec selection is not available in %s handler', this.name);\n        }\n        this._sendStream.addTrack(track);\n        this._pc.addStream(this._sendStream);\n        let offer = await this._pc.createOffer();\n        let localSdpObject = sdpTransform.parse(offer.sdp);\n        let offerMediaObject;\n        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n        sendingRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRtpParameters.codecs);\n        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n        sendingRemoteRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);\n        if (!this._transportReady) {\n            await this.setupTransport({\n                localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                localSdpObject\n            });\n        }\n        if (track.kind === 'video' && encodings && encodings.length > 1) {\n            logger.debug('send() | enabling simulcast');\n            localSdpObject = sdpTransform.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media\n                .find((m) => m.type === 'video');\n            sdpPlanBUtils.addLegacySimulcast({\n                offerMediaObject,\n                track,\n                numStreams: encodings.length\n            });\n            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n        }\n        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        offerMediaObject = localSdpObject.media\n            .find((m) => m.type === track.kind);\n        // Set RTCP CNAME.\n        sendingRtpParameters.rtcp.cname =\n            sdpCommonUtils.getCname({ offerMediaObject });\n        // Set RTP encodings.\n        sendingRtpParameters.encodings =\n            sdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });\n        // Complete encodings with given values.\n        if (encodings) {\n            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n                if (encodings[idx]) {\n                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n                }\n            }\n        }\n        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n        // each encoding.\n        if (sendingRtpParameters.encodings.length > 1 &&\n            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n            for (const encoding of sendingRtpParameters.encodings) {\n                encoding.scalabilityMode = 'L1T3';\n            }\n        }\n        this._remoteSdp.send({\n            offerMediaObject,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions\n        });\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        const localId = String(this._nextSendLocalId);\n        this._nextSendLocalId++;\n        // Insert into the map.\n        this._mapSendLocalIdTrack.set(localId, track);\n        return {\n            localId: localId,\n            rtpParameters: sendingRtpParameters\n        };\n    }\n    async stopSending(localId) {\n        this.assertSendDirection();\n        logger.debug('stopSending() [localId:%s]', localId);\n        const track = this._mapSendLocalIdTrack.get(localId);\n        if (!track) {\n            throw new Error('track not found');\n        }\n        this._mapSendLocalIdTrack.delete(localId);\n        this._sendStream.removeTrack(track);\n        this._pc.addStream(this._sendStream);\n        const offer = await this._pc.createOffer();\n        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        try {\n            await this._pc.setLocalDescription(offer);\n        }\n        catch (error) {\n            // NOTE: If there are no sending tracks, setLocalDescription() will fail with\n            // \"Failed to create channels\". If so, ignore it.\n            if (this._sendStream.getTracks().length === 0) {\n                logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());\n                return;\n            }\n            throw error;\n        }\n        if (this._pc.signalingState === 'stable') {\n            return;\n        }\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async pauseSending(localId) {\n        // Unimplemented.\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async resumeSending(localId) {\n        // Unimplemented.\n    }\n    async replaceTrack(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    localId, track) {\n        throw new errors_1.UnsupportedError('not implemented');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async setMaxSpatialLayer(localId, spatialLayer) {\n        throw new errors_1.UnsupportedError('not implemented');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async setRtpEncodingParameters(localId, params) {\n        throw new errors_1.UnsupportedError('not implemented');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async getSenderStats(localId) {\n        throw new errors_1.UnsupportedError('not implemented');\n    }\n    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n        var _a;\n        this.assertSendDirection();\n        const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('sendDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // Increase next id.\n        this._nextSendSctpStreamId =\n            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n        // If this is the first DataChannel we need to create the SDP answer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            const offer = await this._pc.createOffer();\n            const localSdpObject = sdpTransform.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media\n                .find((m) => m.type === 'application');\n            if (!this._transportReady) {\n                await this.setupTransport({\n                    localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                    localSdpObject\n                });\n            }\n            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n        };\n        return { dataChannel, sctpStreamParameters };\n    }\n    async receive(optionsList) {\n        var _a;\n        this.assertRecvDirection();\n        const results = [];\n        const mapStreamId = new Map();\n        for (const options of optionsList) {\n            const { trackId, kind, rtpParameters } = options;\n            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n            const mid = kind;\n            let streamId = options.streamId || rtpParameters.rtcp.cname;\n            // NOTE: In React-Native we cannot reuse the same remote MediaStream for new\n            // remote tracks. This is because react-native-webrtc does not react on new\n            // tracks generated within already existing streams, so force the streamId\n            // to be different. See:\n            // https://github.com/react-native-webrtc/react-native-webrtc/issues/401\n            logger.debug('receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc');\n            streamId += `-hack-${utils.generateRandomNumber()}`;\n            mapStreamId.set(trackId, streamId);\n            this._remoteSdp.receive({\n                mid,\n                kind,\n                offerRtpParameters: rtpParameters,\n                streamId,\n                trackId\n            });\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        let answer = await this._pc.createAnswer();\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        for (const options of optionsList) {\n            const { kind, rtpParameters } = options;\n            const mid = kind;\n            const answerMediaObject = localSdpObject.media\n                .find((m) => String(m.mid) === mid);\n            // May need to modify codec parameters in the answer based on codec\n            // parameters in the offer.\n            sdpCommonUtils.applyCodecParameters({\n                offerRtpParameters: rtpParameters,\n                answerMediaObject\n            });\n        }\n        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n        if (!this._transportReady) {\n            await this.setupTransport({\n                localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                localSdpObject\n            });\n        }\n        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const options of optionsList) {\n            const { kind, trackId, rtpParameters } = options;\n            const localId = trackId;\n            const mid = kind;\n            const streamId = mapStreamId.get(trackId);\n            const stream = this._pc.getRemoteStreams()\n                .find((s) => s.id === streamId);\n            const track = stream.getTrackById(localId);\n            if (!track) {\n                throw new Error('remote track not found');\n            }\n            // Insert into the map.\n            this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters });\n            results.push({ localId, track });\n        }\n        return results;\n    }\n    async stopReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('stopReceiving() [localId:%s]', localId);\n            const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};\n            // Remove from the map.\n            this._mapRecvLocalIdInfo.delete(localId);\n            this._remoteSdp.planBStopReceiving({ mid: mid, offerRtpParameters: rtpParameters });\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async pauseReceiving(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    localIds) {\n        // Unimplemented.\n    }\n    async resumeReceiving(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    localIds) {\n        // Unimplemented.\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async getReceiverStats(localId) {\n        throw new errors_1.UnsupportedError('not implemented');\n    }\n    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {\n        var _a;\n        this.assertRecvDirection();\n        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n        const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('receiveDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // If this is the first DataChannel we need to create the SDP offer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            if (!this._transportReady) {\n                const localSdpObject = sdpTransform.parse(answer.sdp);\n                await this.setupTransport({\n                    localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                    localSdpObject\n                });\n            }\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        return { dataChannel };\n    }\n    async setupTransport({ localDtlsRole, localSdpObject }) {\n        if (!localSdpObject) {\n            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        }\n        // Get our local DTLS parameters.\n        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n        // Set our DTLS role.\n        dtlsParameters.role = localDtlsRole;\n        // Update the remote DTLS role in the SDP.\n        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n        // Need to tell the remote transport about our parameters.\n        await new Promise((resolve, reject) => {\n            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);\n        });\n        this._transportReady = true;\n    }\n    assertSendDirection() {\n        if (this._direction !== 'send') {\n            throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n    }\n    assertRecvDirection() {\n        if (this._direction !== 'recv') {\n            throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n    }\n}\nexports.ReactNative = ReactNative;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}