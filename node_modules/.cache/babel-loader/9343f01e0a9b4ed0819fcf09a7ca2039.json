{"ast":null,"code":"\"use strict\";\n\nvar _inherits = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OfferMediaSection = exports.AnswerMediaSection = exports.MediaSection = void 0;\n\nvar sdpTransform = __importStar(require(\"sdp-transform\"));\n\nvar utils = __importStar(require(\"../../utils\"));\n\nvar MediaSection = /*#__PURE__*/function () {\n  function MediaSection(_ref) {\n    var iceParameters = _ref.iceParameters,\n        iceCandidates = _ref.iceCandidates,\n        dtlsParameters = _ref.dtlsParameters,\n        _ref$planB = _ref.planB,\n        planB = _ref$planB === void 0 ? false : _ref$planB;\n\n    _classCallCheck(this, MediaSection);\n\n    this._mediaObject = {};\n    this._planB = planB;\n\n    if (iceParameters) {\n      this.setIceParameters(iceParameters);\n    }\n\n    if (iceCandidates) {\n      this._mediaObject.candidates = [];\n\n      var _iterator = _createForOfIteratorHelper(iceCandidates),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var candidate = _step.value;\n          var candidateObject = {}; // mediasoup does mandates rtcp-mux so candidates component is always\n          // RTP (1).\n\n          candidateObject.component = 1;\n          candidateObject.foundation = candidate.foundation;\n          candidateObject.ip = candidate.ip;\n          candidateObject.port = candidate.port;\n          candidateObject.priority = candidate.priority;\n          candidateObject.transport = candidate.protocol;\n          candidateObject.type = candidate.type;\n\n          if (candidate.tcpType) {\n            candidateObject.tcptype = candidate.tcpType;\n          }\n\n          this._mediaObject.candidates.push(candidateObject);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._mediaObject.endOfCandidates = 'end-of-candidates';\n      this._mediaObject.iceOptions = 'renomination';\n    }\n\n    if (dtlsParameters) {\n      this.setDtlsRole(dtlsParameters.role);\n    }\n  }\n\n  _createClass(MediaSection, [{\n    key: \"mid\",\n    get: function get() {\n      return String(this._mediaObject.mid);\n    }\n  }, {\n    key: \"closed\",\n    get: function get() {\n      return this._mediaObject.port === 0;\n    }\n  }, {\n    key: \"getObject\",\n    value: function getObject() {\n      return this._mediaObject;\n    }\n  }, {\n    key: \"setIceParameters\",\n    value: function setIceParameters(iceParameters) {\n      this._mediaObject.iceUfrag = iceParameters.usernameFragment;\n      this._mediaObject.icePwd = iceParameters.password;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this._mediaObject.direction = 'inactive';\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.pause();\n      delete this._mediaObject.ext;\n      delete this._mediaObject.ssrcs;\n      delete this._mediaObject.ssrcGroups;\n      delete this._mediaObject.simulcast;\n      delete this._mediaObject.simulcast_03;\n      delete this._mediaObject.rids;\n      delete this._mediaObject.extmapAllowMixed;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.disable();\n      this._mediaObject.port = 0;\n    }\n  }]);\n\n  return MediaSection;\n}();\n\nexports.MediaSection = MediaSection;\n\nvar AnswerMediaSection = /*#__PURE__*/function (_MediaSection) {\n  _inherits(AnswerMediaSection, _MediaSection);\n\n  var _super = _createSuper(AnswerMediaSection);\n\n  function AnswerMediaSection(_ref2) {\n    var _this;\n\n    var iceParameters = _ref2.iceParameters,\n        iceCandidates = _ref2.iceCandidates,\n        dtlsParameters = _ref2.dtlsParameters,\n        sctpParameters = _ref2.sctpParameters,\n        plainRtpParameters = _ref2.plainRtpParameters,\n        _ref2$planB = _ref2.planB,\n        planB = _ref2$planB === void 0 ? false : _ref2$planB,\n        offerMediaObject = _ref2.offerMediaObject,\n        offerRtpParameters = _ref2.offerRtpParameters,\n        answerRtpParameters = _ref2.answerRtpParameters,\n        codecOptions = _ref2.codecOptions,\n        _ref2$extmapAllowMixe = _ref2.extmapAllowMixed,\n        extmapAllowMixed = _ref2$extmapAllowMixe === void 0 ? false : _ref2$extmapAllowMixe;\n\n    _classCallCheck(this, AnswerMediaSection);\n\n    _this = _super.call(this, {\n      iceParameters: iceParameters,\n      iceCandidates: iceCandidates,\n      dtlsParameters: dtlsParameters,\n      planB: planB\n    });\n    _this._mediaObject.mid = String(offerMediaObject.mid);\n    _this._mediaObject.type = offerMediaObject.type;\n    _this._mediaObject.protocol = offerMediaObject.protocol;\n\n    if (!plainRtpParameters) {\n      _this._mediaObject.connection = {\n        ip: '127.0.0.1',\n        version: 4\n      };\n      _this._mediaObject.port = 7;\n    } else {\n      _this._mediaObject.connection = {\n        ip: plainRtpParameters.ip,\n        version: plainRtpParameters.ipVersion\n      };\n      _this._mediaObject.port = plainRtpParameters.port;\n    }\n\n    switch (offerMediaObject.type) {\n      case 'audio':\n      case 'video':\n        {\n          _this._mediaObject.direction = 'recvonly';\n          _this._mediaObject.rtp = [];\n          _this._mediaObject.rtcpFb = [];\n          _this._mediaObject.fmtp = [];\n\n          var _iterator2 = _createForOfIteratorHelper(answerRtpParameters.codecs),\n              _step2;\n\n          try {\n            var _loop = function _loop() {\n              var codec = _step2.value;\n              var rtp = {\n                payload: codec.payloadType,\n                codec: getCodecName(codec),\n                rate: codec.clockRate\n              };\n\n              if (codec.channels > 1) {\n                rtp.encoding = codec.channels;\n              }\n\n              _this._mediaObject.rtp.push(rtp);\n\n              var codecParameters = utils.clone(codec.parameters, {});\n              var codecRtcpFeedback = utils.clone(codec.rtcpFeedback, []);\n\n              if (codecOptions) {\n                var opusStereo = codecOptions.opusStereo,\n                    opusFec = codecOptions.opusFec,\n                    opusDtx = codecOptions.opusDtx,\n                    opusMaxPlaybackRate = codecOptions.opusMaxPlaybackRate,\n                    opusMaxAverageBitrate = codecOptions.opusMaxAverageBitrate,\n                    opusPtime = codecOptions.opusPtime,\n                    opusNack = codecOptions.opusNack,\n                    videoGoogleStartBitrate = codecOptions.videoGoogleStartBitrate,\n                    videoGoogleMaxBitrate = codecOptions.videoGoogleMaxBitrate,\n                    videoGoogleMinBitrate = codecOptions.videoGoogleMinBitrate;\n                var offerCodec = offerRtpParameters.codecs.find(function (c) {\n                  return c.payloadType === codec.payloadType;\n                });\n\n                switch (codec.mimeType.toLowerCase()) {\n                  case 'audio/opus':\n                  case 'audio/multiopus':\n                    {\n                      if (opusStereo !== undefined) {\n                        offerCodec.parameters['sprop-stereo'] = opusStereo ? 1 : 0;\n                        codecParameters.stereo = opusStereo ? 1 : 0;\n                      }\n\n                      if (opusFec !== undefined) {\n                        offerCodec.parameters.useinbandfec = opusFec ? 1 : 0;\n                        codecParameters.useinbandfec = opusFec ? 1 : 0;\n                      }\n\n                      if (opusDtx !== undefined) {\n                        offerCodec.parameters.usedtx = opusDtx ? 1 : 0;\n                        codecParameters.usedtx = opusDtx ? 1 : 0;\n                      }\n\n                      if (opusMaxPlaybackRate !== undefined) {\n                        codecParameters.maxplaybackrate = opusMaxPlaybackRate;\n                      }\n\n                      if (opusMaxAverageBitrate !== undefined) {\n                        codecParameters.maxaveragebitrate = opusMaxAverageBitrate;\n                      }\n\n                      if (opusPtime !== undefined) {\n                        offerCodec.parameters.ptime = opusPtime;\n                        codecParameters.ptime = opusPtime;\n                      } // If opusNack is not set, we must remove NACK support for OPUS.\n                      // Otherwise it would be enabled for those handlers that artificially\n                      // announce it in their RTP capabilities.\n\n\n                      if (!opusNack) {\n                        offerCodec.rtcpFeedback = offerCodec.rtcpFeedback.filter(function (fb) {\n                          return fb.type !== 'nack' || fb.parameter;\n                        });\n                        codecRtcpFeedback = codecRtcpFeedback.filter(function (fb) {\n                          return fb.type !== 'nack' || fb.parameter;\n                        });\n                      }\n\n                      break;\n                    }\n\n                  case 'video/vp8':\n                  case 'video/vp9':\n                  case 'video/h264':\n                  case 'video/h265':\n                    {\n                      if (videoGoogleStartBitrate !== undefined) {\n                        codecParameters['x-google-start-bitrate'] = videoGoogleStartBitrate;\n                      }\n\n                      if (videoGoogleMaxBitrate !== undefined) {\n                        codecParameters['x-google-max-bitrate'] = videoGoogleMaxBitrate;\n                      }\n\n                      if (videoGoogleMinBitrate !== undefined) {\n                        codecParameters['x-google-min-bitrate'] = videoGoogleMinBitrate;\n                      }\n\n                      break;\n                    }\n                }\n              }\n\n              var fmtp = {\n                payload: codec.payloadType,\n                config: ''\n              };\n\n              for (var _i = 0, _Object$keys = Object.keys(codecParameters); _i < _Object$keys.length; _i++) {\n                var key = _Object$keys[_i];\n\n                if (fmtp.config) {\n                  fmtp.config += ';';\n                }\n\n                fmtp.config += \"\".concat(key, \"=\").concat(codecParameters[key]);\n              }\n\n              if (fmtp.config) {\n                _this._mediaObject.fmtp.push(fmtp);\n              }\n\n              var _iterator6 = _createForOfIteratorHelper(codecRtcpFeedback),\n                  _step6;\n\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var fb = _step6.value;\n\n                  _this._mediaObject.rtcpFb.push({\n                    payload: codec.payloadType,\n                    type: fb.type,\n                    subtype: fb.parameter\n                  });\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n            };\n\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              _loop();\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          _this._mediaObject.payloads = answerRtpParameters.codecs.map(function (codec) {\n            return codec.payloadType;\n          }).join(' ');\n          _this._mediaObject.ext = [];\n\n          var _iterator3 = _createForOfIteratorHelper(answerRtpParameters.headerExtensions),\n              _step3;\n\n          try {\n            var _loop2 = function _loop2() {\n              var ext = _step3.value;\n              // Don't add a header extension if not present in the offer.\n              var found = (offerMediaObject.ext || []).some(function (localExt) {\n                return localExt.uri === ext.uri;\n              });\n\n              if (!found) {\n                return \"continue\";\n              }\n\n              _this._mediaObject.ext.push({\n                uri: ext.uri,\n                value: ext.id\n              });\n            };\n\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _ret = _loop2();\n\n              if (_ret === \"continue\") continue;\n            } // Allow both 1 byte and 2 bytes length header extensions.\n\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          if (extmapAllowMixed && offerMediaObject.extmapAllowMixed === 'extmap-allow-mixed') {\n            _this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';\n          } // Simulcast.\n\n\n          if (offerMediaObject.simulcast) {\n            _this._mediaObject.simulcast = {\n              dir1: 'recv',\n              list1: offerMediaObject.simulcast.list1\n            };\n            _this._mediaObject.rids = [];\n\n            var _iterator4 = _createForOfIteratorHelper(offerMediaObject.rids || []),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var rid = _step4.value;\n\n                if (rid.direction !== 'send') {\n                  continue;\n                }\n\n                _this._mediaObject.rids.push({\n                  id: rid.id,\n                  direction: 'recv'\n                });\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          } // Simulcast (draft version 03).\n          else if (offerMediaObject.simulcast_03) {\n            // eslint-disable-next-line camelcase\n            _this._mediaObject.simulcast_03 = {\n              value: offerMediaObject.simulcast_03.value.replace(/send/g, 'recv')\n            };\n            _this._mediaObject.rids = [];\n\n            var _iterator5 = _createForOfIteratorHelper(offerMediaObject.rids || []),\n                _step5;\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var _rid = _step5.value;\n\n                if (_rid.direction !== 'send') {\n                  continue;\n                }\n\n                _this._mediaObject.rids.push({\n                  id: _rid.id,\n                  direction: 'recv'\n                });\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n\n          _this._mediaObject.rtcpMux = 'rtcp-mux';\n          _this._mediaObject.rtcpRsize = 'rtcp-rsize';\n\n          if (_this._planB && _this._mediaObject.type === 'video') {\n            _this._mediaObject.xGoogleFlag = 'conference';\n          }\n\n          break;\n        }\n\n      case 'application':\n        {\n          // New spec.\n          if (typeof offerMediaObject.sctpPort === 'number') {\n            _this._mediaObject.payloads = 'webrtc-datachannel';\n            _this._mediaObject.sctpPort = sctpParameters.port;\n            _this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n          } // Old spec.\n          else if (offerMediaObject.sctpmap) {\n            _this._mediaObject.payloads = sctpParameters.port;\n            _this._mediaObject.sctpmap = {\n              app: 'webrtc-datachannel',\n              sctpmapNumber: sctpParameters.port,\n              maxMessageSize: sctpParameters.maxMessageSize\n            };\n          }\n\n          break;\n        }\n    }\n\n    return _this;\n  }\n\n  _createClass(AnswerMediaSection, [{\n    key: \"setDtlsRole\",\n    value: function setDtlsRole(role) {\n      switch (role) {\n        case 'client':\n          this._mediaObject.setup = 'active';\n          break;\n\n        case 'server':\n          this._mediaObject.setup = 'passive';\n          break;\n\n        case 'auto':\n          this._mediaObject.setup = 'actpass';\n          break;\n      }\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this._mediaObject.direction = 'recvonly';\n    }\n  }, {\n    key: \"muxSimulcastStreams\",\n    value: function muxSimulcastStreams(encodings) {\n      var _a;\n\n      if (!this._mediaObject.simulcast || !this._mediaObject.simulcast.list1) {\n        return;\n      }\n\n      var layers = {};\n\n      var _iterator7 = _createForOfIteratorHelper(encodings),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var encoding = _step7.value;\n\n          if (encoding.rid) {\n            layers[encoding.rid] = encoding;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var raw = this._mediaObject.simulcast.list1; // NOTE: Ignore bug in @types/sdp-transform.\n      // Ongoing PR: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/64119\n      // @ts-ignore\n\n      var simulcastStreams = sdpTransform.parseSimulcastStreamList(raw);\n\n      var _iterator8 = _createForOfIteratorHelper(simulcastStreams),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var simulcastStream = _step8.value;\n\n          var _iterator9 = _createForOfIteratorHelper(simulcastStream),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var simulcastFormat = _step9.value;\n              simulcastFormat.paused = !((_a = layers[simulcastFormat.scid]) === null || _a === void 0 ? void 0 : _a.active);\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      this._mediaObject.simulcast.list1 = simulcastStreams.map(function (simulcastFormats) {\n        return simulcastFormats.map(function (f) {\n          return \"\".concat(f.paused ? '~' : '').concat(f.scid);\n        }).join(',');\n      }).join(';');\n    }\n  }]);\n\n  return AnswerMediaSection;\n}(MediaSection);\n\nexports.AnswerMediaSection = AnswerMediaSection;\n\nvar OfferMediaSection = /*#__PURE__*/function (_MediaSection2) {\n  _inherits(OfferMediaSection, _MediaSection2);\n\n  var _super2 = _createSuper(OfferMediaSection);\n\n  function OfferMediaSection(_ref3) {\n    var _this2;\n\n    var iceParameters = _ref3.iceParameters,\n        iceCandidates = _ref3.iceCandidates,\n        dtlsParameters = _ref3.dtlsParameters,\n        sctpParameters = _ref3.sctpParameters,\n        plainRtpParameters = _ref3.plainRtpParameters,\n        _ref3$planB = _ref3.planB,\n        planB = _ref3$planB === void 0 ? false : _ref3$planB,\n        mid = _ref3.mid,\n        kind = _ref3.kind,\n        offerRtpParameters = _ref3.offerRtpParameters,\n        streamId = _ref3.streamId,\n        trackId = _ref3.trackId,\n        _ref3$oldDataChannelS = _ref3.oldDataChannelSpec,\n        oldDataChannelSpec = _ref3$oldDataChannelS === void 0 ? false : _ref3$oldDataChannelS;\n\n    _classCallCheck(this, OfferMediaSection);\n\n    _this2 = _super2.call(this, {\n      iceParameters: iceParameters,\n      iceCandidates: iceCandidates,\n      dtlsParameters: dtlsParameters,\n      planB: planB\n    });\n    _this2._mediaObject.mid = String(mid);\n    _this2._mediaObject.type = kind;\n\n    if (!plainRtpParameters) {\n      _this2._mediaObject.connection = {\n        ip: '127.0.0.1',\n        version: 4\n      };\n\n      if (!sctpParameters) {\n        _this2._mediaObject.protocol = 'UDP/TLS/RTP/SAVPF';\n      } else {\n        _this2._mediaObject.protocol = 'UDP/DTLS/SCTP';\n      }\n\n      _this2._mediaObject.port = 7;\n    } else {\n      _this2._mediaObject.connection = {\n        ip: plainRtpParameters.ip,\n        version: plainRtpParameters.ipVersion\n      };\n      _this2._mediaObject.protocol = 'RTP/AVP';\n      _this2._mediaObject.port = plainRtpParameters.port;\n    }\n\n    switch (kind) {\n      case 'audio':\n      case 'video':\n        {\n          _this2._mediaObject.direction = 'sendonly';\n          _this2._mediaObject.rtp = [];\n          _this2._mediaObject.rtcpFb = [];\n          _this2._mediaObject.fmtp = [];\n\n          if (!_this2._planB) {\n            _this2._mediaObject.msid = \"\".concat(streamId || '-', \" \").concat(trackId);\n          }\n\n          var _iterator10 = _createForOfIteratorHelper(offerRtpParameters.codecs),\n              _step10;\n\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var codec = _step10.value;\n              var rtp = {\n                payload: codec.payloadType,\n                codec: getCodecName(codec),\n                rate: codec.clockRate\n              };\n\n              if (codec.channels > 1) {\n                rtp.encoding = codec.channels;\n              }\n\n              _this2._mediaObject.rtp.push(rtp);\n\n              var fmtp = {\n                payload: codec.payloadType,\n                config: ''\n              };\n\n              for (var _i2 = 0, _Object$keys2 = Object.keys(codec.parameters); _i2 < _Object$keys2.length; _i2++) {\n                var key = _Object$keys2[_i2];\n\n                if (fmtp.config) {\n                  fmtp.config += ';';\n                }\n\n                fmtp.config += \"\".concat(key, \"=\").concat(codec.parameters[key]);\n              }\n\n              if (fmtp.config) {\n                _this2._mediaObject.fmtp.push(fmtp);\n              }\n\n              var _iterator12 = _createForOfIteratorHelper(codec.rtcpFeedback),\n                  _step12;\n\n              try {\n                for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                  var fb = _step12.value;\n\n                  _this2._mediaObject.rtcpFb.push({\n                    payload: codec.payloadType,\n                    type: fb.type,\n                    subtype: fb.parameter\n                  });\n                }\n              } catch (err) {\n                _iterator12.e(err);\n              } finally {\n                _iterator12.f();\n              }\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n\n          _this2._mediaObject.payloads = offerRtpParameters.codecs.map(function (codec) {\n            return codec.payloadType;\n          }).join(' ');\n          _this2._mediaObject.ext = [];\n\n          var _iterator11 = _createForOfIteratorHelper(offerRtpParameters.headerExtensions),\n              _step11;\n\n          try {\n            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n              var ext = _step11.value;\n\n              _this2._mediaObject.ext.push({\n                uri: ext.uri,\n                value: ext.id\n              });\n            }\n          } catch (err) {\n            _iterator11.e(err);\n          } finally {\n            _iterator11.f();\n          }\n\n          _this2._mediaObject.rtcpMux = 'rtcp-mux';\n          _this2._mediaObject.rtcpRsize = 'rtcp-rsize';\n          var encoding = offerRtpParameters.encodings[0];\n          var ssrc = encoding.ssrc;\n          var rtxSsrc = encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : undefined;\n          _this2._mediaObject.ssrcs = [];\n          _this2._mediaObject.ssrcGroups = [];\n\n          if (offerRtpParameters.rtcp.cname) {\n            _this2._mediaObject.ssrcs.push({\n              id: ssrc,\n              attribute: 'cname',\n              value: offerRtpParameters.rtcp.cname\n            });\n          }\n\n          if (_this2._planB) {\n            _this2._mediaObject.ssrcs.push({\n              id: ssrc,\n              attribute: 'msid',\n              value: \"\".concat(streamId || '-', \" \").concat(trackId)\n            });\n          }\n\n          if (rtxSsrc) {\n            if (offerRtpParameters.rtcp.cname) {\n              _this2._mediaObject.ssrcs.push({\n                id: rtxSsrc,\n                attribute: 'cname',\n                value: offerRtpParameters.rtcp.cname\n              });\n            }\n\n            if (_this2._planB) {\n              _this2._mediaObject.ssrcs.push({\n                id: rtxSsrc,\n                attribute: 'msid',\n                value: \"\".concat(streamId || '-', \" \").concat(trackId)\n              });\n            } // Associate original and retransmission SSRCs.\n\n\n            _this2._mediaObject.ssrcGroups.push({\n              semantics: 'FID',\n              ssrcs: \"\".concat(ssrc, \" \").concat(rtxSsrc)\n            });\n          }\n\n          break;\n        }\n\n      case 'application':\n        {\n          // New spec.\n          if (!oldDataChannelSpec) {\n            _this2._mediaObject.payloads = 'webrtc-datachannel';\n            _this2._mediaObject.sctpPort = sctpParameters.port;\n            _this2._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n          } // Old spec.\n          else {\n            _this2._mediaObject.payloads = sctpParameters.port;\n            _this2._mediaObject.sctpmap = {\n              app: 'webrtc-datachannel',\n              sctpmapNumber: sctpParameters.port,\n              maxMessageSize: sctpParameters.maxMessageSize\n            };\n          }\n\n          break;\n        }\n    }\n\n    return _this2;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _createClass(OfferMediaSection, [{\n    key: \"setDtlsRole\",\n    value: function setDtlsRole(role) {\n      // Always 'actpass'.\n      this._mediaObject.setup = 'actpass';\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this._mediaObject.direction = 'sendonly';\n    }\n  }, {\n    key: \"planBReceive\",\n    value: function planBReceive(_ref4) {\n      var _this3 = this;\n\n      var offerRtpParameters = _ref4.offerRtpParameters,\n          streamId = _ref4.streamId,\n          trackId = _ref4.trackId;\n      var encoding = offerRtpParameters.encodings[0];\n      var ssrc = encoding.ssrc;\n      var rtxSsrc = encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : undefined;\n\n      var payloads = this._mediaObject.payloads.split(' ');\n\n      var _iterator13 = _createForOfIteratorHelper(offerRtpParameters.codecs),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var codec = _step13.value;\n\n          if (payloads.includes(String(codec.payloadType))) {\n            continue;\n          }\n\n          var rtp = {\n            payload: codec.payloadType,\n            codec: getCodecName(codec),\n            rate: codec.clockRate\n          };\n\n          if (codec.channels > 1) {\n            rtp.encoding = codec.channels;\n          }\n\n          this._mediaObject.rtp.push(rtp);\n\n          var fmtp = {\n            payload: codec.payloadType,\n            config: ''\n          };\n\n          for (var _i3 = 0, _Object$keys3 = Object.keys(codec.parameters); _i3 < _Object$keys3.length; _i3++) {\n            var key = _Object$keys3[_i3];\n\n            if (fmtp.config) {\n              fmtp.config += ';';\n            }\n\n            fmtp.config += \"\".concat(key, \"=\").concat(codec.parameters[key]);\n          }\n\n          if (fmtp.config) {\n            this._mediaObject.fmtp.push(fmtp);\n          }\n\n          var _iterator14 = _createForOfIteratorHelper(codec.rtcpFeedback),\n              _step14;\n\n          try {\n            for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n              var fb = _step14.value;\n\n              this._mediaObject.rtcpFb.push({\n                payload: codec.payloadType,\n                type: fb.type,\n                subtype: fb.parameter\n              });\n            }\n          } catch (err) {\n            _iterator14.e(err);\n          } finally {\n            _iterator14.f();\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n\n      this._mediaObject.payloads += \" \".concat(offerRtpParameters.codecs.filter(function (codec) {\n        return !_this3._mediaObject.payloads.includes(codec.payloadType);\n      }).map(function (codec) {\n        return codec.payloadType;\n      }).join(' '));\n      this._mediaObject.payloads = this._mediaObject.payloads.trim();\n\n      if (offerRtpParameters.rtcp.cname) {\n        this._mediaObject.ssrcs.push({\n          id: ssrc,\n          attribute: 'cname',\n          value: offerRtpParameters.rtcp.cname\n        });\n      }\n\n      this._mediaObject.ssrcs.push({\n        id: ssrc,\n        attribute: 'msid',\n        value: \"\".concat(streamId || '-', \" \").concat(trackId)\n      });\n\n      if (rtxSsrc) {\n        if (offerRtpParameters.rtcp.cname) {\n          this._mediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'cname',\n            value: offerRtpParameters.rtcp.cname\n          });\n        }\n\n        this._mediaObject.ssrcs.push({\n          id: rtxSsrc,\n          attribute: 'msid',\n          value: \"\".concat(streamId || '-', \" \").concat(trackId)\n        }); // Associate original and retransmission SSRCs.\n\n\n        this._mediaObject.ssrcGroups.push({\n          semantics: 'FID',\n          ssrcs: \"\".concat(ssrc, \" \").concat(rtxSsrc)\n        });\n      }\n    }\n  }, {\n    key: \"planBStopReceiving\",\n    value: function planBStopReceiving(_ref5) {\n      var offerRtpParameters = _ref5.offerRtpParameters;\n      var encoding = offerRtpParameters.encodings[0];\n      var ssrc = encoding.ssrc;\n      var rtxSsrc = encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : undefined;\n      this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter(function (s) {\n        return s.id !== ssrc && s.id !== rtxSsrc;\n      });\n\n      if (rtxSsrc) {\n        this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups.filter(function (group) {\n          return group.ssrcs !== \"\".concat(ssrc, \" \").concat(rtxSsrc);\n        });\n      }\n    }\n  }]);\n\n  return OfferMediaSection;\n}(MediaSection);\n\nexports.OfferMediaSection = OfferMediaSection;\n\nfunction getCodecName(codec) {\n  var MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');\n  var mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);\n\n  if (!mimeTypeMatch) {\n    throw new TypeError('invalid codec.mimeType');\n  }\n\n  return mimeTypeMatch[2];\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","OfferMediaSection","AnswerMediaSection","MediaSection","sdpTransform","require","utils","iceParameters","iceCandidates","dtlsParameters","planB","_mediaObject","_planB","setIceParameters","candidates","candidate","candidateObject","component","foundation","ip","port","priority","transport","protocol","type","tcpType","tcptype","push","endOfCandidates","iceOptions","setDtlsRole","role","String","mid","iceUfrag","usernameFragment","icePwd","password","direction","pause","ext","ssrcs","ssrcGroups","simulcast","simulcast_03","rids","extmapAllowMixed","disable","sctpParameters","plainRtpParameters","offerMediaObject","offerRtpParameters","answerRtpParameters","codecOptions","connection","version","ipVersion","rtp","rtcpFb","fmtp","codecs","codec","payload","payloadType","getCodecName","rate","clockRate","channels","encoding","codecParameters","clone","parameters","codecRtcpFeedback","rtcpFeedback","opusStereo","opusFec","opusDtx","opusMaxPlaybackRate","opusMaxAverageBitrate","opusPtime","opusNack","videoGoogleStartBitrate","videoGoogleMaxBitrate","videoGoogleMinBitrate","offerCodec","find","c","mimeType","toLowerCase","stereo","useinbandfec","usedtx","maxplaybackrate","maxaveragebitrate","ptime","filter","fb","parameter","config","keys","key","subtype","payloads","map","join","headerExtensions","found","some","localExt","uri","id","dir1","list1","rid","replace","rtcpMux","rtcpRsize","xGoogleFlag","sctpPort","maxMessageSize","sctpmap","app","sctpmapNumber","setup","encodings","_a","layers","raw","simulcastStreams","parseSimulcastStreamList","simulcastStream","simulcastFormat","paused","scid","active","simulcastFormats","f","kind","streamId","trackId","oldDataChannelSpec","msid","ssrc","rtxSsrc","rtx","rtcp","cname","attribute","semantics","split","includes","trim","s","group","MimeTypeRegex","RegExp","mimeTypeMatch","exec","TypeError"],"sources":["/home/runner/work/watchparty/watchparty/node_modules/mediasoup-client/lib/handlers/sdp/MediaSection.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OfferMediaSection = exports.AnswerMediaSection = exports.MediaSection = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst utils = __importStar(require(\"../../utils\"));\nclass MediaSection {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, planB = false }) {\n        this._mediaObject = {};\n        this._planB = planB;\n        if (iceParameters) {\n            this.setIceParameters(iceParameters);\n        }\n        if (iceCandidates) {\n            this._mediaObject.candidates = [];\n            for (const candidate of iceCandidates) {\n                const candidateObject = {};\n                // mediasoup does mandates rtcp-mux so candidates component is always\n                // RTP (1).\n                candidateObject.component = 1;\n                candidateObject.foundation = candidate.foundation;\n                candidateObject.ip = candidate.ip;\n                candidateObject.port = candidate.port;\n                candidateObject.priority = candidate.priority;\n                candidateObject.transport = candidate.protocol;\n                candidateObject.type = candidate.type;\n                if (candidate.tcpType) {\n                    candidateObject.tcptype = candidate.tcpType;\n                }\n                this._mediaObject.candidates.push(candidateObject);\n            }\n            this._mediaObject.endOfCandidates = 'end-of-candidates';\n            this._mediaObject.iceOptions = 'renomination';\n        }\n        if (dtlsParameters) {\n            this.setDtlsRole(dtlsParameters.role);\n        }\n    }\n    get mid() {\n        return String(this._mediaObject.mid);\n    }\n    get closed() {\n        return this._mediaObject.port === 0;\n    }\n    getObject() {\n        return this._mediaObject;\n    }\n    setIceParameters(iceParameters) {\n        this._mediaObject.iceUfrag = iceParameters.usernameFragment;\n        this._mediaObject.icePwd = iceParameters.password;\n    }\n    pause() {\n        this._mediaObject.direction = 'inactive';\n    }\n    disable() {\n        this.pause();\n        delete this._mediaObject.ext;\n        delete this._mediaObject.ssrcs;\n        delete this._mediaObject.ssrcGroups;\n        delete this._mediaObject.simulcast;\n        delete this._mediaObject.simulcast_03;\n        delete this._mediaObject.rids;\n        delete this._mediaObject.extmapAllowMixed;\n    }\n    close() {\n        this.disable();\n        this._mediaObject.port = 0;\n    }\n}\nexports.MediaSection = MediaSection;\nclass AnswerMediaSection extends MediaSection {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, offerMediaObject, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {\n        super({ iceParameters, iceCandidates, dtlsParameters, planB });\n        this._mediaObject.mid = String(offerMediaObject.mid);\n        this._mediaObject.type = offerMediaObject.type;\n        this._mediaObject.protocol = offerMediaObject.protocol;\n        if (!plainRtpParameters) {\n            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };\n            this._mediaObject.port = 7;\n        }\n        else {\n            this._mediaObject.connection =\n                {\n                    ip: plainRtpParameters.ip,\n                    version: plainRtpParameters.ipVersion\n                };\n            this._mediaObject.port = plainRtpParameters.port;\n        }\n        switch (offerMediaObject.type) {\n            case 'audio':\n            case 'video':\n                {\n                    this._mediaObject.direction = 'recvonly';\n                    this._mediaObject.rtp = [];\n                    this._mediaObject.rtcpFb = [];\n                    this._mediaObject.fmtp = [];\n                    for (const codec of answerRtpParameters.codecs) {\n                        const rtp = {\n                            payload: codec.payloadType,\n                            codec: getCodecName(codec),\n                            rate: codec.clockRate\n                        };\n                        if (codec.channels > 1) {\n                            rtp.encoding = codec.channels;\n                        }\n                        this._mediaObject.rtp.push(rtp);\n                        const codecParameters = utils.clone(codec.parameters, {});\n                        let codecRtcpFeedback = utils.clone(codec.rtcpFeedback, []);\n                        if (codecOptions) {\n                            const { opusStereo, opusFec, opusDtx, opusMaxPlaybackRate, opusMaxAverageBitrate, opusPtime, opusNack, videoGoogleStartBitrate, videoGoogleMaxBitrate, videoGoogleMinBitrate } = codecOptions;\n                            const offerCodec = offerRtpParameters.codecs\n                                .find((c) => (c.payloadType === codec.payloadType));\n                            switch (codec.mimeType.toLowerCase()) {\n                                case 'audio/opus':\n                                case 'audio/multiopus':\n                                    {\n                                        if (opusStereo !== undefined) {\n                                            offerCodec.parameters['sprop-stereo'] = opusStereo ? 1 : 0;\n                                            codecParameters.stereo = opusStereo ? 1 : 0;\n                                        }\n                                        if (opusFec !== undefined) {\n                                            offerCodec.parameters.useinbandfec = opusFec ? 1 : 0;\n                                            codecParameters.useinbandfec = opusFec ? 1 : 0;\n                                        }\n                                        if (opusDtx !== undefined) {\n                                            offerCodec.parameters.usedtx = opusDtx ? 1 : 0;\n                                            codecParameters.usedtx = opusDtx ? 1 : 0;\n                                        }\n                                        if (opusMaxPlaybackRate !== undefined) {\n                                            codecParameters.maxplaybackrate = opusMaxPlaybackRate;\n                                        }\n                                        if (opusMaxAverageBitrate !== undefined) {\n                                            codecParameters.maxaveragebitrate = opusMaxAverageBitrate;\n                                        }\n                                        if (opusPtime !== undefined) {\n                                            offerCodec.parameters.ptime = opusPtime;\n                                            codecParameters.ptime = opusPtime;\n                                        }\n                                        // If opusNack is not set, we must remove NACK support for OPUS.\n                                        // Otherwise it would be enabled for those handlers that artificially\n                                        // announce it in their RTP capabilities.\n                                        if (!opusNack) {\n                                            offerCodec.rtcpFeedback = offerCodec\n                                                .rtcpFeedback\n                                                .filter((fb) => fb.type !== 'nack' || fb.parameter);\n                                            codecRtcpFeedback = codecRtcpFeedback\n                                                .filter((fb) => fb.type !== 'nack' || fb.parameter);\n                                        }\n                                        break;\n                                    }\n                                case 'video/vp8':\n                                case 'video/vp9':\n                                case 'video/h264':\n                                case 'video/h265':\n                                    {\n                                        if (videoGoogleStartBitrate !== undefined) {\n                                            codecParameters['x-google-start-bitrate'] = videoGoogleStartBitrate;\n                                        }\n                                        if (videoGoogleMaxBitrate !== undefined) {\n                                            codecParameters['x-google-max-bitrate'] = videoGoogleMaxBitrate;\n                                        }\n                                        if (videoGoogleMinBitrate !== undefined) {\n                                            codecParameters['x-google-min-bitrate'] = videoGoogleMinBitrate;\n                                        }\n                                        break;\n                                    }\n                            }\n                        }\n                        const fmtp = {\n                            payload: codec.payloadType,\n                            config: ''\n                        };\n                        for (const key of Object.keys(codecParameters)) {\n                            if (fmtp.config) {\n                                fmtp.config += ';';\n                            }\n                            fmtp.config += `${key}=${codecParameters[key]}`;\n                        }\n                        if (fmtp.config) {\n                            this._mediaObject.fmtp.push(fmtp);\n                        }\n                        for (const fb of codecRtcpFeedback) {\n                            this._mediaObject.rtcpFb.push({\n                                payload: codec.payloadType,\n                                type: fb.type,\n                                subtype: fb.parameter\n                            });\n                        }\n                    }\n                    this._mediaObject.payloads = answerRtpParameters.codecs\n                        .map((codec) => codec.payloadType)\n                        .join(' ');\n                    this._mediaObject.ext = [];\n                    for (const ext of answerRtpParameters.headerExtensions) {\n                        // Don't add a header extension if not present in the offer.\n                        const found = (offerMediaObject.ext || [])\n                            .some((localExt) => localExt.uri === ext.uri);\n                        if (!found) {\n                            continue;\n                        }\n                        this._mediaObject.ext.push({\n                            uri: ext.uri,\n                            value: ext.id\n                        });\n                    }\n                    // Allow both 1 byte and 2 bytes length header extensions.\n                    if (extmapAllowMixed &&\n                        offerMediaObject.extmapAllowMixed === 'extmap-allow-mixed') {\n                        this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';\n                    }\n                    // Simulcast.\n                    if (offerMediaObject.simulcast) {\n                        this._mediaObject.simulcast =\n                            {\n                                dir1: 'recv',\n                                list1: offerMediaObject.simulcast.list1\n                            };\n                        this._mediaObject.rids = [];\n                        for (const rid of offerMediaObject.rids || []) {\n                            if (rid.direction !== 'send') {\n                                continue;\n                            }\n                            this._mediaObject.rids.push({\n                                id: rid.id,\n                                direction: 'recv'\n                            });\n                        }\n                    }\n                    // Simulcast (draft version 03).\n                    else if (offerMediaObject.simulcast_03) {\n                        // eslint-disable-next-line camelcase\n                        this._mediaObject.simulcast_03 =\n                            {\n                                value: offerMediaObject.simulcast_03.value.replace(/send/g, 'recv')\n                            };\n                        this._mediaObject.rids = [];\n                        for (const rid of offerMediaObject.rids || []) {\n                            if (rid.direction !== 'send') {\n                                continue;\n                            }\n                            this._mediaObject.rids.push({\n                                id: rid.id,\n                                direction: 'recv'\n                            });\n                        }\n                    }\n                    this._mediaObject.rtcpMux = 'rtcp-mux';\n                    this._mediaObject.rtcpRsize = 'rtcp-rsize';\n                    if (this._planB && this._mediaObject.type === 'video') {\n                        this._mediaObject.xGoogleFlag = 'conference';\n                    }\n                    break;\n                }\n            case 'application':\n                {\n                    // New spec.\n                    if (typeof offerMediaObject.sctpPort === 'number') {\n                        this._mediaObject.payloads = 'webrtc-datachannel';\n                        this._mediaObject.sctpPort = sctpParameters.port;\n                        this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n                    }\n                    // Old spec.\n                    else if (offerMediaObject.sctpmap) {\n                        this._mediaObject.payloads = sctpParameters.port;\n                        this._mediaObject.sctpmap =\n                            {\n                                app: 'webrtc-datachannel',\n                                sctpmapNumber: sctpParameters.port,\n                                maxMessageSize: sctpParameters.maxMessageSize\n                            };\n                    }\n                    break;\n                }\n        }\n    }\n    setDtlsRole(role) {\n        switch (role) {\n            case 'client':\n                this._mediaObject.setup = 'active';\n                break;\n            case 'server':\n                this._mediaObject.setup = 'passive';\n                break;\n            case 'auto':\n                this._mediaObject.setup = 'actpass';\n                break;\n        }\n    }\n    resume() {\n        this._mediaObject.direction = 'recvonly';\n    }\n    muxSimulcastStreams(encodings) {\n        var _a;\n        if (!this._mediaObject.simulcast || !this._mediaObject.simulcast.list1) {\n            return;\n        }\n        const layers = {};\n        for (const encoding of encodings) {\n            if (encoding.rid) {\n                layers[encoding.rid] = encoding;\n            }\n        }\n        const raw = this._mediaObject.simulcast.list1;\n        // NOTE: Ignore bug in @types/sdp-transform.\n        // Ongoing PR: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/64119\n        // @ts-ignore\n        const simulcastStreams = sdpTransform.parseSimulcastStreamList(raw);\n        for (const simulcastStream of simulcastStreams) {\n            for (const simulcastFormat of simulcastStream) {\n                simulcastFormat.paused = !((_a = layers[simulcastFormat.scid]) === null || _a === void 0 ? void 0 : _a.active);\n            }\n        }\n        this._mediaObject.simulcast.list1 = simulcastStreams.map((simulcastFormats) => simulcastFormats.map((f) => `${f.paused ? '~' : ''}${f.scid}`).join(',')).join(';');\n    }\n}\nexports.AnswerMediaSection = AnswerMediaSection;\nclass OfferMediaSection extends MediaSection {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, mid, kind, offerRtpParameters, streamId, trackId, oldDataChannelSpec = false }) {\n        super({ iceParameters, iceCandidates, dtlsParameters, planB });\n        this._mediaObject.mid = String(mid);\n        this._mediaObject.type = kind;\n        if (!plainRtpParameters) {\n            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };\n            if (!sctpParameters) {\n                this._mediaObject.protocol = 'UDP/TLS/RTP/SAVPF';\n            }\n            else {\n                this._mediaObject.protocol = 'UDP/DTLS/SCTP';\n            }\n            this._mediaObject.port = 7;\n        }\n        else {\n            this._mediaObject.connection =\n                {\n                    ip: plainRtpParameters.ip,\n                    version: plainRtpParameters.ipVersion\n                };\n            this._mediaObject.protocol = 'RTP/AVP';\n            this._mediaObject.port = plainRtpParameters.port;\n        }\n        switch (kind) {\n            case 'audio':\n            case 'video':\n                {\n                    this._mediaObject.direction = 'sendonly';\n                    this._mediaObject.rtp = [];\n                    this._mediaObject.rtcpFb = [];\n                    this._mediaObject.fmtp = [];\n                    if (!this._planB) {\n                        this._mediaObject.msid = `${streamId || '-'} ${trackId}`;\n                    }\n                    for (const codec of offerRtpParameters.codecs) {\n                        const rtp = {\n                            payload: codec.payloadType,\n                            codec: getCodecName(codec),\n                            rate: codec.clockRate\n                        };\n                        if (codec.channels > 1) {\n                            rtp.encoding = codec.channels;\n                        }\n                        this._mediaObject.rtp.push(rtp);\n                        const fmtp = {\n                            payload: codec.payloadType,\n                            config: ''\n                        };\n                        for (const key of Object.keys(codec.parameters)) {\n                            if (fmtp.config) {\n                                fmtp.config += ';';\n                            }\n                            fmtp.config += `${key}=${codec.parameters[key]}`;\n                        }\n                        if (fmtp.config) {\n                            this._mediaObject.fmtp.push(fmtp);\n                        }\n                        for (const fb of codec.rtcpFeedback) {\n                            this._mediaObject.rtcpFb.push({\n                                payload: codec.payloadType,\n                                type: fb.type,\n                                subtype: fb.parameter\n                            });\n                        }\n                    }\n                    this._mediaObject.payloads = offerRtpParameters.codecs\n                        .map((codec) => codec.payloadType)\n                        .join(' ');\n                    this._mediaObject.ext = [];\n                    for (const ext of offerRtpParameters.headerExtensions) {\n                        this._mediaObject.ext.push({\n                            uri: ext.uri,\n                            value: ext.id\n                        });\n                    }\n                    this._mediaObject.rtcpMux = 'rtcp-mux';\n                    this._mediaObject.rtcpRsize = 'rtcp-rsize';\n                    const encoding = offerRtpParameters.encodings[0];\n                    const ssrc = encoding.ssrc;\n                    const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)\n                        ? encoding.rtx.ssrc\n                        : undefined;\n                    this._mediaObject.ssrcs = [];\n                    this._mediaObject.ssrcGroups = [];\n                    if (offerRtpParameters.rtcp.cname) {\n                        this._mediaObject.ssrcs.push({\n                            id: ssrc,\n                            attribute: 'cname',\n                            value: offerRtpParameters.rtcp.cname\n                        });\n                    }\n                    if (this._planB) {\n                        this._mediaObject.ssrcs.push({\n                            id: ssrc,\n                            attribute: 'msid',\n                            value: `${streamId || '-'} ${trackId}`\n                        });\n                    }\n                    if (rtxSsrc) {\n                        if (offerRtpParameters.rtcp.cname) {\n                            this._mediaObject.ssrcs.push({\n                                id: rtxSsrc,\n                                attribute: 'cname',\n                                value: offerRtpParameters.rtcp.cname\n                            });\n                        }\n                        if (this._planB) {\n                            this._mediaObject.ssrcs.push({\n                                id: rtxSsrc,\n                                attribute: 'msid',\n                                value: `${streamId || '-'} ${trackId}`\n                            });\n                        }\n                        // Associate original and retransmission SSRCs.\n                        this._mediaObject.ssrcGroups.push({\n                            semantics: 'FID',\n                            ssrcs: `${ssrc} ${rtxSsrc}`\n                        });\n                    }\n                    break;\n                }\n            case 'application':\n                {\n                    // New spec.\n                    if (!oldDataChannelSpec) {\n                        this._mediaObject.payloads = 'webrtc-datachannel';\n                        this._mediaObject.sctpPort = sctpParameters.port;\n                        this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n                    }\n                    // Old spec.\n                    else {\n                        this._mediaObject.payloads = sctpParameters.port;\n                        this._mediaObject.sctpmap =\n                            {\n                                app: 'webrtc-datachannel',\n                                sctpmapNumber: sctpParameters.port,\n                                maxMessageSize: sctpParameters.maxMessageSize\n                            };\n                    }\n                    break;\n                }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setDtlsRole(role) {\n        // Always 'actpass'.\n        this._mediaObject.setup = 'actpass';\n    }\n    resume() {\n        this._mediaObject.direction = 'sendonly';\n    }\n    planBReceive({ offerRtpParameters, streamId, trackId }) {\n        const encoding = offerRtpParameters.encodings[0];\n        const ssrc = encoding.ssrc;\n        const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)\n            ? encoding.rtx.ssrc\n            : undefined;\n        const payloads = this._mediaObject.payloads.split(' ');\n        for (const codec of offerRtpParameters.codecs) {\n            if (payloads.includes(String(codec.payloadType))) {\n                continue;\n            }\n            const rtp = {\n                payload: codec.payloadType,\n                codec: getCodecName(codec),\n                rate: codec.clockRate\n            };\n            if (codec.channels > 1) {\n                rtp.encoding = codec.channels;\n            }\n            this._mediaObject.rtp.push(rtp);\n            const fmtp = {\n                payload: codec.payloadType,\n                config: ''\n            };\n            for (const key of Object.keys(codec.parameters)) {\n                if (fmtp.config) {\n                    fmtp.config += ';';\n                }\n                fmtp.config += `${key}=${codec.parameters[key]}`;\n            }\n            if (fmtp.config) {\n                this._mediaObject.fmtp.push(fmtp);\n            }\n            for (const fb of codec.rtcpFeedback) {\n                this._mediaObject.rtcpFb.push({\n                    payload: codec.payloadType,\n                    type: fb.type,\n                    subtype: fb.parameter\n                });\n            }\n        }\n        this._mediaObject.payloads += ` ${offerRtpParameters\n            .codecs\n            .filter((codec) => !this._mediaObject.payloads.includes(codec.payloadType))\n            .map((codec) => codec.payloadType)\n            .join(' ')}`;\n        this._mediaObject.payloads = this._mediaObject.payloads.trim();\n        if (offerRtpParameters.rtcp.cname) {\n            this._mediaObject.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: offerRtpParameters.rtcp.cname\n            });\n        }\n        this._mediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'msid',\n            value: `${streamId || '-'} ${trackId}`\n        });\n        if (rtxSsrc) {\n            if (offerRtpParameters.rtcp.cname) {\n                this._mediaObject.ssrcs.push({\n                    id: rtxSsrc,\n                    attribute: 'cname',\n                    value: offerRtpParameters.rtcp.cname\n                });\n            }\n            this._mediaObject.ssrcs.push({\n                id: rtxSsrc,\n                attribute: 'msid',\n                value: `${streamId || '-'} ${trackId}`\n            });\n            // Associate original and retransmission SSRCs.\n            this._mediaObject.ssrcGroups.push({\n                semantics: 'FID',\n                ssrcs: `${ssrc} ${rtxSsrc}`\n            });\n        }\n    }\n    planBStopReceiving({ offerRtpParameters }) {\n        const encoding = offerRtpParameters.encodings[0];\n        const ssrc = encoding.ssrc;\n        const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)\n            ? encoding.rtx.ssrc\n            : undefined;\n        this._mediaObject.ssrcs = this._mediaObject.ssrcs\n            .filter((s) => s.id !== ssrc && s.id !== rtxSsrc);\n        if (rtxSsrc) {\n            this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups\n                .filter((group) => group.ssrcs !== `${ssrc} ${rtxSsrc}`);\n        }\n    }\n}\nexports.OfferMediaSection = OfferMediaSection;\nfunction getCodecName(codec) {\n    const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');\n    const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);\n    if (!mimeTypeMatch) {\n        throw new TypeError('invalid codec.mimeType');\n    }\n    return mimeTypeMatch[2];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}