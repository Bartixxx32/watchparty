{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addLegacySimulcast = exports.getRtpEncodings = void 0;\n\nfunction getRtpEncodings(_ref) {\n  var offerMediaObject = _ref.offerMediaObject;\n  var ssrcs = new Set();\n\n  var _iterator = _createForOfIteratorHelper(offerMediaObject.ssrcs || []),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var line = _step.value;\n      var ssrc = line.id;\n      ssrcs.add(ssrc);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (ssrcs.size === 0) {\n    throw new Error('no a=ssrc lines found');\n  }\n\n  var ssrcToRtxSsrc = new Map(); // First assume RTX is used.\n\n  var _iterator2 = _createForOfIteratorHelper(offerMediaObject.ssrcGroups || []),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _line = _step2.value;\n\n      if (_line.semantics !== 'FID') {\n        continue;\n      }\n\n      var _line$ssrcs$split = _line.ssrcs.split(/\\s+/),\n          _line$ssrcs$split2 = _slicedToArray(_line$ssrcs$split, 2),\n          _ssrc = _line$ssrcs$split2[0],\n          rtxSsrc = _line$ssrcs$split2[1];\n\n      _ssrc = Number(_ssrc);\n      rtxSsrc = Number(rtxSsrc);\n\n      if (ssrcs.has(_ssrc)) {\n        // Remove both the SSRC and RTX SSRC from the set so later we know\n        // that they are already handled.\n        ssrcs.delete(_ssrc);\n        ssrcs.delete(rtxSsrc); // Add to the map.\n\n        ssrcToRtxSsrc.set(_ssrc, rtxSsrc);\n      }\n    } // If the set of SSRCs is not empty it means that RTX is not being used, so\n    // take media SSRCs from there.\n\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var _iterator3 = _createForOfIteratorHelper(ssrcs),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _ssrc2 = _step3.value;\n      // Add to the map.\n      ssrcToRtxSsrc.set(_ssrc2, null);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var encodings = [];\n\n  var _iterator4 = _createForOfIteratorHelper(ssrcToRtxSsrc),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n          _ssrc3 = _step4$value[0],\n          _rtxSsrc = _step4$value[1];\n\n      var encoding = {\n        ssrc: _ssrc3\n      };\n\n      if (_rtxSsrc) {\n        encoding.rtx = {\n          ssrc: _rtxSsrc\n        };\n      }\n\n      encodings.push(encoding);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return encodings;\n}\n\nexports.getRtpEncodings = getRtpEncodings;\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\n\nfunction addLegacySimulcast(_ref2) {\n  var offerMediaObject = _ref2.offerMediaObject,\n      numStreams = _ref2.numStreams;\n\n  if (numStreams <= 1) {\n    throw new TypeError('numStreams must be greater than 1');\n  } // Get the SSRC.\n\n\n  var ssrcMsidLine = (offerMediaObject.ssrcs || []).find(function (line) {\n    return line.attribute === 'msid';\n  });\n\n  if (!ssrcMsidLine) {\n    throw new Error('a=ssrc line with msid information not found');\n  }\n\n  var _ssrcMsidLine$value$s = ssrcMsidLine.value.split(' '),\n      _ssrcMsidLine$value$s2 = _slicedToArray(_ssrcMsidLine$value$s, 2),\n      streamId = _ssrcMsidLine$value$s2[0],\n      trackId = _ssrcMsidLine$value$s2[1];\n\n  var firstSsrc = ssrcMsidLine.id;\n  var firstRtxSsrc; // Get the SSRC for RTX.\n\n  (offerMediaObject.ssrcGroups || []).some(function (line) {\n    if (line.semantics !== 'FID') {\n      return false;\n    }\n\n    var ssrcs = line.ssrcs.split(/\\s+/);\n\n    if (Number(ssrcs[0]) === firstSsrc) {\n      firstRtxSsrc = Number(ssrcs[1]);\n      return true;\n    } else {\n      return false;\n    }\n  });\n  var ssrcCnameLine = offerMediaObject.ssrcs.find(function (line) {\n    return line.attribute === 'cname';\n  });\n\n  if (!ssrcCnameLine) {\n    throw new Error('a=ssrc line with cname information not found');\n  }\n\n  var cname = ssrcCnameLine.value;\n  var ssrcs = [];\n  var rtxSsrcs = [];\n\n  for (var i = 0; i < numStreams; ++i) {\n    ssrcs.push(firstSsrc + i);\n\n    if (firstRtxSsrc) {\n      rtxSsrcs.push(firstRtxSsrc + i);\n    }\n  }\n\n  offerMediaObject.ssrcGroups = [];\n  offerMediaObject.ssrcs = [];\n  offerMediaObject.ssrcGroups.push({\n    semantics: 'SIM',\n    ssrcs: ssrcs.join(' ')\n  });\n\n  for (var _i = 0; _i < ssrcs.length; ++_i) {\n    var ssrc = ssrcs[_i];\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'msid',\n      value: \"\".concat(streamId, \" \").concat(trackId)\n    });\n  }\n\n  for (var _i2 = 0; _i2 < rtxSsrcs.length; ++_i2) {\n    var _ssrc4 = ssrcs[_i2];\n    var rtxSsrc = rtxSsrcs[_i2];\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'msid',\n      value: \"\".concat(streamId, \" \").concat(trackId)\n    });\n    offerMediaObject.ssrcGroups.push({\n      semantics: 'FID',\n      ssrcs: \"\".concat(_ssrc4, \" \").concat(rtxSsrc)\n    });\n  }\n}\n\nexports.addLegacySimulcast = addLegacySimulcast;","map":{"version":3,"names":["Object","defineProperty","exports","value","addLegacySimulcast","getRtpEncodings","offerMediaObject","ssrcs","Set","line","ssrc","id","add","size","Error","ssrcToRtxSsrc","Map","ssrcGroups","semantics","split","rtxSsrc","Number","has","delete","set","encodings","encoding","rtx","push","numStreams","TypeError","ssrcMsidLine","find","attribute","streamId","trackId","firstSsrc","firstRtxSsrc","some","ssrcCnameLine","cname","rtxSsrcs","i","join","length"],"sources":["/home/runner/work/watchparty/watchparty/node_modules/mediasoup-client/lib/handlers/sdp/unifiedPlanUtils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addLegacySimulcast = exports.getRtpEncodings = void 0;\nfunction getRtpEncodings({ offerMediaObject }) {\n    const ssrcs = new Set();\n    for (const line of offerMediaObject.ssrcs || []) {\n        const ssrc = line.id;\n        ssrcs.add(ssrc);\n    }\n    if (ssrcs.size === 0) {\n        throw new Error('no a=ssrc lines found');\n    }\n    const ssrcToRtxSsrc = new Map();\n    // First assume RTX is used.\n    for (const line of offerMediaObject.ssrcGroups || []) {\n        if (line.semantics !== 'FID') {\n            continue;\n        }\n        let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n        ssrc = Number(ssrc);\n        rtxSsrc = Number(rtxSsrc);\n        if (ssrcs.has(ssrc)) {\n            // Remove both the SSRC and RTX SSRC from the set so later we know\n            // that they are already handled.\n            ssrcs.delete(ssrc);\n            ssrcs.delete(rtxSsrc);\n            // Add to the map.\n            ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n        }\n    }\n    // If the set of SSRCs is not empty it means that RTX is not being used, so\n    // take media SSRCs from there.\n    for (const ssrc of ssrcs) {\n        // Add to the map.\n        ssrcToRtxSsrc.set(ssrc, null);\n    }\n    const encodings = [];\n    for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n        const encoding = { ssrc };\n        if (rtxSsrc) {\n            encoding.rtx = { ssrc: rtxSsrc };\n        }\n        encodings.push(encoding);\n    }\n    return encodings;\n}\nexports.getRtpEncodings = getRtpEncodings;\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\nfunction addLegacySimulcast({ offerMediaObject, numStreams }) {\n    if (numStreams <= 1) {\n        throw new TypeError('numStreams must be greater than 1');\n    }\n    // Get the SSRC.\n    const ssrcMsidLine = (offerMediaObject.ssrcs || [])\n        .find((line) => line.attribute === 'msid');\n    if (!ssrcMsidLine) {\n        throw new Error('a=ssrc line with msid information not found');\n    }\n    const [streamId, trackId] = ssrcMsidLine.value.split(' ');\n    const firstSsrc = ssrcMsidLine.id;\n    let firstRtxSsrc;\n    // Get the SSRC for RTX.\n    (offerMediaObject.ssrcGroups || [])\n        .some((line) => {\n        if (line.semantics !== 'FID') {\n            return false;\n        }\n        const ssrcs = line.ssrcs.split(/\\s+/);\n        if (Number(ssrcs[0]) === firstSsrc) {\n            firstRtxSsrc = Number(ssrcs[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    });\n    const ssrcCnameLine = offerMediaObject.ssrcs\n        .find((line) => line.attribute === 'cname');\n    if (!ssrcCnameLine) {\n        throw new Error('a=ssrc line with cname information not found');\n    }\n    const cname = ssrcCnameLine.value;\n    const ssrcs = [];\n    const rtxSsrcs = [];\n    for (let i = 0; i < numStreams; ++i) {\n        ssrcs.push(firstSsrc + i);\n        if (firstRtxSsrc) {\n            rtxSsrcs.push(firstRtxSsrc + i);\n        }\n    }\n    offerMediaObject.ssrcGroups = [];\n    offerMediaObject.ssrcs = [];\n    offerMediaObject.ssrcGroups.push({\n        semantics: 'SIM',\n        ssrcs: ssrcs.join(' ')\n    });\n    for (let i = 0; i < ssrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'cname',\n            value: cname\n        });\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'msid',\n            value: `${streamId} ${trackId}`\n        });\n    }\n    for (let i = 0; i < rtxSsrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        const rtxSsrc = rtxSsrcs[i];\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'cname',\n            value: cname\n        });\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'msid',\n            value: `${streamId} ${trackId}`\n        });\n        offerMediaObject.ssrcGroups.push({\n            semantics: 'FID',\n            ssrcs: `${ssrc} ${rtxSsrc}`\n        });\n    }\n}\nexports.addLegacySimulcast = addLegacySimulcast;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}