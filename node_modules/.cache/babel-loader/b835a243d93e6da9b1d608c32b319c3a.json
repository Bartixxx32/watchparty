{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _objectSpread = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _regeneratorRuntime = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Chrome74 = void 0;\n\nvar sdpTransform = __importStar(require(\"sdp-transform\"));\n\nvar Logger_1 = require(\"../Logger\");\n\nvar utils = __importStar(require(\"../utils\"));\n\nvar ortc = __importStar(require(\"../ortc\"));\n\nvar sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\n\nvar sdpUnifiedPlanUtils = __importStar(require(\"./sdp/unifiedPlanUtils\"));\n\nvar ortcUtils = __importStar(require(\"./ortc/utils\"));\n\nvar HandlerInterface_1 = require(\"./HandlerInterface\");\n\nvar RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\n\nvar scalabilityModes_1 = require(\"../scalabilityModes\");\n\nvar logger = new Logger_1.Logger('Chrome74');\nvar SCTP_NUM_STREAMS = {\n  OS: 1024,\n  MIS: 1024\n};\n\nvar Chrome74 = /*#__PURE__*/function (_HandlerInterface_1$H) {\n  _inherits(Chrome74, _HandlerInterface_1$H);\n\n  var _super = _createSuper(Chrome74);\n\n  function Chrome74() {\n    var _this;\n\n    _classCallCheck(this, Chrome74);\n\n    _this = _super.call(this); // Map of RTCTransceivers indexed by MID.\n\n    _this._mapMidTransceiver = new Map(); // Local stream for sending.\n\n    _this._sendStream = new MediaStream(); // Whether a DataChannel m=application section has been created.\n\n    _this._hasDataChannelMediaSection = false; // Sending DataChannel id value counter. Incremented for each new DataChannel.\n\n    _this._nextSendSctpStreamId = 0; // Got transport local and remote parameters.\n\n    _this._transportReady = false;\n    return _this;\n  }\n\n  _createClass(Chrome74, [{\n    key: \"name\",\n    get: function get() {\n      return 'Chrome74';\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      logger.debug('close()'); // Close RTCPeerConnection.\n\n      if (this._pc) {\n        try {\n          this._pc.close();\n        } catch (error) {}\n      }\n\n      this.emit('@close');\n    }\n  }, {\n    key: \"getNativeRtpCapabilities\",\n    value: function () {\n      var _getNativeRtpCapabilities = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var pc, offer, sdpObject, nativeRtpCapabilities;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                logger.debug('getNativeRtpCapabilities()');\n                pc = new RTCPeerConnection({\n                  iceServers: [],\n                  iceTransportPolicy: 'all',\n                  bundlePolicy: 'max-bundle',\n                  rtcpMuxPolicy: 'require',\n                  sdpSemantics: 'unified-plan'\n                });\n                _context.prev = 2;\n                pc.addTransceiver('audio');\n                pc.addTransceiver('video');\n                _context.next = 7;\n                return pc.createOffer();\n\n              case 7:\n                offer = _context.sent;\n\n                try {\n                  pc.close();\n                } catch (error) {}\n\n                sdpObject = sdpTransform.parse(offer.sdp);\n                nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\n                  sdpObject: sdpObject\n                }); // libwebrtc supports NACK for OPUS but doesn't announce it.\n\n                ortcUtils.addNackSuppportForOpus(nativeRtpCapabilities);\n                return _context.abrupt(\"return\", nativeRtpCapabilities);\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](2);\n\n                try {\n                  pc.close();\n                } catch (error2) {}\n\n                throw _context.t0;\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 15]]);\n      }));\n\n      function getNativeRtpCapabilities() {\n        return _getNativeRtpCapabilities.apply(this, arguments);\n      }\n\n      return getNativeRtpCapabilities;\n    }()\n  }, {\n    key: \"getNativeSctpCapabilities\",\n    value: function () {\n      var _getNativeSctpCapabilities = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                logger.debug('getNativeSctpCapabilities()');\n                return _context2.abrupt(\"return\", {\n                  numStreams: SCTP_NUM_STREAMS\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getNativeSctpCapabilities() {\n        return _getNativeSctpCapabilities.apply(this, arguments);\n      }\n\n      return getNativeSctpCapabilities;\n    }()\n  }, {\n    key: \"run\",\n    value: function run(_ref) {\n      var _this2 = this;\n\n      var direction = _ref.direction,\n          iceParameters = _ref.iceParameters,\n          iceCandidates = _ref.iceCandidates,\n          dtlsParameters = _ref.dtlsParameters,\n          sctpParameters = _ref.sctpParameters,\n          iceServers = _ref.iceServers,\n          iceTransportPolicy = _ref.iceTransportPolicy,\n          additionalSettings = _ref.additionalSettings,\n          proprietaryConstraints = _ref.proprietaryConstraints,\n          extendedRtpCapabilities = _ref.extendedRtpCapabilities;\n      logger.debug('run()');\n      this._direction = direction;\n      this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n        iceParameters: iceParameters,\n        iceCandidates: iceCandidates,\n        dtlsParameters: dtlsParameters,\n        sctpParameters: sctpParameters\n      });\n      this._sendingRtpParametersByKind = {\n        audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n        video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n      };\n      this._sendingRemoteRtpParametersByKind = {\n        audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n        video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n      };\n\n      if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n        this._forcedLocalDtlsRole = dtlsParameters.role === 'server' ? 'client' : 'server';\n      }\n\n      this._pc = new RTCPeerConnection(_objectSpread({\n        iceServers: iceServers || [],\n        iceTransportPolicy: iceTransportPolicy || 'all',\n        bundlePolicy: 'max-bundle',\n        rtcpMuxPolicy: 'require',\n        sdpSemantics: 'unified-plan'\n      }, additionalSettings), proprietaryConstraints);\n\n      if (this._pc.connectionState) {\n        this._pc.addEventListener('connectionstatechange', function () {\n          _this2.emit('@connectionstatechange', _this2._pc.connectionState);\n        });\n      } else {\n        logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n\n        this._pc.addEventListener('iceconnectionstatechange', function () {\n          switch (_this2._pc.iceConnectionState) {\n            case 'checking':\n              _this2.emit('@connectionstatechange', 'connecting');\n\n              break;\n\n            case 'connected':\n            case 'completed':\n              _this2.emit('@connectionstatechange', 'connected');\n\n              break;\n\n            case 'failed':\n              _this2.emit('@connectionstatechange', 'failed');\n\n              break;\n\n            case 'disconnected':\n              _this2.emit('@connectionstatechange', 'disconnected');\n\n              break;\n\n            case 'closed':\n              _this2.emit('@connectionstatechange', 'closed');\n\n              break;\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateIceServers\",\n    value: function () {\n      var _updateIceServers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(iceServers) {\n        var configuration;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                logger.debug('updateIceServers()');\n                configuration = this._pc.getConfiguration();\n                configuration.iceServers = iceServers;\n\n                this._pc.setConfiguration(configuration);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateIceServers(_x) {\n        return _updateIceServers.apply(this, arguments);\n      }\n\n      return updateIceServers;\n    }()\n  }, {\n    key: \"restartIce\",\n    value: function () {\n      var _restartIce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(iceParameters) {\n        var offer, answer, _offer, _answer;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                logger.debug('restartIce()'); // Provide the remote SDP handler with new remote ICE parameters.\n\n                this._remoteSdp.updateIceParameters(iceParameters);\n\n                if (this._transportReady) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 4:\n                if (!(this._direction === 'send')) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                _context4.next = 7;\n                return this._pc.createOffer({\n                  iceRestart: true\n                });\n\n              case 7:\n                offer = _context4.sent;\n                logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context4.next = 11;\n                return this._pc.setLocalDescription(offer);\n\n              case 11:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context4.next = 15;\n                return this._pc.setRemoteDescription(answer);\n\n              case 15:\n                _context4.next = 27;\n                break;\n\n              case 17:\n                _offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', _offer);\n                _context4.next = 21;\n                return this._pc.setRemoteDescription(_offer);\n\n              case 21:\n                _context4.next = 23;\n                return this._pc.createAnswer();\n\n              case 23:\n                _answer = _context4.sent;\n                logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', _answer);\n                _context4.next = 27;\n                return this._pc.setLocalDescription(_answer);\n\n              case 27:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function restartIce(_x2) {\n        return _restartIce.apply(this, arguments);\n      }\n\n      return restartIce;\n    }()\n  }, {\n    key: \"getTransportStats\",\n    value: function () {\n      var _getTransportStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this._pc.getStats());\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getTransportStats() {\n        return _getTransportStats.apply(this, arguments);\n      }\n\n      return getTransportStats;\n    }()\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref2) {\n        var track, encodings, codecOptions, codec, _a, sendingRtpParameters, sendingRemoteRtpParameters, mediaSectionIdx, transceiver, offer, localSdpObject, offerMediaObject, hackVp9Svc, layers, localId, newEncodings, _iterator, _step, encoding, answer;\n\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                track = _ref2.track, encodings = _ref2.encodings, codecOptions = _ref2.codecOptions, codec = _ref2.codec;\n                this.assertSendDirection();\n                logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n                if (encodings && encodings.length > 1) {\n                  encodings.forEach(function (encoding, idx) {\n                    encoding.rid = \"r\".concat(idx);\n                  });\n                }\n\n                sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {}); // This may throw.\n\n                sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n                sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {}); // This may throw.\n\n                sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n                mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n                transceiver = this._pc.addTransceiver(track, {\n                  direction: 'sendonly',\n                  streams: [this._sendStream],\n                  sendEncodings: encodings\n                });\n                _context6.next = 12;\n                return this._pc.createOffer();\n\n              case 12:\n                offer = _context6.sent;\n                localSdpObject = sdpTransform.parse(offer.sdp);\n\n                if (this._transportReady) {\n                  _context6.next = 17;\n                  break;\n                }\n\n                _context6.next = 17;\n                return this.setupTransport({\n                  localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                  localSdpObject: localSdpObject\n                });\n\n              case 17:\n                // Special case for VP9 with SVC.\n                hackVp9Svc = false;\n                layers = (0, scalabilityModes_1.parse)((encodings || [{}])[0].scalabilityMode);\n\n                if (encodings && encodings.length === 1 && layers.spatialLayers > 1 && sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {\n                  logger.debug('send() | enabling legacy simulcast for VP9 SVC');\n                  hackVp9Svc = true;\n                  localSdpObject = sdpTransform.parse(offer.sdp);\n                  offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n                  sdpUnifiedPlanUtils.addLegacySimulcast({\n                    offerMediaObject: offerMediaObject,\n                    numStreams: layers.spatialLayers\n                  });\n                  offer = {\n                    type: 'offer',\n                    sdp: sdpTransform.write(localSdpObject)\n                  };\n                }\n\n                logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context6.next = 23;\n                return this._pc.setLocalDescription(offer);\n\n              case 23:\n                // We can now get the transceiver.mid.\n                localId = transceiver.mid; // Set MID.\n\n                sendingRtpParameters.mid = localId;\n                localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n                offerMediaObject = localSdpObject.media[mediaSectionIdx.idx]; // Set RTCP CNAME.\n\n                sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n                  offerMediaObject: offerMediaObject\n                }); // Set RTP encodings by parsing the SDP offer if no encodings are given.\n\n                if (!encodings) {\n                  sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({\n                    offerMediaObject: offerMediaObject\n                  });\n                } // Set RTP encodings by parsing the SDP offer and complete them with given\n                // one if just a single encoding has been given.\n                else if (encodings.length === 1) {\n                  newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({\n                    offerMediaObject: offerMediaObject\n                  });\n                  Object.assign(newEncodings[0], encodings[0]); // Hack for VP9 SVC.\n\n                  if (hackVp9Svc) {\n                    newEncodings = [newEncodings[0]];\n                  }\n\n                  sendingRtpParameters.encodings = newEncodings;\n                } // Otherwise if more than 1 encoding are given use them verbatim.\n                else {\n                  sendingRtpParameters.encodings = encodings;\n                } // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n                // each encoding.\n\n\n                if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n                  _iterator = _createForOfIteratorHelper(sendingRtpParameters.encodings);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      encoding = _step.value;\n\n                      if (encoding.scalabilityMode) {\n                        encoding.scalabilityMode = \"L1T\".concat(layers.temporalLayers);\n                      } else {\n                        encoding.scalabilityMode = 'L1T3';\n                      }\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n                }\n\n                this._remoteSdp.send({\n                  offerMediaObject: offerMediaObject,\n                  reuseMid: mediaSectionIdx.reuseMid,\n                  offerRtpParameters: sendingRtpParameters,\n                  answerRtpParameters: sendingRemoteRtpParameters,\n                  codecOptions: codecOptions,\n                  extmapAllowMixed: true\n                });\n\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context6.next = 35;\n                return this._pc.setRemoteDescription(answer);\n\n              case 35:\n                // Store in the map.\n                this._mapMidTransceiver.set(localId, transceiver);\n\n                return _context6.abrupt(\"return\", {\n                  localId: localId,\n                  rtpParameters: sendingRtpParameters,\n                  rtpSender: transceiver.sender\n                });\n\n              case 37:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function send(_x3) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n  }, {\n    key: \"stopSending\",\n    value: function () {\n      var _stopSending = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(localId) {\n        var transceiver, mediaSectionClosed, offer, answer;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this.assertSendDirection();\n                logger.debug('stopSending() [localId:%s]', localId);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 5:\n                transceiver.sender.replaceTrack(null);\n\n                this._pc.removeTrack(transceiver.sender);\n\n                mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n\n                if (mediaSectionClosed) {\n                  try {\n                    transceiver.stop();\n                  } catch (error) {}\n                }\n\n                _context7.next = 11;\n                return this._pc.createOffer();\n\n              case 11:\n                offer = _context7.sent;\n                logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context7.next = 15;\n                return this._pc.setLocalDescription(offer);\n\n              case 15:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context7.next = 19;\n                return this._pc.setRemoteDescription(answer);\n\n              case 19:\n                this._mapMidTransceiver.delete(localId);\n\n              case 20:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function stopSending(_x4) {\n        return _stopSending.apply(this, arguments);\n      }\n\n      return stopSending;\n    }()\n  }, {\n    key: \"pauseSending\",\n    value: function () {\n      var _pauseSending = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(localId) {\n        var transceiver, offer, answer;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this.assertSendDirection();\n                logger.debug('pauseSending() [localId:%s]', localId);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context8.next = 5;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 5:\n                transceiver.direction = 'inactive';\n\n                this._remoteSdp.pauseMediaSection(localId);\n\n                _context8.next = 9;\n                return this._pc.createOffer();\n\n              case 9:\n                offer = _context8.sent;\n                logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context8.next = 13;\n                return this._pc.setLocalDescription(offer);\n\n              case 13:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context8.next = 17;\n                return this._pc.setRemoteDescription(answer);\n\n              case 17:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function pauseSending(_x5) {\n        return _pauseSending.apply(this, arguments);\n      }\n\n      return pauseSending;\n    }()\n  }, {\n    key: \"resumeSending\",\n    value: function () {\n      var _resumeSending = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(localId) {\n        var transceiver, offer, answer;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                this.assertSendDirection();\n                logger.debug('resumeSending() [localId:%s]', localId);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                this._remoteSdp.resumeSendingMediaSection(localId);\n\n                if (transceiver) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 6:\n                transceiver.direction = 'sendonly';\n                _context9.next = 9;\n                return this._pc.createOffer();\n\n              case 9:\n                offer = _context9.sent;\n                logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context9.next = 13;\n                return this._pc.setLocalDescription(offer);\n\n              case 13:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context9.next = 17;\n                return this._pc.setRemoteDescription(answer);\n\n              case 17:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function resumeSending(_x6) {\n        return _resumeSending.apply(this, arguments);\n      }\n\n      return resumeSending;\n    }()\n  }, {\n    key: \"replaceTrack\",\n    value: function () {\n      var _replaceTrack = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(localId, track) {\n        var transceiver;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                this.assertSendDirection();\n\n                if (track) {\n                  logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n                } else {\n                  logger.debug('replaceTrack() [localId:%s, no track]', localId);\n                }\n\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context10.next = 5;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 5:\n                _context10.next = 7;\n                return transceiver.sender.replaceTrack(track);\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function replaceTrack(_x7, _x8) {\n        return _replaceTrack.apply(this, arguments);\n      }\n\n      return replaceTrack;\n    }()\n  }, {\n    key: \"setMaxSpatialLayer\",\n    value: function () {\n      var _setMaxSpatialLayer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(localId, spatialLayer) {\n        var transceiver, parameters, offer, answer;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                this.assertSendDirection();\n                logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context11.next = 5;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 5:\n                parameters = transceiver.sender.getParameters();\n                parameters.encodings.forEach(function (encoding, idx) {\n                  if (idx <= spatialLayer) {\n                    encoding.active = true;\n                  } else {\n                    encoding.active = false;\n                  }\n                });\n                _context11.next = 9;\n                return transceiver.sender.setParameters(parameters);\n\n              case 9:\n                this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n\n                _context11.next = 12;\n                return this._pc.createOffer();\n\n              case 12:\n                offer = _context11.sent;\n                logger.debug('setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context11.next = 16;\n                return this._pc.setLocalDescription(offer);\n\n              case 16:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context11.next = 20;\n                return this._pc.setRemoteDescription(answer);\n\n              case 20:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function setMaxSpatialLayer(_x9, _x10) {\n        return _setMaxSpatialLayer.apply(this, arguments);\n      }\n\n      return setMaxSpatialLayer;\n    }()\n  }, {\n    key: \"setRtpEncodingParameters\",\n    value: function () {\n      var _setRtpEncodingParameters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(localId, params) {\n        var transceiver, parameters, offer, answer;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                this.assertSendDirection();\n                logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context12.next = 5;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 5:\n                parameters = transceiver.sender.getParameters();\n                parameters.encodings.forEach(function (encoding, idx) {\n                  parameters.encodings[idx] = _objectSpread(_objectSpread({}, encoding), params);\n                });\n                _context12.next = 9;\n                return transceiver.sender.setParameters(parameters);\n\n              case 9:\n                this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n\n                _context12.next = 12;\n                return this._pc.createOffer();\n\n              case 12:\n                offer = _context12.sent;\n                logger.debug('setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context12.next = 16;\n                return this._pc.setLocalDescription(offer);\n\n              case 16:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context12.next = 20;\n                return this._pc.setRemoteDescription(answer);\n\n              case 20:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function setRtpEncodingParameters(_x11, _x12) {\n        return _setRtpEncodingParameters.apply(this, arguments);\n      }\n\n      return setRtpEncodingParameters;\n    }()\n  }, {\n    key: \"getSenderStats\",\n    value: function () {\n      var _getSenderStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(localId) {\n        var transceiver;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                this.assertSendDirection();\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context13.next = 4;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 4:\n                return _context13.abrupt(\"return\", transceiver.sender.getStats());\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getSenderStats(_x13) {\n        return _getSenderStats.apply(this, arguments);\n      }\n\n      return getSenderStats;\n    }()\n  }, {\n    key: \"sendDataChannel\",\n    value: function () {\n      var _sendDataChannel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(_ref3) {\n        var ordered, maxPacketLifeTime, maxRetransmits, label, protocol, _a, options, dataChannel, offer, localSdpObject, offerMediaObject, answer, sctpStreamParameters;\n\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                ordered = _ref3.ordered, maxPacketLifeTime = _ref3.maxPacketLifeTime, maxRetransmits = _ref3.maxRetransmits, label = _ref3.label, protocol = _ref3.protocol;\n                this.assertSendDirection();\n                options = {\n                  negotiated: true,\n                  id: this._nextSendSctpStreamId,\n                  ordered: ordered,\n                  maxPacketLifeTime: maxPacketLifeTime,\n                  maxRetransmits: maxRetransmits,\n                  protocol: protocol\n                };\n                logger.debug('sendDataChannel() [options:%o]', options);\n                dataChannel = this._pc.createDataChannel(label, options); // Increase next id.\n\n                this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS; // If this is the first DataChannel we need to create the SDP answer with\n                // m=application section.\n\n                if (this._hasDataChannelMediaSection) {\n                  _context14.next = 24;\n                  break;\n                }\n\n                _context14.next = 9;\n                return this._pc.createOffer();\n\n              case 9:\n                offer = _context14.sent;\n                localSdpObject = sdpTransform.parse(offer.sdp);\n                offerMediaObject = localSdpObject.media.find(function (m) {\n                  return m.type === 'application';\n                });\n\n                if (this._transportReady) {\n                  _context14.next = 15;\n                  break;\n                }\n\n                _context14.next = 15;\n                return this.setupTransport({\n                  localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                  localSdpObject: localSdpObject\n                });\n\n              case 15:\n                logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context14.next = 18;\n                return this._pc.setLocalDescription(offer);\n\n              case 18:\n                this._remoteSdp.sendSctpAssociation({\n                  offerMediaObject: offerMediaObject\n                });\n\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context14.next = 23;\n                return this._pc.setRemoteDescription(answer);\n\n              case 23:\n                this._hasDataChannelMediaSection = true;\n\n              case 24:\n                sctpStreamParameters = {\n                  streamId: options.id,\n                  ordered: options.ordered,\n                  maxPacketLifeTime: options.maxPacketLifeTime,\n                  maxRetransmits: options.maxRetransmits\n                };\n                return _context14.abrupt(\"return\", {\n                  dataChannel: dataChannel,\n                  sctpStreamParameters: sctpStreamParameters\n                });\n\n              case 26:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function sendDataChannel(_x14) {\n        return _sendDataChannel.apply(this, arguments);\n      }\n\n      return sendDataChannel;\n    }()\n  }, {\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(optionsList) {\n        var _this3 = this;\n\n        var _a, results, mapLocalId, _iterator2, _step2, options, trackId, kind, rtpParameters, streamId, localId, offer, answer, localSdpObject, _iterator3, _step3, _loop, _iterator4, _step4, _loop2;\n\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                this.assertRecvDirection();\n                results = [];\n                mapLocalId = new Map();\n                _iterator2 = _createForOfIteratorHelper(optionsList);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    options = _step2.value;\n                    trackId = options.trackId, kind = options.kind, rtpParameters = options.rtpParameters, streamId = options.streamId;\n                    logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n                    localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n                    mapLocalId.set(trackId, localId);\n\n                    this._remoteSdp.receive({\n                      mid: localId,\n                      kind: kind,\n                      offerRtpParameters: rtpParameters,\n                      streamId: streamId || rtpParameters.rtcp.cname,\n                      trackId: trackId\n                    });\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n                _context15.next = 9;\n                return this._pc.setRemoteDescription(offer);\n\n              case 9:\n                _context15.next = 11;\n                return this._pc.createAnswer();\n\n              case 11:\n                answer = _context15.sent;\n                localSdpObject = sdpTransform.parse(answer.sdp);\n                _iterator3 = _createForOfIteratorHelper(optionsList);\n\n                try {\n                  _loop = function _loop() {\n                    var options = _step3.value;\n                    var trackId = options.trackId,\n                        rtpParameters = options.rtpParameters;\n                    var localId = mapLocalId.get(trackId);\n                    var answerMediaObject = localSdpObject.media.find(function (m) {\n                      return String(m.mid) === localId;\n                    }); // May need to modify codec parameters in the answer based on codec\n                    // parameters in the offer.\n\n                    sdpCommonUtils.applyCodecParameters({\n                      offerRtpParameters: rtpParameters,\n                      answerMediaObject: answerMediaObject\n                    });\n                  };\n\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    _loop();\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n\n                answer = {\n                  type: 'answer',\n                  sdp: sdpTransform.write(localSdpObject)\n                };\n\n                if (this._transportReady) {\n                  _context15.next = 19;\n                  break;\n                }\n\n                _context15.next = 19;\n                return this.setupTransport({\n                  localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                  localSdpObject: localSdpObject\n                });\n\n              case 19:\n                logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n                _context15.next = 22;\n                return this._pc.setLocalDescription(answer);\n\n              case 22:\n                _iterator4 = _createForOfIteratorHelper(optionsList);\n\n                try {\n                  _loop2 = function _loop2() {\n                    var options = _step4.value;\n                    var trackId = options.trackId;\n                    var localId = mapLocalId.get(trackId);\n\n                    var transceiver = _this3._pc.getTransceivers().find(function (t) {\n                      return t.mid === localId;\n                    });\n\n                    if (!transceiver) {\n                      throw new Error('new RTCRtpTransceiver not found');\n                    } else {\n                      // Store in the map.\n                      _this3._mapMidTransceiver.set(localId, transceiver);\n\n                      results.push({\n                        localId: localId,\n                        track: transceiver.receiver.track,\n                        rtpReceiver: transceiver.receiver\n                      });\n                    }\n                  };\n\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    _loop2();\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n\n                return _context15.abrupt(\"return\", results);\n\n              case 25:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function receive(_x15) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }()\n  }, {\n    key: \"stopReceiving\",\n    value: function () {\n      var _stopReceiving = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(localIds) {\n        var _iterator5, _step5, localId, transceiver, offer, answer, _iterator6, _step6, _localId;\n\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                this.assertRecvDirection();\n                _iterator5 = _createForOfIteratorHelper(localIds);\n                _context16.prev = 2;\n\n                _iterator5.s();\n\n              case 4:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context16.next = 13;\n                  break;\n                }\n\n                localId = _step5.value;\n                logger.debug('stopReceiving() [localId:%s]', localId);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context16.next = 10;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 10:\n                this._remoteSdp.closeMediaSection(transceiver.mid);\n\n              case 11:\n                _context16.next = 4;\n                break;\n\n              case 13:\n                _context16.next = 18;\n                break;\n\n              case 15:\n                _context16.prev = 15;\n                _context16.t0 = _context16[\"catch\"](2);\n\n                _iterator5.e(_context16.t0);\n\n              case 18:\n                _context16.prev = 18;\n\n                _iterator5.f();\n\n                return _context16.finish(18);\n\n              case 21:\n                offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n                _context16.next = 25;\n                return this._pc.setRemoteDescription(offer);\n\n              case 25:\n                _context16.next = 27;\n                return this._pc.createAnswer();\n\n              case 27:\n                answer = _context16.sent;\n                logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n                _context16.next = 31;\n                return this._pc.setLocalDescription(answer);\n\n              case 31:\n                _iterator6 = _createForOfIteratorHelper(localIds);\n\n                try {\n                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                    _localId = _step6.value;\n\n                    this._mapMidTransceiver.delete(_localId);\n                  }\n                } catch (err) {\n                  _iterator6.e(err);\n                } finally {\n                  _iterator6.f();\n                }\n\n              case 33:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this, [[2, 15, 18, 21]]);\n      }));\n\n      function stopReceiving(_x16) {\n        return _stopReceiving.apply(this, arguments);\n      }\n\n      return stopReceiving;\n    }()\n  }, {\n    key: \"pauseReceiving\",\n    value: function () {\n      var _pauseReceiving = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(localIds) {\n        var _iterator7, _step7, localId, transceiver, offer, answer;\n\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                this.assertRecvDirection();\n                _iterator7 = _createForOfIteratorHelper(localIds);\n                _context17.prev = 2;\n\n                _iterator7.s();\n\n              case 4:\n                if ((_step7 = _iterator7.n()).done) {\n                  _context17.next = 14;\n                  break;\n                }\n\n                localId = _step7.value;\n                logger.debug('pauseReceiving() [localId:%s]', localId);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context17.next = 10;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 10:\n                transceiver.direction = 'inactive';\n\n                this._remoteSdp.pauseMediaSection(localId);\n\n              case 12:\n                _context17.next = 4;\n                break;\n\n              case 14:\n                _context17.next = 19;\n                break;\n\n              case 16:\n                _context17.prev = 16;\n                _context17.t0 = _context17[\"catch\"](2);\n\n                _iterator7.e(_context17.t0);\n\n              case 19:\n                _context17.prev = 19;\n\n                _iterator7.f();\n\n                return _context17.finish(19);\n\n              case 22:\n                offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n                _context17.next = 26;\n                return this._pc.setRemoteDescription(offer);\n\n              case 26:\n                _context17.next = 28;\n                return this._pc.createAnswer();\n\n              case 28:\n                answer = _context17.sent;\n                logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n                _context17.next = 32;\n                return this._pc.setLocalDescription(answer);\n\n              case 32:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this, [[2, 16, 19, 22]]);\n      }));\n\n      function pauseReceiving(_x17) {\n        return _pauseReceiving.apply(this, arguments);\n      }\n\n      return pauseReceiving;\n    }()\n  }, {\n    key: \"resumeReceiving\",\n    value: function () {\n      var _resumeReceiving = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(localIds) {\n        var _iterator8, _step8, localId, transceiver, offer, answer;\n\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                this.assertRecvDirection();\n                _iterator8 = _createForOfIteratorHelper(localIds);\n                _context18.prev = 2;\n\n                _iterator8.s();\n\n              case 4:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context18.next = 14;\n                  break;\n                }\n\n                localId = _step8.value;\n                logger.debug('resumeReceiving() [localId:%s]', localId);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context18.next = 10;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 10:\n                transceiver.direction = 'recvonly';\n\n                this._remoteSdp.resumeReceivingMediaSection(localId);\n\n              case 12:\n                _context18.next = 4;\n                break;\n\n              case 14:\n                _context18.next = 19;\n                break;\n\n              case 16:\n                _context18.prev = 16;\n                _context18.t0 = _context18[\"catch\"](2);\n\n                _iterator8.e(_context18.t0);\n\n              case 19:\n                _context18.prev = 19;\n\n                _iterator8.f();\n\n                return _context18.finish(19);\n\n              case 22:\n                offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n                _context18.next = 26;\n                return this._pc.setRemoteDescription(offer);\n\n              case 26:\n                _context18.next = 28;\n                return this._pc.createAnswer();\n\n              case 28:\n                answer = _context18.sent;\n                logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n                _context18.next = 32;\n                return this._pc.setLocalDescription(answer);\n\n              case 32:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this, [[2, 16, 19, 22]]);\n      }));\n\n      function resumeReceiving(_x18) {\n        return _resumeReceiving.apply(this, arguments);\n      }\n\n      return resumeReceiving;\n    }()\n  }, {\n    key: \"getReceiverStats\",\n    value: function () {\n      var _getReceiverStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(localId) {\n        var transceiver;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                this.assertRecvDirection();\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context19.next = 4;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 4:\n                return _context19.abrupt(\"return\", transceiver.receiver.getStats());\n\n              case 5:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function getReceiverStats(_x19) {\n        return _getReceiverStats.apply(this, arguments);\n      }\n\n      return getReceiverStats;\n    }()\n  }, {\n    key: \"receiveDataChannel\",\n    value: function () {\n      var _receiveDataChannel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(_ref4) {\n        var sctpStreamParameters, label, protocol, _a, streamId, ordered, maxPacketLifeTime, maxRetransmits, options, dataChannel, offer, answer, _localSdpObject;\n\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                sctpStreamParameters = _ref4.sctpStreamParameters, label = _ref4.label, protocol = _ref4.protocol;\n                this.assertRecvDirection();\n                streamId = sctpStreamParameters.streamId, ordered = sctpStreamParameters.ordered, maxPacketLifeTime = sctpStreamParameters.maxPacketLifeTime, maxRetransmits = sctpStreamParameters.maxRetransmits;\n                options = {\n                  negotiated: true,\n                  id: streamId,\n                  ordered: ordered,\n                  maxPacketLifeTime: maxPacketLifeTime,\n                  maxRetransmits: maxRetransmits,\n                  protocol: protocol\n                };\n                logger.debug('receiveDataChannel() [options:%o]', options);\n                dataChannel = this._pc.createDataChannel(label, options); // If this is the first DataChannel we need to create the SDP offer with\n                // m=application section.\n\n                if (this._hasDataChannelMediaSection) {\n                  _context20.next = 23;\n                  break;\n                }\n\n                this._remoteSdp.receiveSctpAssociation();\n\n                offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n                _context20.next = 12;\n                return this._pc.setRemoteDescription(offer);\n\n              case 12:\n                _context20.next = 14;\n                return this._pc.createAnswer();\n\n              case 14:\n                answer = _context20.sent;\n\n                if (this._transportReady) {\n                  _context20.next = 19;\n                  break;\n                }\n\n                _localSdpObject = sdpTransform.parse(answer.sdp);\n                _context20.next = 19;\n                return this.setupTransport({\n                  localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                  localSdpObject: _localSdpObject\n                });\n\n              case 19:\n                logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context20.next = 22;\n                return this._pc.setLocalDescription(answer);\n\n              case 22:\n                this._hasDataChannelMediaSection = true;\n\n              case 23:\n                return _context20.abrupt(\"return\", {\n                  dataChannel: dataChannel\n                });\n\n              case 24:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function receiveDataChannel(_x20) {\n        return _receiveDataChannel.apply(this, arguments);\n      }\n\n      return receiveDataChannel;\n    }()\n  }, {\n    key: \"setupTransport\",\n    value: function () {\n      var _setupTransport = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(_ref5) {\n        var _this4 = this;\n\n        var localDtlsRole, localSdpObject, dtlsParameters;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                localDtlsRole = _ref5.localDtlsRole, localSdpObject = _ref5.localSdpObject;\n\n                if (!localSdpObject) {\n                  localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n                } // Get our local DTLS parameters.\n\n\n                dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n                  sdpObject: localSdpObject\n                }); // Set our DTLS role.\n\n                dtlsParameters.role = localDtlsRole; // Update the remote DTLS role in the SDP.\n\n                this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client'); // Need to tell the remote transport about our parameters.\n\n\n                _context21.next = 7;\n                return new Promise(function (resolve, reject) {\n                  _this4.safeEmit('@connect', {\n                    dtlsParameters: dtlsParameters\n                  }, resolve, reject);\n                });\n\n              case 7:\n                this._transportReady = true;\n\n              case 8:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function setupTransport(_x21) {\n        return _setupTransport.apply(this, arguments);\n      }\n\n      return setupTransport;\n    }()\n  }, {\n    key: \"assertSendDirection\",\n    value: function assertSendDirection() {\n      if (this._direction !== 'send') {\n        throw new Error('method can just be called for handlers with \"send\" direction');\n      }\n    }\n  }, {\n    key: \"assertRecvDirection\",\n    value: function assertRecvDirection() {\n      if (this._direction !== 'recv') {\n        throw new Error('method can just be called for handlers with \"recv\" direction');\n      }\n    }\n  }], [{\n    key: \"createFactory\",\n    value:\n    /**\n     * Creates a factory function.\n     */\n    function createFactory() {\n      return function () {\n        return new Chrome74();\n      };\n    }\n  }]);\n\n  return Chrome74;\n}(HandlerInterface_1.HandlerInterface);\n\nexports.Chrome74 = Chrome74;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","Chrome74","sdpTransform","require","Logger_1","utils","ortc","sdpCommonUtils","sdpUnifiedPlanUtils","ortcUtils","HandlerInterface_1","RemoteSdp_1","scalabilityModes_1","logger","Logger","SCTP_NUM_STREAMS","OS","MIS","_mapMidTransceiver","Map","_sendStream","MediaStream","_hasDataChannelMediaSection","_nextSendSctpStreamId","_transportReady","debug","_pc","close","error","emit","pc","RTCPeerConnection","iceServers","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","sdpSemantics","addTransceiver","createOffer","offer","sdpObject","parse","sdp","nativeRtpCapabilities","extractRtpCapabilities","addNackSuppportForOpus","error2","numStreams","direction","iceParameters","iceCandidates","dtlsParameters","sctpParameters","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","_direction","_remoteSdp","RemoteSdp","_sendingRtpParametersByKind","audio","getSendingRtpParameters","video","_sendingRemoteRtpParametersByKind","getSendingRemoteRtpParameters","role","_forcedLocalDtlsRole","connectionState","addEventListener","warn","iceConnectionState","configuration","getConfiguration","setConfiguration","updateIceParameters","iceRestart","setLocalDescription","answer","type","getSdp","setRemoteDescription","createAnswer","getStats","track","encodings","codecOptions","codec","assertSendDirection","kind","id","length","forEach","encoding","idx","rid","sendingRtpParameters","clone","codecs","reduceCodecs","sendingRemoteRtpParameters","mediaSectionIdx","getNextMediaSectionIdx","transceiver","streams","sendEncodings","localSdpObject","setupTransport","localDtlsRole","_a","hackVp9Svc","layers","scalabilityMode","spatialLayers","mimeType","toLowerCase","offerMediaObject","media","addLegacySimulcast","write","localId","mid","localDescription","rtcp","cname","getCname","getRtpEncodings","newEncodings","assign","temporalLayers","send","reuseMid","offerRtpParameters","answerRtpParameters","extmapAllowMixed","set","rtpParameters","rtpSender","sender","Error","replaceTrack","removeTrack","mediaSectionClosed","closeMediaSection","stop","delete","pauseMediaSection","resumeSendingMediaSection","spatialLayer","parameters","getParameters","active","setParameters","muxMediaSectionSimulcast","params","ordered","maxPacketLifeTime","maxRetransmits","label","protocol","options","negotiated","dataChannel","createDataChannel","find","sendSctpAssociation","sctpStreamParameters","streamId","optionsList","assertRecvDirection","results","mapLocalId","trackId","String","size","receive","answerMediaObject","applyCodecParameters","getTransceivers","t","push","receiver","rtpReceiver","localIds","resumeReceivingMediaSection","receiveSctpAssociation","extractDtlsParameters","updateDtlsRole","Promise","resolve","reject","safeEmit","HandlerInterface"],"sources":["/home/runner/work/watchparty/watchparty/node_modules/mediasoup-client/lib/handlers/Chrome74.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Chrome74 = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../Logger\");\nconst utils = __importStar(require(\"../utils\"));\nconst ortc = __importStar(require(\"../ortc\"));\nconst sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\nconst sdpUnifiedPlanUtils = __importStar(require(\"./sdp/unifiedPlanUtils\"));\nconst ortcUtils = __importStar(require(\"./ortc/utils\"));\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\nconst logger = new Logger_1.Logger('Chrome74');\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\nclass Chrome74 extends HandlerInterface_1.HandlerInterface {\n    /**\n     * Creates a factory function.\n     */\n    static createFactory() {\n        return () => new Chrome74();\n    }\n    constructor() {\n        super();\n        // Map of RTCTransceivers indexed by MID.\n        this._mapMidTransceiver = new Map();\n        // Local stream for sending.\n        this._sendStream = new MediaStream();\n        // Whether a DataChannel m=application section has been created.\n        this._hasDataChannelMediaSection = false;\n        // Sending DataChannel id value counter. Incremented for each new DataChannel.\n        this._nextSendSctpStreamId = 0;\n        // Got transport local and remote parameters.\n        this._transportReady = false;\n    }\n    get name() {\n        return 'Chrome74';\n    }\n    close() {\n        logger.debug('close()');\n        // Close RTCPeerConnection.\n        if (this._pc) {\n            try {\n                this._pc.close();\n            }\n            catch (error) { }\n        }\n        this.emit('@close');\n    }\n    async getNativeRtpCapabilities() {\n        logger.debug('getNativeRtpCapabilities()');\n        const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            sdpSemantics: 'unified-plan'\n        });\n        try {\n            pc.addTransceiver('audio');\n            pc.addTransceiver('video');\n            const offer = await pc.createOffer();\n            try {\n                pc.close();\n            }\n            catch (error) { }\n            const sdpObject = sdpTransform.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            // libwebrtc supports NACK for OPUS but doesn't announce it.\n            ortcUtils.addNackSuppportForOpus(nativeRtpCapabilities);\n            return nativeRtpCapabilities;\n        }\n        catch (error) {\n            try {\n                pc.close();\n            }\n            catch (error2) { }\n            throw error;\n        }\n    }\n    async getNativeSctpCapabilities() {\n        logger.debug('getNativeSctpCapabilities()');\n        return {\n            numStreams: SCTP_NUM_STREAMS\n        };\n    }\n    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger.debug('run()');\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n            iceParameters,\n            iceCandidates,\n            dtlsParameters,\n            sctpParameters\n        });\n        this._sendingRtpParametersByKind =\n            {\n                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n            };\n        this._sendingRemoteRtpParametersByKind =\n            {\n                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n            };\n        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n            this._forcedLocalDtlsRole = dtlsParameters.role === 'server'\n                ? 'client'\n                : 'server';\n        }\n        this._pc = new RTCPeerConnection({\n            iceServers: iceServers || [],\n            iceTransportPolicy: iceTransportPolicy || 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            sdpSemantics: 'unified-plan',\n            ...additionalSettings\n        }, proprietaryConstraints);\n        if (this._pc.connectionState) {\n            this._pc.addEventListener('connectionstatechange', () => {\n                this.emit('@connectionstatechange', this._pc.connectionState);\n            });\n        }\n        else {\n            logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n            this._pc.addEventListener('iceconnectionstatechange', () => {\n                switch (this._pc.iceConnectionState) {\n                    case 'checking':\n                        this.emit('@connectionstatechange', 'connecting');\n                        break;\n                    case 'connected':\n                    case 'completed':\n                        this.emit('@connectionstatechange', 'connected');\n                        break;\n                    case 'failed':\n                        this.emit('@connectionstatechange', 'failed');\n                        break;\n                    case 'disconnected':\n                        this.emit('@connectionstatechange', 'disconnected');\n                        break;\n                    case 'closed':\n                        this.emit('@connectionstatechange', 'closed');\n                        break;\n                }\n            });\n        }\n    }\n    async updateIceServers(iceServers) {\n        logger.debug('updateIceServers()');\n        const configuration = this._pc.getConfiguration();\n        configuration.iceServers = iceServers;\n        this._pc.setConfiguration(configuration);\n    }\n    async restartIce(iceParameters) {\n        logger.debug('restartIce()');\n        // Provide the remote SDP handler with new remote ICE parameters.\n        this._remoteSdp.updateIceParameters(iceParameters);\n        if (!this._transportReady) {\n            return;\n        }\n        if (this._direction === 'send') {\n            const offer = await this._pc.createOffer({ iceRestart: true });\n            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n        }\n        else {\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n        }\n    }\n    async getTransportStats() {\n        return this._pc.getStats();\n    }\n    async send({ track, encodings, codecOptions, codec }) {\n        var _a;\n        this.assertSendDirection();\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n        if (encodings && encodings.length > 1) {\n            encodings.forEach((encoding, idx) => {\n                encoding.rid = `r${idx}`;\n            });\n        }\n        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n        // This may throw.\n        sendingRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n        // This may throw.\n        sendingRemoteRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n        const transceiver = this._pc.addTransceiver(track, {\n            direction: 'sendonly',\n            streams: [this._sendStream],\n            sendEncodings: encodings\n        });\n        let offer = await this._pc.createOffer();\n        let localSdpObject = sdpTransform.parse(offer.sdp);\n        let offerMediaObject;\n        if (!this._transportReady) {\n            await this.setupTransport({\n                localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                localSdpObject\n            });\n        }\n        // Special case for VP9 with SVC.\n        let hackVp9Svc = false;\n        const layers = (0, scalabilityModes_1.parse)((encodings || [{}])[0].scalabilityMode);\n        if (encodings &&\n            encodings.length === 1 &&\n            layers.spatialLayers > 1 &&\n            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {\n            logger.debug('send() | enabling legacy simulcast for VP9 SVC');\n            hackVp9Svc = true;\n            localSdpObject = sdpTransform.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n            sdpUnifiedPlanUtils.addLegacySimulcast({\n                offerMediaObject,\n                numStreams: layers.spatialLayers\n            });\n            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n        }\n        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        // We can now get the transceiver.mid.\n        const localId = transceiver.mid;\n        // Set MID.\n        sendingRtpParameters.mid = localId;\n        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n        // Set RTCP CNAME.\n        sendingRtpParameters.rtcp.cname =\n            sdpCommonUtils.getCname({ offerMediaObject });\n        // Set RTP encodings by parsing the SDP offer if no encodings are given.\n        if (!encodings) {\n            sendingRtpParameters.encodings =\n                sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n        }\n        // Set RTP encodings by parsing the SDP offer and complete them with given\n        // one if just a single encoding has been given.\n        else if (encodings.length === 1) {\n            let newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n            Object.assign(newEncodings[0], encodings[0]);\n            // Hack for VP9 SVC.\n            if (hackVp9Svc) {\n                newEncodings = [newEncodings[0]];\n            }\n            sendingRtpParameters.encodings = newEncodings;\n        }\n        // Otherwise if more than 1 encoding are given use them verbatim.\n        else {\n            sendingRtpParameters.encodings = encodings;\n        }\n        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n        // each encoding.\n        if (sendingRtpParameters.encodings.length > 1 &&\n            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n            for (const encoding of sendingRtpParameters.encodings) {\n                if (encoding.scalabilityMode) {\n                    encoding.scalabilityMode = `L1T${layers.temporalLayers}`;\n                }\n                else {\n                    encoding.scalabilityMode = 'L1T3';\n                }\n            }\n        }\n        this._remoteSdp.send({\n            offerMediaObject,\n            reuseMid: mediaSectionIdx.reuseMid,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions,\n            extmapAllowMixed: true\n        });\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        // Store in the map.\n        this._mapMidTransceiver.set(localId, transceiver);\n        return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender\n        };\n    }\n    async stopSending(localId) {\n        this.assertSendDirection();\n        logger.debug('stopSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        transceiver.sender.replaceTrack(null);\n        this._pc.removeTrack(transceiver.sender);\n        const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n        if (mediaSectionClosed) {\n            try {\n                transceiver.stop();\n            }\n            catch (error) { }\n        }\n        const offer = await this._pc.createOffer();\n        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        this._mapMidTransceiver.delete(localId);\n    }\n    async pauseSending(localId) {\n        this.assertSendDirection();\n        logger.debug('pauseSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        transceiver.direction = 'inactive';\n        this._remoteSdp.pauseMediaSection(localId);\n        const offer = await this._pc.createOffer();\n        logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async resumeSending(localId) {\n        this.assertSendDirection();\n        logger.debug('resumeSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        this._remoteSdp.resumeSendingMediaSection(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        transceiver.direction = 'sendonly';\n        const offer = await this._pc.createOffer();\n        logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async replaceTrack(localId, track) {\n        this.assertSendDirection();\n        if (track) {\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n        }\n        else {\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\n        }\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        await transceiver.sender.replaceTrack(track);\n    }\n    async setMaxSpatialLayer(localId, spatialLayer) {\n        this.assertSendDirection();\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer) {\n                encoding.active = true;\n            }\n            else {\n                encoding.active = false;\n            }\n        });\n        await transceiver.sender.setParameters(parameters);\n        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n        const offer = await this._pc.createOffer();\n        logger.debug('setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async setRtpEncodingParameters(localId, params) {\n        this.assertSendDirection();\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = { ...encoding, ...params };\n        });\n        await transceiver.sender.setParameters(parameters);\n        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n        const offer = await this._pc.createOffer();\n        logger.debug('setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async getSenderStats(localId) {\n        this.assertSendDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        return transceiver.sender.getStats();\n    }\n    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n        var _a;\n        this.assertSendDirection();\n        const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('sendDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // Increase next id.\n        this._nextSendSctpStreamId =\n            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n        // If this is the first DataChannel we need to create the SDP answer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            const offer = await this._pc.createOffer();\n            const localSdpObject = sdpTransform.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media\n                .find((m) => m.type === 'application');\n            if (!this._transportReady) {\n                await this.setupTransport({\n                    localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                    localSdpObject\n                });\n            }\n            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n        };\n        return { dataChannel, sctpStreamParameters };\n    }\n    async receive(optionsList) {\n        var _a;\n        this.assertRecvDirection();\n        const results = [];\n        const mapLocalId = new Map();\n        for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n            const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n            mapLocalId.set(trackId, localId);\n            this._remoteSdp.receive({\n                mid: localId,\n                kind,\n                offerRtpParameters: rtpParameters,\n                streamId: streamId || rtpParameters.rtcp.cname,\n                trackId\n            });\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        let answer = await this._pc.createAnswer();\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        for (const options of optionsList) {\n            const { trackId, rtpParameters } = options;\n            const localId = mapLocalId.get(trackId);\n            const answerMediaObject = localSdpObject.media\n                .find((m) => String(m.mid) === localId);\n            // May need to modify codec parameters in the answer based on codec\n            // parameters in the offer.\n            sdpCommonUtils.applyCodecParameters({\n                offerRtpParameters: rtpParameters,\n                answerMediaObject\n            });\n        }\n        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n        if (!this._transportReady) {\n            await this.setupTransport({\n                localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                localSdpObject\n            });\n        }\n        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const options of optionsList) {\n            const { trackId } = options;\n            const localId = mapLocalId.get(trackId);\n            const transceiver = this._pc.getTransceivers()\n                .find((t) => t.mid === localId);\n            if (!transceiver) {\n                throw new Error('new RTCRtpTransceiver not found');\n            }\n            else {\n                // Store in the map.\n                this._mapMidTransceiver.set(localId, transceiver);\n                results.push({\n                    localId,\n                    track: transceiver.receiver.track,\n                    rtpReceiver: transceiver.receiver\n                });\n            }\n        }\n        return results;\n    }\n    async stopReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('stopReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n                throw new Error('associated RTCRtpTransceiver not found');\n            }\n            this._remoteSdp.closeMediaSection(transceiver.mid);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const localId of localIds) {\n            this._mapMidTransceiver.delete(localId);\n        }\n    }\n    async pauseReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('pauseReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n                throw new Error('associated RTCRtpTransceiver not found');\n            }\n            transceiver.direction = 'inactive';\n            this._remoteSdp.pauseMediaSection(localId);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async resumeReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('resumeReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n                throw new Error('associated RTCRtpTransceiver not found');\n            }\n            transceiver.direction = 'recvonly';\n            this._remoteSdp.resumeReceivingMediaSection(localId);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async getReceiverStats(localId) {\n        this.assertRecvDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        return transceiver.receiver.getStats();\n    }\n    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {\n        var _a;\n        this.assertRecvDirection();\n        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n        const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('receiveDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // If this is the first DataChannel we need to create the SDP offer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            if (!this._transportReady) {\n                const localSdpObject = sdpTransform.parse(answer.sdp);\n                await this.setupTransport({\n                    localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                    localSdpObject\n                });\n            }\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        return { dataChannel };\n    }\n    async setupTransport({ localDtlsRole, localSdpObject }) {\n        if (!localSdpObject) {\n            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        }\n        // Get our local DTLS parameters.\n        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n        // Set our DTLS role.\n        dtlsParameters.role = localDtlsRole;\n        // Update the remote DTLS role in the SDP.\n        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n        // Need to tell the remote transport about our parameters.\n        await new Promise((resolve, reject) => {\n            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);\n        });\n        this._transportReady = true;\n    }\n    assertSendDirection() {\n        if (this._direction !== 'send') {\n            throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n    }\n    assertRecvDirection() {\n        if (this._direction !== 'recv') {\n            throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n    }\n}\nexports.Chrome74 = Chrome74;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}