{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _objectSpread = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _regeneratorRuntime = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Firefox60 = void 0;\n\nvar sdpTransform = __importStar(require(\"sdp-transform\"));\n\nvar Logger_1 = require(\"../Logger\");\n\nvar errors_1 = require(\"../errors\");\n\nvar utils = __importStar(require(\"../utils\"));\n\nvar ortc = __importStar(require(\"../ortc\"));\n\nvar sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\n\nvar sdpUnifiedPlanUtils = __importStar(require(\"./sdp/unifiedPlanUtils\"));\n\nvar HandlerInterface_1 = require(\"./HandlerInterface\");\n\nvar RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\n\nvar scalabilityModes_1 = require(\"../scalabilityModes\");\n\nvar logger = new Logger_1.Logger('Firefox60');\nvar SCTP_NUM_STREAMS = {\n  OS: 16,\n  MIS: 2048\n};\n\nvar Firefox60 = /*#__PURE__*/function (_HandlerInterface_1$H) {\n  _inherits(Firefox60, _HandlerInterface_1$H);\n\n  var _super = _createSuper(Firefox60);\n\n  function Firefox60() {\n    var _this;\n\n    _classCallCheck(this, Firefox60);\n\n    _this = _super.call(this); // Map of RTCTransceivers indexed by MID.\n\n    _this._mapMidTransceiver = new Map(); // Local stream for sending.\n\n    _this._sendStream = new MediaStream(); // Whether a DataChannel m=application section has been created.\n\n    _this._hasDataChannelMediaSection = false; // Sending DataChannel id value counter. Incremented for each new DataChannel.\n\n    _this._nextSendSctpStreamId = 0; // Got transport local and remote parameters.\n\n    _this._transportReady = false;\n    return _this;\n  }\n\n  _createClass(Firefox60, [{\n    key: \"name\",\n    get: function get() {\n      return 'Firefox60';\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      logger.debug('close()'); // Close RTCPeerConnection.\n\n      if (this._pc) {\n        try {\n          this._pc.close();\n        } catch (error) {}\n      }\n\n      this.emit('@close');\n    }\n  }, {\n    key: \"getNativeRtpCapabilities\",\n    value: function () {\n      var _getNativeRtpCapabilities = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var pc, canvas, fakeStream, fakeVideoTrack, videoTransceiver, parameters, encodings, offer, sdpObject, nativeRtpCapabilities;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                logger.debug('getNativeRtpCapabilities()');\n                pc = new RTCPeerConnection({\n                  iceServers: [],\n                  iceTransportPolicy: 'all',\n                  bundlePolicy: 'max-bundle',\n                  rtcpMuxPolicy: 'require'\n                }); // NOTE: We need to add a real video track to get the RID extension mapping.\n\n                canvas = document.createElement('canvas'); // NOTE: Otherwise Firefox fails in next line.\n\n                canvas.getContext('2d');\n                fakeStream = canvas.captureStream();\n                fakeVideoTrack = fakeStream.getVideoTracks()[0];\n                _context.prev = 6;\n                pc.addTransceiver('audio', {\n                  direction: 'sendrecv'\n                });\n                videoTransceiver = pc.addTransceiver(fakeVideoTrack, {\n                  direction: 'sendrecv'\n                });\n                parameters = videoTransceiver.sender.getParameters();\n                encodings = [{\n                  rid: 'r0',\n                  maxBitrate: 100000\n                }, {\n                  rid: 'r1',\n                  maxBitrate: 500000\n                }];\n                parameters.encodings = encodings;\n                _context.next = 14;\n                return videoTransceiver.sender.setParameters(parameters);\n\n              case 14:\n                _context.next = 16;\n                return pc.createOffer();\n\n              case 16:\n                offer = _context.sent;\n\n                try {\n                  canvas.remove();\n                } catch (error) {}\n\n                try {\n                  fakeVideoTrack.stop();\n                } catch (error) {}\n\n                try {\n                  pc.close();\n                } catch (error) {}\n\n                sdpObject = sdpTransform.parse(offer.sdp);\n                nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\n                  sdpObject: sdpObject\n                });\n                return _context.abrupt(\"return\", nativeRtpCapabilities);\n\n              case 25:\n                _context.prev = 25;\n                _context.t0 = _context[\"catch\"](6);\n\n                try {\n                  canvas.remove();\n                } catch (error2) {}\n\n                try {\n                  fakeVideoTrack.stop();\n                } catch (error2) {}\n\n                try {\n                  pc.close();\n                } catch (error2) {}\n\n                throw _context.t0;\n\n              case 31:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[6, 25]]);\n      }));\n\n      function getNativeRtpCapabilities() {\n        return _getNativeRtpCapabilities.apply(this, arguments);\n      }\n\n      return getNativeRtpCapabilities;\n    }()\n  }, {\n    key: \"getNativeSctpCapabilities\",\n    value: function () {\n      var _getNativeSctpCapabilities = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                logger.debug('getNativeSctpCapabilities()');\n                return _context2.abrupt(\"return\", {\n                  numStreams: SCTP_NUM_STREAMS\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getNativeSctpCapabilities() {\n        return _getNativeSctpCapabilities.apply(this, arguments);\n      }\n\n      return getNativeSctpCapabilities;\n    }()\n  }, {\n    key: \"run\",\n    value: function run(_ref) {\n      var _this2 = this;\n\n      var direction = _ref.direction,\n          iceParameters = _ref.iceParameters,\n          iceCandidates = _ref.iceCandidates,\n          dtlsParameters = _ref.dtlsParameters,\n          sctpParameters = _ref.sctpParameters,\n          iceServers = _ref.iceServers,\n          iceTransportPolicy = _ref.iceTransportPolicy,\n          additionalSettings = _ref.additionalSettings,\n          proprietaryConstraints = _ref.proprietaryConstraints,\n          extendedRtpCapabilities = _ref.extendedRtpCapabilities;\n      logger.debug('run()');\n      this._direction = direction;\n      this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n        iceParameters: iceParameters,\n        iceCandidates: iceCandidates,\n        dtlsParameters: dtlsParameters,\n        sctpParameters: sctpParameters\n      });\n      this._sendingRtpParametersByKind = {\n        audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n        video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n      };\n      this._sendingRemoteRtpParametersByKind = {\n        audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n        video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n      };\n      this._pc = new RTCPeerConnection(_objectSpread({\n        iceServers: iceServers || [],\n        iceTransportPolicy: iceTransportPolicy || 'all',\n        bundlePolicy: 'max-bundle',\n        rtcpMuxPolicy: 'require'\n      }, additionalSettings), proprietaryConstraints);\n\n      if (this._pc.connectionState) {\n        this._pc.addEventListener('connectionstatechange', function () {\n          _this2.emit('@connectionstatechange', _this2._pc.connectionState);\n        });\n      } else {\n        this._pc.addEventListener('iceconnectionstatechange', function () {\n          logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n\n          switch (_this2._pc.iceConnectionState) {\n            case 'checking':\n              _this2.emit('@connectionstatechange', 'connecting');\n\n              break;\n\n            case 'connected':\n            case 'completed':\n              _this2.emit('@connectionstatechange', 'connected');\n\n              break;\n\n            case 'failed':\n              _this2.emit('@connectionstatechange', 'failed');\n\n              break;\n\n            case 'disconnected':\n              _this2.emit('@connectionstatechange', 'disconnected');\n\n              break;\n\n            case 'closed':\n              _this2.emit('@connectionstatechange', 'closed');\n\n              break;\n          }\n        });\n      }\n    } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"updateIceServers\",\n    value: function () {\n      var _updateIceServers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(iceServers) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                throw new errors_1.UnsupportedError('not supported');\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function updateIceServers(_x) {\n        return _updateIceServers.apply(this, arguments);\n      }\n\n      return updateIceServers;\n    }()\n  }, {\n    key: \"restartIce\",\n    value: function () {\n      var _restartIce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(iceParameters) {\n        var offer, answer, _offer, _answer;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                logger.debug('restartIce()'); // Provide the remote SDP handler with new remote ICE parameters.\n\n                this._remoteSdp.updateIceParameters(iceParameters);\n\n                if (this._transportReady) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 4:\n                if (!(this._direction === 'send')) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                _context4.next = 7;\n                return this._pc.createOffer({\n                  iceRestart: true\n                });\n\n              case 7:\n                offer = _context4.sent;\n                logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context4.next = 11;\n                return this._pc.setLocalDescription(offer);\n\n              case 11:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context4.next = 15;\n                return this._pc.setRemoteDescription(answer);\n\n              case 15:\n                _context4.next = 27;\n                break;\n\n              case 17:\n                _offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', _offer);\n                _context4.next = 21;\n                return this._pc.setRemoteDescription(_offer);\n\n              case 21:\n                _context4.next = 23;\n                return this._pc.createAnswer();\n\n              case 23:\n                _answer = _context4.sent;\n                logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', _answer);\n                _context4.next = 27;\n                return this._pc.setLocalDescription(_answer);\n\n              case 27:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function restartIce(_x2) {\n        return _restartIce.apply(this, arguments);\n      }\n\n      return restartIce;\n    }()\n  }, {\n    key: \"getTransportStats\",\n    value: function () {\n      var _getTransportStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this._pc.getStats());\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getTransportStats() {\n        return _getTransportStats.apply(this, arguments);\n      }\n\n      return getTransportStats;\n    }()\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref2) {\n        var track, encodings, codecOptions, codec, sendingRtpParameters, sendingRemoteRtpParameters, transceiver, parameters, offer, localSdpObject, layers, localId, offerMediaObject, newEncodings, _iterator, _step, encoding, answer;\n\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                track = _ref2.track, encodings = _ref2.encodings, codecOptions = _ref2.codecOptions, codec = _ref2.codec;\n                this.assertSendDirection();\n                logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n                if (encodings) {\n                  encodings = utils.clone(encodings, []);\n\n                  if (encodings.length > 1) {\n                    encodings.forEach(function (encoding, idx) {\n                      encoding.rid = \"r\".concat(idx);\n                    }); // Clone the encodings and reverse them because Firefox likes them\n                    // from high to low.\n\n                    encodings.reverse();\n                  }\n                }\n\n                sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {}); // This may throw.\n\n                sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n                sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {}); // This may throw.\n\n                sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec); // NOTE: Firefox fails sometimes to properly anticipate the closed media\n                // section that it should use, so don't reuse closed media sections.\n                //   https://github.com/versatica/mediasoup-client/issues/104\n                //\n                // const mediaSectionIdx = this._remoteSdp!.getNextMediaSectionIdx();\n\n                transceiver = this._pc.addTransceiver(track, {\n                  direction: 'sendonly',\n                  streams: [this._sendStream]\n                }); // NOTE: This is not spec compliants. Encodings should be given in addTransceiver\n                // second argument, but Firefox does not support it.\n\n                if (!encodings) {\n                  _context6.next = 14;\n                  break;\n                }\n\n                parameters = transceiver.sender.getParameters();\n                parameters.encodings = encodings;\n                _context6.next = 14;\n                return transceiver.sender.setParameters(parameters);\n\n              case 14:\n                _context6.next = 16;\n                return this._pc.createOffer();\n\n              case 16:\n                offer = _context6.sent;\n                localSdpObject = sdpTransform.parse(offer.sdp); // In Firefox use DTLS role client even if we are the \"offerer\" since\n                // Firefox does not respect ICE-Lite.\n\n                if (this._transportReady) {\n                  _context6.next = 21;\n                  break;\n                }\n\n                _context6.next = 21;\n                return this.setupTransport({\n                  localDtlsRole: 'client',\n                  localSdpObject: localSdpObject\n                });\n\n              case 21:\n                layers = (0, scalabilityModes_1.parse)((encodings || [{}])[0].scalabilityMode);\n                logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context6.next = 25;\n                return this._pc.setLocalDescription(offer);\n\n              case 25:\n                // We can now get the transceiver.mid.\n                localId = transceiver.mid; // Set MID.\n\n                sendingRtpParameters.mid = localId;\n                localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n                offerMediaObject = localSdpObject.media[localSdpObject.media.length - 1]; // Set RTCP CNAME.\n\n                sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n                  offerMediaObject: offerMediaObject\n                }); // Set RTP encodings by parsing the SDP offer if no encodings are given.\n\n                if (!encodings) {\n                  sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({\n                    offerMediaObject: offerMediaObject\n                  });\n                } // Set RTP encodings by parsing the SDP offer and complete them with given\n                // one if just a single encoding has been given.\n                else if (encodings.length === 1) {\n                  newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({\n                    offerMediaObject: offerMediaObject\n                  });\n                  Object.assign(newEncodings[0], encodings[0]);\n                  sendingRtpParameters.encodings = newEncodings;\n                } // Otherwise if more than 1 encoding are given use them verbatim (but\n                // reverse them back since we reversed them above to satisfy Firefox).\n                else {\n                  sendingRtpParameters.encodings = encodings.reverse();\n                } // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n                // each encoding.\n\n\n                if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n                  _iterator = _createForOfIteratorHelper(sendingRtpParameters.encodings);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      encoding = _step.value;\n\n                      if (encoding.scalabilityMode) {\n                        encoding.scalabilityMode = \"L1T\".concat(layers.temporalLayers);\n                      } else {\n                        encoding.scalabilityMode = 'L1T3';\n                      }\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n                }\n\n                this._remoteSdp.send({\n                  offerMediaObject: offerMediaObject,\n                  offerRtpParameters: sendingRtpParameters,\n                  answerRtpParameters: sendingRemoteRtpParameters,\n                  codecOptions: codecOptions,\n                  extmapAllowMixed: true\n                });\n\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context6.next = 37;\n                return this._pc.setRemoteDescription(answer);\n\n              case 37:\n                // Store in the map.\n                this._mapMidTransceiver.set(localId, transceiver);\n\n                return _context6.abrupt(\"return\", {\n                  localId: localId,\n                  rtpParameters: sendingRtpParameters,\n                  rtpSender: transceiver.sender\n                });\n\n              case 39:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function send(_x3) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n  }, {\n    key: \"stopSending\",\n    value: function () {\n      var _stopSending = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(localId) {\n        var transceiver, offer, answer;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                logger.debug('stopSending() [localId:%s]', localId);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context7.next = 4;\n                  break;\n                }\n\n                throw new Error('associated transceiver not found');\n\n              case 4:\n                transceiver.sender.replaceTrack(null); // NOTE: Cannot use stop() the transceiver due to the the note above in\n                // send() method.\n                // try\n                // {\n                // \ttransceiver.stop();\n                // }\n                // catch (error)\n                // {}\n\n                this._pc.removeTrack(transceiver.sender); // NOTE: Cannot use closeMediaSection() due to the the note above in send()\n                // method.\n                // this._remoteSdp!.closeMediaSection(transceiver.mid);\n\n\n                this._remoteSdp.disableMediaSection(transceiver.mid);\n\n                _context7.next = 9;\n                return this._pc.createOffer();\n\n              case 9:\n                offer = _context7.sent;\n                logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context7.next = 13;\n                return this._pc.setLocalDescription(offer);\n\n              case 13:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context7.next = 17;\n                return this._pc.setRemoteDescription(answer);\n\n              case 17:\n                this._mapMidTransceiver.delete(localId);\n\n              case 18:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function stopSending(_x4) {\n        return _stopSending.apply(this, arguments);\n      }\n\n      return stopSending;\n    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"pauseSending\",\n    value: function () {\n      var _pauseSending = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(localId) {\n        var transceiver, offer, answer;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this.assertSendDirection();\n                logger.debug('pauseSending() [localId:%s]', localId);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context8.next = 5;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 5:\n                transceiver.direction = 'inactive';\n\n                this._remoteSdp.pauseMediaSection(localId);\n\n                _context8.next = 9;\n                return this._pc.createOffer();\n\n              case 9:\n                offer = _context8.sent;\n                logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context8.next = 13;\n                return this._pc.setLocalDescription(offer);\n\n              case 13:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context8.next = 17;\n                return this._pc.setRemoteDescription(answer);\n\n              case 17:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function pauseSending(_x5) {\n        return _pauseSending.apply(this, arguments);\n      }\n\n      return pauseSending;\n    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"resumeSending\",\n    value: function () {\n      var _resumeSending = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(localId) {\n        var transceiver, offer, answer;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                this.assertSendDirection();\n                logger.debug('resumeSending() [localId:%s]', localId);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context9.next = 5;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 5:\n                transceiver.direction = 'sendonly';\n\n                this._remoteSdp.resumeSendingMediaSection(localId);\n\n                _context9.next = 9;\n                return this._pc.createOffer();\n\n              case 9:\n                offer = _context9.sent;\n                logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context9.next = 13;\n                return this._pc.setLocalDescription(offer);\n\n              case 13:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context9.next = 17;\n                return this._pc.setRemoteDescription(answer);\n\n              case 17:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function resumeSending(_x6) {\n        return _resumeSending.apply(this, arguments);\n      }\n\n      return resumeSending;\n    }()\n  }, {\n    key: \"replaceTrack\",\n    value: function () {\n      var _replaceTrack = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(localId, track) {\n        var transceiver;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                this.assertSendDirection();\n\n                if (track) {\n                  logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n                } else {\n                  logger.debug('replaceTrack() [localId:%s, no track]', localId);\n                }\n\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context10.next = 5;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 5:\n                _context10.next = 7;\n                return transceiver.sender.replaceTrack(track);\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function replaceTrack(_x7, _x8) {\n        return _replaceTrack.apply(this, arguments);\n      }\n\n      return replaceTrack;\n    }()\n  }, {\n    key: \"setMaxSpatialLayer\",\n    value: function () {\n      var _setMaxSpatialLayer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(localId, spatialLayer) {\n        var transceiver, parameters, offer, answer;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                this.assertSendDirection();\n                logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context11.next = 5;\n                  break;\n                }\n\n                throw new Error('associated transceiver not found');\n\n              case 5:\n                parameters = transceiver.sender.getParameters(); // NOTE: We require encodings given from low to high, however Firefox\n                // requires them in reverse order, so do magic here.\n\n                spatialLayer = parameters.encodings.length - 1 - spatialLayer;\n                parameters.encodings.forEach(function (encoding, idx) {\n                  if (idx >= spatialLayer) {\n                    encoding.active = true;\n                  } else {\n                    encoding.active = false;\n                  }\n                });\n                _context11.next = 10;\n                return transceiver.sender.setParameters(parameters);\n\n              case 10:\n                this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n\n                _context11.next = 13;\n                return this._pc.createOffer();\n\n              case 13:\n                offer = _context11.sent;\n                logger.debug('setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context11.next = 17;\n                return this._pc.setLocalDescription(offer);\n\n              case 17:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context11.next = 21;\n                return this._pc.setRemoteDescription(answer);\n\n              case 21:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function setMaxSpatialLayer(_x9, _x10) {\n        return _setMaxSpatialLayer.apply(this, arguments);\n      }\n\n      return setMaxSpatialLayer;\n    }()\n  }, {\n    key: \"setRtpEncodingParameters\",\n    value: function () {\n      var _setRtpEncodingParameters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(localId, params) {\n        var transceiver, parameters, offer, answer;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                this.assertSendDirection();\n                logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context12.next = 5;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 5:\n                parameters = transceiver.sender.getParameters();\n                parameters.encodings.forEach(function (encoding, idx) {\n                  parameters.encodings[idx] = _objectSpread(_objectSpread({}, encoding), params);\n                });\n                _context12.next = 9;\n                return transceiver.sender.setParameters(parameters);\n\n              case 9:\n                this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n\n                _context12.next = 12;\n                return this._pc.createOffer();\n\n              case 12:\n                offer = _context12.sent;\n                logger.debug('setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context12.next = 16;\n                return this._pc.setLocalDescription(offer);\n\n              case 16:\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context12.next = 20;\n                return this._pc.setRemoteDescription(answer);\n\n              case 20:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function setRtpEncodingParameters(_x11, _x12) {\n        return _setRtpEncodingParameters.apply(this, arguments);\n      }\n\n      return setRtpEncodingParameters;\n    }()\n  }, {\n    key: \"getSenderStats\",\n    value: function () {\n      var _getSenderStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(localId) {\n        var transceiver;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                this.assertSendDirection();\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context13.next = 4;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 4:\n                return _context13.abrupt(\"return\", transceiver.sender.getStats());\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getSenderStats(_x13) {\n        return _getSenderStats.apply(this, arguments);\n      }\n\n      return getSenderStats;\n    }()\n  }, {\n    key: \"sendDataChannel\",\n    value: function () {\n      var _sendDataChannel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(_ref3) {\n        var ordered, maxPacketLifeTime, maxRetransmits, label, protocol, options, dataChannel, offer, localSdpObject, offerMediaObject, answer, sctpStreamParameters;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                ordered = _ref3.ordered, maxPacketLifeTime = _ref3.maxPacketLifeTime, maxRetransmits = _ref3.maxRetransmits, label = _ref3.label, protocol = _ref3.protocol;\n                this.assertSendDirection();\n                options = {\n                  negotiated: true,\n                  id: this._nextSendSctpStreamId,\n                  ordered: ordered,\n                  maxPacketLifeTime: maxPacketLifeTime,\n                  maxRetransmits: maxRetransmits,\n                  protocol: protocol\n                };\n                logger.debug('sendDataChannel() [options:%o]', options);\n                dataChannel = this._pc.createDataChannel(label, options); // Increase next id.\n\n                this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS; // If this is the first DataChannel we need to create the SDP answer with\n                // m=application section.\n\n                if (this._hasDataChannelMediaSection) {\n                  _context14.next = 24;\n                  break;\n                }\n\n                _context14.next = 9;\n                return this._pc.createOffer();\n\n              case 9:\n                offer = _context14.sent;\n                localSdpObject = sdpTransform.parse(offer.sdp);\n                offerMediaObject = localSdpObject.media.find(function (m) {\n                  return m.type === 'application';\n                });\n\n                if (this._transportReady) {\n                  _context14.next = 15;\n                  break;\n                }\n\n                _context14.next = 15;\n                return this.setupTransport({\n                  localDtlsRole: 'client',\n                  localSdpObject: localSdpObject\n                });\n\n              case 15:\n                logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n                _context14.next = 18;\n                return this._pc.setLocalDescription(offer);\n\n              case 18:\n                this._remoteSdp.sendSctpAssociation({\n                  offerMediaObject: offerMediaObject\n                });\n\n                answer = {\n                  type: 'answer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n                _context14.next = 23;\n                return this._pc.setRemoteDescription(answer);\n\n              case 23:\n                this._hasDataChannelMediaSection = true;\n\n              case 24:\n                sctpStreamParameters = {\n                  streamId: options.id,\n                  ordered: options.ordered,\n                  maxPacketLifeTime: options.maxPacketLifeTime,\n                  maxRetransmits: options.maxRetransmits\n                };\n                return _context14.abrupt(\"return\", {\n                  dataChannel: dataChannel,\n                  sctpStreamParameters: sctpStreamParameters\n                });\n\n              case 26:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function sendDataChannel(_x14) {\n        return _sendDataChannel.apply(this, arguments);\n      }\n\n      return sendDataChannel;\n    }()\n  }, {\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      optionsList) {\n        var _this3 = this;\n\n        var results, mapLocalId, _iterator2, _step2, options, trackId, kind, rtpParameters, streamId, localId, offer, answer, localSdpObject, _iterator3, _step3, _loop, _iterator4, _step4, _loop2;\n\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                this.assertRecvDirection();\n                results = [];\n                mapLocalId = new Map();\n                _iterator2 = _createForOfIteratorHelper(optionsList);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    options = _step2.value;\n                    trackId = options.trackId, kind = options.kind, rtpParameters = options.rtpParameters, streamId = options.streamId;\n                    logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n                    localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n                    mapLocalId.set(trackId, localId);\n\n                    this._remoteSdp.receive({\n                      mid: localId,\n                      kind: kind,\n                      offerRtpParameters: rtpParameters,\n                      streamId: streamId || rtpParameters.rtcp.cname,\n                      trackId: trackId\n                    });\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n                _context15.next = 9;\n                return this._pc.setRemoteDescription(offer);\n\n              case 9:\n                _context15.next = 11;\n                return this._pc.createAnswer();\n\n              case 11:\n                answer = _context15.sent;\n                localSdpObject = sdpTransform.parse(answer.sdp);\n                _iterator3 = _createForOfIteratorHelper(optionsList);\n\n                try {\n                  _loop = function _loop() {\n                    var options = _step3.value;\n                    var trackId = options.trackId,\n                        rtpParameters = options.rtpParameters;\n                    var localId = mapLocalId.get(trackId);\n                    var answerMediaObject = localSdpObject.media.find(function (m) {\n                      return String(m.mid) === localId;\n                    }); // May need to modify codec parameters in the answer based on codec\n                    // parameters in the offer.\n\n                    sdpCommonUtils.applyCodecParameters({\n                      offerRtpParameters: rtpParameters,\n                      answerMediaObject: answerMediaObject\n                    });\n                    answer = {\n                      type: 'answer',\n                      sdp: sdpTransform.write(localSdpObject)\n                    };\n                  };\n\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    _loop();\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n\n                if (this._transportReady) {\n                  _context15.next = 18;\n                  break;\n                }\n\n                _context15.next = 18;\n                return this.setupTransport({\n                  localDtlsRole: 'client',\n                  localSdpObject: localSdpObject\n                });\n\n              case 18:\n                logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n                _context15.next = 21;\n                return this._pc.setLocalDescription(answer);\n\n              case 21:\n                _iterator4 = _createForOfIteratorHelper(optionsList);\n\n                try {\n                  _loop2 = function _loop2() {\n                    var options = _step4.value;\n                    var trackId = options.trackId;\n                    var localId = mapLocalId.get(trackId);\n\n                    var transceiver = _this3._pc.getTransceivers().find(function (t) {\n                      return t.mid === localId;\n                    });\n\n                    if (!transceiver) {\n                      throw new Error('new RTCRtpTransceiver not found');\n                    } // Store in the map.\n\n\n                    _this3._mapMidTransceiver.set(localId, transceiver);\n\n                    results.push({\n                      localId: localId,\n                      track: transceiver.receiver.track,\n                      rtpReceiver: transceiver.receiver\n                    });\n                  };\n\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    _loop2();\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n\n                return _context15.abrupt(\"return\", results);\n\n              case 24:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function receive(_x15) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }()\n  }, {\n    key: \"stopReceiving\",\n    value: function () {\n      var _stopReceiving = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(localIds) {\n        var _iterator5, _step5, localId, transceiver, offer, answer, _iterator6, _step6, _localId;\n\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                this.assertRecvDirection();\n                _iterator5 = _createForOfIteratorHelper(localIds);\n                _context16.prev = 2;\n\n                _iterator5.s();\n\n              case 4:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context16.next = 13;\n                  break;\n                }\n\n                localId = _step5.value;\n                logger.debug('stopReceiving() [localId:%s]', localId);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context16.next = 10;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 10:\n                this._remoteSdp.closeMediaSection(transceiver.mid);\n\n              case 11:\n                _context16.next = 4;\n                break;\n\n              case 13:\n                _context16.next = 18;\n                break;\n\n              case 15:\n                _context16.prev = 15;\n                _context16.t0 = _context16[\"catch\"](2);\n\n                _iterator5.e(_context16.t0);\n\n              case 18:\n                _context16.prev = 18;\n\n                _iterator5.f();\n\n                return _context16.finish(18);\n\n              case 21:\n                offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n                _context16.next = 25;\n                return this._pc.setRemoteDescription(offer);\n\n              case 25:\n                _context16.next = 27;\n                return this._pc.createAnswer();\n\n              case 27:\n                answer = _context16.sent;\n                logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n                _context16.next = 31;\n                return this._pc.setLocalDescription(answer);\n\n              case 31:\n                _iterator6 = _createForOfIteratorHelper(localIds);\n\n                try {\n                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                    _localId = _step6.value;\n\n                    this._mapMidTransceiver.delete(_localId);\n                  }\n                } catch (err) {\n                  _iterator6.e(err);\n                } finally {\n                  _iterator6.f();\n                }\n\n              case 33:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this, [[2, 15, 18, 21]]);\n      }));\n\n      function stopReceiving(_x16) {\n        return _stopReceiving.apply(this, arguments);\n      }\n\n      return stopReceiving;\n    }()\n  }, {\n    key: \"pauseReceiving\",\n    value: function () {\n      var _pauseReceiving = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(localIds) {\n        var _iterator7, _step7, localId, transceiver, offer, answer;\n\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                this.assertRecvDirection();\n                _iterator7 = _createForOfIteratorHelper(localIds);\n                _context17.prev = 2;\n\n                _iterator7.s();\n\n              case 4:\n                if ((_step7 = _iterator7.n()).done) {\n                  _context17.next = 14;\n                  break;\n                }\n\n                localId = _step7.value;\n                logger.debug('pauseReceiving() [localId:%s]', localId);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context17.next = 10;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 10:\n                transceiver.direction = 'inactive';\n\n                this._remoteSdp.pauseMediaSection(localId);\n\n              case 12:\n                _context17.next = 4;\n                break;\n\n              case 14:\n                _context17.next = 19;\n                break;\n\n              case 16:\n                _context17.prev = 16;\n                _context17.t0 = _context17[\"catch\"](2);\n\n                _iterator7.e(_context17.t0);\n\n              case 19:\n                _context17.prev = 19;\n\n                _iterator7.f();\n\n                return _context17.finish(19);\n\n              case 22:\n                offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n                _context17.next = 26;\n                return this._pc.setRemoteDescription(offer);\n\n              case 26:\n                _context17.next = 28;\n                return this._pc.createAnswer();\n\n              case 28:\n                answer = _context17.sent;\n                logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n                _context17.next = 32;\n                return this._pc.setLocalDescription(answer);\n\n              case 32:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this, [[2, 16, 19, 22]]);\n      }));\n\n      function pauseReceiving(_x17) {\n        return _pauseReceiving.apply(this, arguments);\n      }\n\n      return pauseReceiving;\n    }()\n  }, {\n    key: \"resumeReceiving\",\n    value: function () {\n      var _resumeReceiving = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(localIds) {\n        var _iterator8, _step8, localId, transceiver, offer, answer;\n\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                this.assertRecvDirection();\n                _iterator8 = _createForOfIteratorHelper(localIds);\n                _context18.prev = 2;\n\n                _iterator8.s();\n\n              case 4:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context18.next = 14;\n                  break;\n                }\n\n                localId = _step8.value;\n                logger.debug('resumeReceiving() [localId:%s]', localId);\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context18.next = 10;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 10:\n                transceiver.direction = 'recvonly';\n\n                this._remoteSdp.resumeReceivingMediaSection(localId);\n\n              case 12:\n                _context18.next = 4;\n                break;\n\n              case 14:\n                _context18.next = 19;\n                break;\n\n              case 16:\n                _context18.prev = 16;\n                _context18.t0 = _context18[\"catch\"](2);\n\n                _iterator8.e(_context18.t0);\n\n              case 19:\n                _context18.prev = 19;\n\n                _iterator8.f();\n\n                return _context18.finish(19);\n\n              case 22:\n                offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n                _context18.next = 26;\n                return this._pc.setRemoteDescription(offer);\n\n              case 26:\n                _context18.next = 28;\n                return this._pc.createAnswer();\n\n              case 28:\n                answer = _context18.sent;\n                logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n                _context18.next = 32;\n                return this._pc.setLocalDescription(answer);\n\n              case 32:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this, [[2, 16, 19, 22]]);\n      }));\n\n      function resumeReceiving(_x18) {\n        return _resumeReceiving.apply(this, arguments);\n      }\n\n      return resumeReceiving;\n    }()\n  }, {\n    key: \"getReceiverStats\",\n    value: function () {\n      var _getReceiverStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(localId) {\n        var transceiver;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                this.assertRecvDirection();\n                transceiver = this._mapMidTransceiver.get(localId);\n\n                if (transceiver) {\n                  _context19.next = 4;\n                  break;\n                }\n\n                throw new Error('associated RTCRtpTransceiver not found');\n\n              case 4:\n                return _context19.abrupt(\"return\", transceiver.receiver.getStats());\n\n              case 5:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function getReceiverStats(_x19) {\n        return _getReceiverStats.apply(this, arguments);\n      }\n\n      return getReceiverStats;\n    }()\n  }, {\n    key: \"receiveDataChannel\",\n    value: function () {\n      var _receiveDataChannel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(_ref4) {\n        var sctpStreamParameters, label, protocol, streamId, ordered, maxPacketLifeTime, maxRetransmits, options, dataChannel, offer, _answer2, _localSdpObject;\n\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                sctpStreamParameters = _ref4.sctpStreamParameters, label = _ref4.label, protocol = _ref4.protocol;\n                this.assertRecvDirection();\n                streamId = sctpStreamParameters.streamId, ordered = sctpStreamParameters.ordered, maxPacketLifeTime = sctpStreamParameters.maxPacketLifeTime, maxRetransmits = sctpStreamParameters.maxRetransmits;\n                options = {\n                  negotiated: true,\n                  id: streamId,\n                  ordered: ordered,\n                  maxPacketLifeTime: maxPacketLifeTime,\n                  maxRetransmits: maxRetransmits,\n                  protocol: protocol\n                };\n                logger.debug('receiveDataChannel() [options:%o]', options);\n                dataChannel = this._pc.createDataChannel(label, options); // If this is the first DataChannel we need to create the SDP offer with\n                // m=application section.\n\n                if (this._hasDataChannelMediaSection) {\n                  _context20.next = 23;\n                  break;\n                }\n\n                this._remoteSdp.receiveSctpAssociation();\n\n                offer = {\n                  type: 'offer',\n                  sdp: this._remoteSdp.getSdp()\n                };\n                logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n                _context20.next = 12;\n                return this._pc.setRemoteDescription(offer);\n\n              case 12:\n                _context20.next = 14;\n                return this._pc.createAnswer();\n\n              case 14:\n                _answer2 = _context20.sent;\n\n                if (this._transportReady) {\n                  _context20.next = 19;\n                  break;\n                }\n\n                _localSdpObject = sdpTransform.parse(_answer2.sdp);\n                _context20.next = 19;\n                return this.setupTransport({\n                  localDtlsRole: 'client',\n                  localSdpObject: _localSdpObject\n                });\n\n              case 19:\n                logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', _answer2);\n                _context20.next = 22;\n                return this._pc.setLocalDescription(_answer2);\n\n              case 22:\n                this._hasDataChannelMediaSection = true;\n\n              case 23:\n                return _context20.abrupt(\"return\", {\n                  dataChannel: dataChannel\n                });\n\n              case 24:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function receiveDataChannel(_x20) {\n        return _receiveDataChannel.apply(this, arguments);\n      }\n\n      return receiveDataChannel;\n    }()\n  }, {\n    key: \"setupTransport\",\n    value: function () {\n      var _setupTransport = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(_ref5) {\n        var _this4 = this;\n\n        var localDtlsRole, localSdpObject, dtlsParameters;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                localDtlsRole = _ref5.localDtlsRole, localSdpObject = _ref5.localSdpObject;\n\n                if (!localSdpObject) {\n                  localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n                } // Get our local DTLS parameters.\n\n\n                dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n                  sdpObject: localSdpObject\n                }); // Set our DTLS role.\n\n                dtlsParameters.role = localDtlsRole; // Update the remote DTLS role in the SDP.\n\n                this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client'); // Need to tell the remote transport about our parameters.\n\n\n                _context21.next = 7;\n                return new Promise(function (resolve, reject) {\n                  _this4.safeEmit('@connect', {\n                    dtlsParameters: dtlsParameters\n                  }, resolve, reject);\n                });\n\n              case 7:\n                this._transportReady = true;\n\n              case 8:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function setupTransport(_x21) {\n        return _setupTransport.apply(this, arguments);\n      }\n\n      return setupTransport;\n    }()\n  }, {\n    key: \"assertSendDirection\",\n    value: function assertSendDirection() {\n      if (this._direction !== 'send') {\n        throw new Error('method can just be called for handlers with \"send\" direction');\n      }\n    }\n  }, {\n    key: \"assertRecvDirection\",\n    value: function assertRecvDirection() {\n      if (this._direction !== 'recv') {\n        throw new Error('method can just be called for handlers with \"recv\" direction');\n      }\n    }\n  }], [{\n    key: \"createFactory\",\n    value:\n    /**\n     * Creates a factory function.\n     */\n    function createFactory() {\n      return function () {\n        return new Firefox60();\n      };\n    }\n  }]);\n\n  return Firefox60;\n}(HandlerInterface_1.HandlerInterface);\n\nexports.Firefox60 = Firefox60;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","Firefox60","sdpTransform","require","Logger_1","errors_1","utils","ortc","sdpCommonUtils","sdpUnifiedPlanUtils","HandlerInterface_1","RemoteSdp_1","scalabilityModes_1","logger","Logger","SCTP_NUM_STREAMS","OS","MIS","_mapMidTransceiver","Map","_sendStream","MediaStream","_hasDataChannelMediaSection","_nextSendSctpStreamId","_transportReady","debug","_pc","close","error","emit","pc","RTCPeerConnection","iceServers","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","canvas","document","createElement","getContext","fakeStream","captureStream","fakeVideoTrack","getVideoTracks","addTransceiver","direction","videoTransceiver","parameters","sender","getParameters","encodings","rid","maxBitrate","setParameters","createOffer","offer","remove","stop","sdpObject","parse","sdp","nativeRtpCapabilities","extractRtpCapabilities","error2","numStreams","iceParameters","iceCandidates","dtlsParameters","sctpParameters","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","_direction","_remoteSdp","RemoteSdp","_sendingRtpParametersByKind","audio","getSendingRtpParameters","video","_sendingRemoteRtpParametersByKind","getSendingRemoteRtpParameters","connectionState","addEventListener","warn","iceConnectionState","UnsupportedError","updateIceParameters","iceRestart","setLocalDescription","answer","type","getSdp","setRemoteDescription","createAnswer","getStats","track","codecOptions","codec","assertSendDirection","kind","id","clone","length","forEach","encoding","idx","reverse","sendingRtpParameters","codecs","reduceCodecs","sendingRemoteRtpParameters","transceiver","streams","localSdpObject","setupTransport","localDtlsRole","layers","scalabilityMode","localId","mid","localDescription","offerMediaObject","media","rtcp","cname","getCname","getRtpEncodings","newEncodings","assign","mimeType","toLowerCase","temporalLayers","send","offerRtpParameters","answerRtpParameters","extmapAllowMixed","set","rtpParameters","rtpSender","Error","replaceTrack","removeTrack","disableMediaSection","delete","pauseMediaSection","resumeSendingMediaSection","spatialLayer","active","muxMediaSectionSimulcast","params","ordered","maxPacketLifeTime","maxRetransmits","label","protocol","options","negotiated","dataChannel","createDataChannel","find","sendSctpAssociation","sctpStreamParameters","streamId","optionsList","assertRecvDirection","results","mapLocalId","trackId","String","size","receive","answerMediaObject","applyCodecParameters","write","getTransceivers","t","push","receiver","rtpReceiver","localIds","closeMediaSection","resumeReceivingMediaSection","receiveSctpAssociation","extractDtlsParameters","role","updateDtlsRole","Promise","resolve","reject","safeEmit","HandlerInterface"],"sources":["/home/runner/work/watchparty/watchparty/node_modules/mediasoup-client/lib/handlers/Firefox60.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Firefox60 = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../Logger\");\nconst errors_1 = require(\"../errors\");\nconst utils = __importStar(require(\"../utils\"));\nconst ortc = __importStar(require(\"../ortc\"));\nconst sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\nconst sdpUnifiedPlanUtils = __importStar(require(\"./sdp/unifiedPlanUtils\"));\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\nconst logger = new Logger_1.Logger('Firefox60');\nconst SCTP_NUM_STREAMS = { OS: 16, MIS: 2048 };\nclass Firefox60 extends HandlerInterface_1.HandlerInterface {\n    /**\n     * Creates a factory function.\n     */\n    static createFactory() {\n        return () => new Firefox60();\n    }\n    constructor() {\n        super();\n        // Map of RTCTransceivers indexed by MID.\n        this._mapMidTransceiver = new Map();\n        // Local stream for sending.\n        this._sendStream = new MediaStream();\n        // Whether a DataChannel m=application section has been created.\n        this._hasDataChannelMediaSection = false;\n        // Sending DataChannel id value counter. Incremented for each new DataChannel.\n        this._nextSendSctpStreamId = 0;\n        // Got transport local and remote parameters.\n        this._transportReady = false;\n    }\n    get name() {\n        return 'Firefox60';\n    }\n    close() {\n        logger.debug('close()');\n        // Close RTCPeerConnection.\n        if (this._pc) {\n            try {\n                this._pc.close();\n            }\n            catch (error) { }\n        }\n        this.emit('@close');\n    }\n    async getNativeRtpCapabilities() {\n        logger.debug('getNativeRtpCapabilities()');\n        const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require'\n        });\n        // NOTE: We need to add a real video track to get the RID extension mapping.\n        const canvas = document.createElement('canvas');\n        // NOTE: Otherwise Firefox fails in next line.\n        canvas.getContext('2d');\n        const fakeStream = canvas.captureStream();\n        const fakeVideoTrack = fakeStream.getVideoTracks()[0];\n        try {\n            pc.addTransceiver('audio', { direction: 'sendrecv' });\n            const videoTransceiver = pc.addTransceiver(fakeVideoTrack, { direction: 'sendrecv' });\n            const parameters = videoTransceiver.sender.getParameters();\n            const encodings = [\n                { rid: 'r0', maxBitrate: 100000 },\n                { rid: 'r1', maxBitrate: 500000 }\n            ];\n            parameters.encodings = encodings;\n            await videoTransceiver.sender.setParameters(parameters);\n            const offer = await pc.createOffer();\n            try {\n                canvas.remove();\n            }\n            catch (error) { }\n            try {\n                fakeVideoTrack.stop();\n            }\n            catch (error) { }\n            try {\n                pc.close();\n            }\n            catch (error) { }\n            const sdpObject = sdpTransform.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            return nativeRtpCapabilities;\n        }\n        catch (error) {\n            try {\n                canvas.remove();\n            }\n            catch (error2) { }\n            try {\n                fakeVideoTrack.stop();\n            }\n            catch (error2) { }\n            try {\n                pc.close();\n            }\n            catch (error2) { }\n            throw error;\n        }\n    }\n    async getNativeSctpCapabilities() {\n        logger.debug('getNativeSctpCapabilities()');\n        return {\n            numStreams: SCTP_NUM_STREAMS\n        };\n    }\n    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger.debug('run()');\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n            iceParameters,\n            iceCandidates,\n            dtlsParameters,\n            sctpParameters\n        });\n        this._sendingRtpParametersByKind =\n            {\n                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n            };\n        this._sendingRemoteRtpParametersByKind =\n            {\n                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n            };\n        this._pc = new RTCPeerConnection({\n            iceServers: iceServers || [],\n            iceTransportPolicy: iceTransportPolicy || 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            ...additionalSettings\n        }, proprietaryConstraints);\n        if (this._pc.connectionState) {\n            this._pc.addEventListener('connectionstatechange', () => {\n                this.emit('@connectionstatechange', this._pc.connectionState);\n            });\n        }\n        else {\n            this._pc.addEventListener('iceconnectionstatechange', () => {\n                logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n                switch (this._pc.iceConnectionState) {\n                    case 'checking':\n                        this.emit('@connectionstatechange', 'connecting');\n                        break;\n                    case 'connected':\n                    case 'completed':\n                        this.emit('@connectionstatechange', 'connected');\n                        break;\n                    case 'failed':\n                        this.emit('@connectionstatechange', 'failed');\n                        break;\n                    case 'disconnected':\n                        this.emit('@connectionstatechange', 'disconnected');\n                        break;\n                    case 'closed':\n                        this.emit('@connectionstatechange', 'closed');\n                        break;\n                }\n            });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async updateIceServers(iceServers) {\n        // NOTE: Firefox does not implement pc.setConfiguration().\n        throw new errors_1.UnsupportedError('not supported');\n    }\n    async restartIce(iceParameters) {\n        logger.debug('restartIce()');\n        // Provide the remote SDP handler with new remote ICE parameters.\n        this._remoteSdp.updateIceParameters(iceParameters);\n        if (!this._transportReady) {\n            return;\n        }\n        if (this._direction === 'send') {\n            const offer = await this._pc.createOffer({ iceRestart: true });\n            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n        }\n        else {\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n        }\n    }\n    async getTransportStats() {\n        return this._pc.getStats();\n    }\n    async send({ track, encodings, codecOptions, codec }) {\n        this.assertSendDirection();\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n        if (encodings) {\n            encodings = utils.clone(encodings, []);\n            if (encodings.length > 1) {\n                encodings.forEach((encoding, idx) => {\n                    encoding.rid = `r${idx}`;\n                });\n                // Clone the encodings and reverse them because Firefox likes them\n                // from high to low.\n                encodings.reverse();\n            }\n        }\n        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n        // This may throw.\n        sendingRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n        // This may throw.\n        sendingRemoteRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n        // NOTE: Firefox fails sometimes to properly anticipate the closed media\n        // section that it should use, so don't reuse closed media sections.\n        //   https://github.com/versatica/mediasoup-client/issues/104\n        //\n        // const mediaSectionIdx = this._remoteSdp!.getNextMediaSectionIdx();\n        const transceiver = this._pc.addTransceiver(track, { direction: 'sendonly', streams: [this._sendStream] });\n        // NOTE: This is not spec compliants. Encodings should be given in addTransceiver\n        // second argument, but Firefox does not support it.\n        if (encodings) {\n            const parameters = transceiver.sender.getParameters();\n            parameters.encodings = encodings;\n            await transceiver.sender.setParameters(parameters);\n        }\n        const offer = await this._pc.createOffer();\n        let localSdpObject = sdpTransform.parse(offer.sdp);\n        // In Firefox use DTLS role client even if we are the \"offerer\" since\n        // Firefox does not respect ICE-Lite.\n        if (!this._transportReady) {\n            await this.setupTransport({ localDtlsRole: 'client', localSdpObject });\n        }\n        const layers = (0, scalabilityModes_1.parse)((encodings || [{}])[0].scalabilityMode);\n        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        // We can now get the transceiver.mid.\n        const localId = transceiver.mid;\n        // Set MID.\n        sendingRtpParameters.mid = localId;\n        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        const offerMediaObject = localSdpObject.media[localSdpObject.media.length - 1];\n        // Set RTCP CNAME.\n        sendingRtpParameters.rtcp.cname =\n            sdpCommonUtils.getCname({ offerMediaObject });\n        // Set RTP encodings by parsing the SDP offer if no encodings are given.\n        if (!encodings) {\n            sendingRtpParameters.encodings =\n                sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n        }\n        // Set RTP encodings by parsing the SDP offer and complete them with given\n        // one if just a single encoding has been given.\n        else if (encodings.length === 1) {\n            const newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n            Object.assign(newEncodings[0], encodings[0]);\n            sendingRtpParameters.encodings = newEncodings;\n        }\n        // Otherwise if more than 1 encoding are given use them verbatim (but\n        // reverse them back since we reversed them above to satisfy Firefox).\n        else {\n            sendingRtpParameters.encodings = encodings.reverse();\n        }\n        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n        // each encoding.\n        if (sendingRtpParameters.encodings.length > 1 &&\n            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n            for (const encoding of sendingRtpParameters.encodings) {\n                if (encoding.scalabilityMode) {\n                    encoding.scalabilityMode = `L1T${layers.temporalLayers}`;\n                }\n                else {\n                    encoding.scalabilityMode = 'L1T3';\n                }\n            }\n        }\n        this._remoteSdp.send({\n            offerMediaObject,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions,\n            extmapAllowMixed: true\n        });\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        // Store in the map.\n        this._mapMidTransceiver.set(localId, transceiver);\n        return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender\n        };\n    }\n    async stopSending(localId) {\n        logger.debug('stopSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated transceiver not found');\n        }\n        transceiver.sender.replaceTrack(null);\n        // NOTE: Cannot use stop() the transceiver due to the the note above in\n        // send() method.\n        // try\n        // {\n        // \ttransceiver.stop();\n        // }\n        // catch (error)\n        // {}\n        this._pc.removeTrack(transceiver.sender);\n        // NOTE: Cannot use closeMediaSection() due to the the note above in send()\n        // method.\n        // this._remoteSdp!.closeMediaSection(transceiver.mid);\n        this._remoteSdp.disableMediaSection(transceiver.mid);\n        const offer = await this._pc.createOffer();\n        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        this._mapMidTransceiver.delete(localId);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async pauseSending(localId) {\n        this.assertSendDirection();\n        logger.debug('pauseSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        transceiver.direction = 'inactive';\n        this._remoteSdp.pauseMediaSection(localId);\n        const offer = await this._pc.createOffer();\n        logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async resumeSending(localId) {\n        this.assertSendDirection();\n        logger.debug('resumeSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        transceiver.direction = 'sendonly';\n        this._remoteSdp.resumeSendingMediaSection(localId);\n        const offer = await this._pc.createOffer();\n        logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async replaceTrack(localId, track) {\n        this.assertSendDirection();\n        if (track) {\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n        }\n        else {\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\n        }\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        await transceiver.sender.replaceTrack(track);\n    }\n    async setMaxSpatialLayer(localId, spatialLayer) {\n        this.assertSendDirection();\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated transceiver not found');\n        }\n        const parameters = transceiver.sender.getParameters();\n        // NOTE: We require encodings given from low to high, however Firefox\n        // requires them in reverse order, so do magic here.\n        spatialLayer = parameters.encodings.length - 1 - spatialLayer;\n        parameters.encodings.forEach((encoding, idx) => {\n            if (idx >= spatialLayer) {\n                encoding.active = true;\n            }\n            else {\n                encoding.active = false;\n            }\n        });\n        await transceiver.sender.setParameters(parameters);\n        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n        const offer = await this._pc.createOffer();\n        logger.debug('setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async setRtpEncodingParameters(localId, params) {\n        this.assertSendDirection();\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = { ...encoding, ...params };\n        });\n        await transceiver.sender.setParameters(parameters);\n        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n        const offer = await this._pc.createOffer();\n        logger.debug('setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async getSenderStats(localId) {\n        this.assertSendDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        return transceiver.sender.getStats();\n    }\n    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n        this.assertSendDirection();\n        const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('sendDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // Increase next id.\n        this._nextSendSctpStreamId =\n            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n        // If this is the first DataChannel we need to create the SDP answer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            const offer = await this._pc.createOffer();\n            const localSdpObject = sdpTransform.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media\n                .find((m) => m.type === 'application');\n            if (!this._transportReady) {\n                await this.setupTransport({ localDtlsRole: 'client', localSdpObject });\n            }\n            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n        };\n        return { dataChannel, sctpStreamParameters };\n    }\n    async receive(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    optionsList) {\n        this.assertRecvDirection();\n        const results = [];\n        const mapLocalId = new Map();\n        for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n            const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n            mapLocalId.set(trackId, localId);\n            this._remoteSdp.receive({\n                mid: localId,\n                kind,\n                offerRtpParameters: rtpParameters,\n                streamId: streamId || rtpParameters.rtcp.cname,\n                trackId\n            });\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        let answer = await this._pc.createAnswer();\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        for (const options of optionsList) {\n            const { trackId, rtpParameters } = options;\n            const localId = mapLocalId.get(trackId);\n            const answerMediaObject = localSdpObject.media\n                .find((m) => String(m.mid) === localId);\n            // May need to modify codec parameters in the answer based on codec\n            // parameters in the offer.\n            sdpCommonUtils.applyCodecParameters({\n                offerRtpParameters: rtpParameters,\n                answerMediaObject\n            });\n            answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n        }\n        if (!this._transportReady) {\n            await this.setupTransport({ localDtlsRole: 'client', localSdpObject });\n        }\n        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const options of optionsList) {\n            const { trackId } = options;\n            const localId = mapLocalId.get(trackId);\n            const transceiver = this._pc.getTransceivers()\n                .find((t) => t.mid === localId);\n            if (!transceiver) {\n                throw new Error('new RTCRtpTransceiver not found');\n            }\n            // Store in the map.\n            this._mapMidTransceiver.set(localId, transceiver);\n            results.push({\n                localId,\n                track: transceiver.receiver.track,\n                rtpReceiver: transceiver.receiver\n            });\n        }\n        return results;\n    }\n    async stopReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('stopReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n                throw new Error('associated RTCRtpTransceiver not found');\n            }\n            this._remoteSdp.closeMediaSection(transceiver.mid);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const localId of localIds) {\n            this._mapMidTransceiver.delete(localId);\n        }\n    }\n    async pauseReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('pauseReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n                throw new Error('associated RTCRtpTransceiver not found');\n            }\n            transceiver.direction = 'inactive';\n            this._remoteSdp.pauseMediaSection(localId);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async resumeReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('resumeReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n                throw new Error('associated RTCRtpTransceiver not found');\n            }\n            transceiver.direction = 'recvonly';\n            this._remoteSdp.resumeReceivingMediaSection(localId);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async getReceiverStats(localId) {\n        this.assertRecvDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        return transceiver.receiver.getStats();\n    }\n    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {\n        this.assertRecvDirection();\n        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n        const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('receiveDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // If this is the first DataChannel we need to create the SDP offer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            if (!this._transportReady) {\n                const localSdpObject = sdpTransform.parse(answer.sdp);\n                await this.setupTransport({ localDtlsRole: 'client', localSdpObject });\n            }\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        return { dataChannel };\n    }\n    async setupTransport({ localDtlsRole, localSdpObject }) {\n        if (!localSdpObject) {\n            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        }\n        // Get our local DTLS parameters.\n        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n        // Set our DTLS role.\n        dtlsParameters.role = localDtlsRole;\n        // Update the remote DTLS role in the SDP.\n        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n        // Need to tell the remote transport about our parameters.\n        await new Promise((resolve, reject) => {\n            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);\n        });\n        this._transportReady = true;\n    }\n    assertSendDirection() {\n        if (this._direction !== 'send') {\n            throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n    }\n    assertRecvDirection() {\n        if (this._direction !== 'recv') {\n            throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n    }\n}\nexports.Firefox60 = Firefox60;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}