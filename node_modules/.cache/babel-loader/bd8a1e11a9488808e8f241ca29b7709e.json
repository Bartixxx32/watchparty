{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/home/runner/work/watchparty/watchparty/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addLegacySimulcast = exports.getRtpEncodings = void 0;\n\nfunction getRtpEncodings(_ref) {\n  var offerMediaObject = _ref.offerMediaObject,\n      track = _ref.track;\n  // First media SSRC (or the only one).\n  var firstSsrc;\n  var ssrcs = new Set();\n\n  var _iterator = _createForOfIteratorHelper(offerMediaObject.ssrcs || []),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var line = _step.value;\n\n      if (line.attribute !== 'msid') {\n        continue;\n      }\n\n      var trackId = line.value.split(' ')[1];\n\n      if (trackId === track.id) {\n        var ssrc = line.id;\n        ssrcs.add(ssrc);\n\n        if (!firstSsrc) {\n          firstSsrc = ssrc;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (ssrcs.size === 0) {\n    throw new Error(\"a=ssrc line with msid information not found [track.id:\".concat(track.id, \"]\"));\n  }\n\n  var ssrcToRtxSsrc = new Map(); // First assume RTX is used.\n\n  var _iterator2 = _createForOfIteratorHelper(offerMediaObject.ssrcGroups || []),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _line = _step2.value;\n\n      if (_line.semantics !== 'FID') {\n        continue;\n      }\n\n      var _line$ssrcs$split = _line.ssrcs.split(/\\s+/),\n          _line$ssrcs$split2 = _slicedToArray(_line$ssrcs$split, 2),\n          _ssrc = _line$ssrcs$split2[0],\n          rtxSsrc = _line$ssrcs$split2[1];\n\n      _ssrc = Number(_ssrc);\n      rtxSsrc = Number(rtxSsrc);\n\n      if (ssrcs.has(_ssrc)) {\n        // Remove both the SSRC and RTX SSRC from the set so later we know that they\n        // are already handled.\n        ssrcs.delete(_ssrc);\n        ssrcs.delete(rtxSsrc); // Add to the map.\n\n        ssrcToRtxSsrc.set(_ssrc, rtxSsrc);\n      }\n    } // If the set of SSRCs is not empty it means that RTX is not being used, so take\n    // media SSRCs from there.\n\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var _iterator3 = _createForOfIteratorHelper(ssrcs),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _ssrc2 = _step3.value;\n      // Add to the map.\n      ssrcToRtxSsrc.set(_ssrc2, null);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var encodings = [];\n\n  var _iterator4 = _createForOfIteratorHelper(ssrcToRtxSsrc),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n          _ssrc3 = _step4$value[0],\n          _rtxSsrc = _step4$value[1];\n\n      var encoding = {\n        ssrc: _ssrc3\n      };\n\n      if (_rtxSsrc) {\n        encoding.rtx = {\n          ssrc: _rtxSsrc\n        };\n      }\n\n      encodings.push(encoding);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return encodings;\n}\n\nexports.getRtpEncodings = getRtpEncodings;\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\n\nfunction addLegacySimulcast(_ref2) {\n  var offerMediaObject = _ref2.offerMediaObject,\n      track = _ref2.track,\n      numStreams = _ref2.numStreams;\n\n  if (numStreams <= 1) {\n    throw new TypeError('numStreams must be greater than 1');\n  }\n\n  var firstSsrc;\n  var firstRtxSsrc;\n  var streamId; // Get the SSRC.\n\n  var ssrcMsidLine = (offerMediaObject.ssrcs || []).find(function (line) {\n    if (line.attribute !== 'msid') {\n      return false;\n    }\n\n    var trackId = line.value.split(' ')[1];\n\n    if (trackId === track.id) {\n      firstSsrc = line.id;\n      streamId = line.value.split(' ')[0];\n      return true;\n    } else {\n      return false;\n    }\n  });\n\n  if (!ssrcMsidLine) {\n    throw new Error(\"a=ssrc line with msid information not found [track.id:\".concat(track.id, \"]\"));\n  } // Get the SSRC for RTX.\n\n\n  (offerMediaObject.ssrcGroups || []).some(function (line) {\n    if (line.semantics !== 'FID') {\n      return false;\n    }\n\n    var ssrcs = line.ssrcs.split(/\\s+/);\n\n    if (Number(ssrcs[0]) === firstSsrc) {\n      firstRtxSsrc = Number(ssrcs[1]);\n      return true;\n    } else {\n      return false;\n    }\n  });\n  var ssrcCnameLine = offerMediaObject.ssrcs.find(function (line) {\n    return line.attribute === 'cname' && line.id === firstSsrc;\n  });\n\n  if (!ssrcCnameLine) {\n    throw new Error(\"a=ssrc line with cname information not found [track.id:\".concat(track.id, \"]\"));\n  }\n\n  var cname = ssrcCnameLine.value;\n  var ssrcs = [];\n  var rtxSsrcs = [];\n\n  for (var i = 0; i < numStreams; ++i) {\n    ssrcs.push(firstSsrc + i);\n\n    if (firstRtxSsrc) {\n      rtxSsrcs.push(firstRtxSsrc + i);\n    }\n  }\n\n  offerMediaObject.ssrcGroups = offerMediaObject.ssrcGroups || [];\n  offerMediaObject.ssrcs = offerMediaObject.ssrcs || [];\n  offerMediaObject.ssrcGroups.push({\n    semantics: 'SIM',\n    ssrcs: ssrcs.join(' ')\n  });\n\n  for (var _i = 0; _i < ssrcs.length; ++_i) {\n    var ssrc = ssrcs[_i];\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'msid',\n      value: \"\".concat(streamId, \" \").concat(track.id)\n    });\n  }\n\n  for (var _i2 = 0; _i2 < rtxSsrcs.length; ++_i2) {\n    var _ssrc4 = ssrcs[_i2];\n    var rtxSsrc = rtxSsrcs[_i2];\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'msid',\n      value: \"\".concat(streamId, \" \").concat(track.id)\n    });\n    offerMediaObject.ssrcGroups.push({\n      semantics: 'FID',\n      ssrcs: \"\".concat(_ssrc4, \" \").concat(rtxSsrc)\n    });\n  }\n}\n\nexports.addLegacySimulcast = addLegacySimulcast;","map":{"version":3,"names":["Object","defineProperty","exports","value","addLegacySimulcast","getRtpEncodings","offerMediaObject","track","firstSsrc","ssrcs","Set","line","attribute","trackId","split","id","ssrc","add","size","Error","ssrcToRtxSsrc","Map","ssrcGroups","semantics","rtxSsrc","Number","has","delete","set","encodings","encoding","rtx","push","numStreams","TypeError","firstRtxSsrc","streamId","ssrcMsidLine","find","some","ssrcCnameLine","cname","rtxSsrcs","i","join","length"],"sources":["/home/runner/work/watchparty/watchparty/node_modules/mediasoup-client/lib/handlers/sdp/planBUtils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addLegacySimulcast = exports.getRtpEncodings = void 0;\nfunction getRtpEncodings({ offerMediaObject, track }) {\n    // First media SSRC (or the only one).\n    let firstSsrc;\n    const ssrcs = new Set();\n    for (const line of offerMediaObject.ssrcs || []) {\n        if (line.attribute !== 'msid') {\n            continue;\n        }\n        const trackId = line.value.split(' ')[1];\n        if (trackId === track.id) {\n            const ssrc = line.id;\n            ssrcs.add(ssrc);\n            if (!firstSsrc) {\n                firstSsrc = ssrc;\n            }\n        }\n    }\n    if (ssrcs.size === 0) {\n        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n    }\n    const ssrcToRtxSsrc = new Map();\n    // First assume RTX is used.\n    for (const line of offerMediaObject.ssrcGroups || []) {\n        if (line.semantics !== 'FID') {\n            continue;\n        }\n        let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n        ssrc = Number(ssrc);\n        rtxSsrc = Number(rtxSsrc);\n        if (ssrcs.has(ssrc)) {\n            // Remove both the SSRC and RTX SSRC from the set so later we know that they\n            // are already handled.\n            ssrcs.delete(ssrc);\n            ssrcs.delete(rtxSsrc);\n            // Add to the map.\n            ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n        }\n    }\n    // If the set of SSRCs is not empty it means that RTX is not being used, so take\n    // media SSRCs from there.\n    for (const ssrc of ssrcs) {\n        // Add to the map.\n        ssrcToRtxSsrc.set(ssrc, null);\n    }\n    const encodings = [];\n    for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n        const encoding = { ssrc };\n        if (rtxSsrc) {\n            encoding.rtx = { ssrc: rtxSsrc };\n        }\n        encodings.push(encoding);\n    }\n    return encodings;\n}\nexports.getRtpEncodings = getRtpEncodings;\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\nfunction addLegacySimulcast({ offerMediaObject, track, numStreams }) {\n    if (numStreams <= 1) {\n        throw new TypeError('numStreams must be greater than 1');\n    }\n    let firstSsrc;\n    let firstRtxSsrc;\n    let streamId;\n    // Get the SSRC.\n    const ssrcMsidLine = (offerMediaObject.ssrcs || [])\n        .find((line) => {\n        if (line.attribute !== 'msid') {\n            return false;\n        }\n        const trackId = line.value.split(' ')[1];\n        if (trackId === track.id) {\n            firstSsrc = line.id;\n            streamId = line.value.split(' ')[0];\n            return true;\n        }\n        else {\n            return false;\n        }\n    });\n    if (!ssrcMsidLine) {\n        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n    }\n    // Get the SSRC for RTX.\n    (offerMediaObject.ssrcGroups || [])\n        .some((line) => {\n        if (line.semantics !== 'FID') {\n            return false;\n        }\n        const ssrcs = line.ssrcs.split(/\\s+/);\n        if (Number(ssrcs[0]) === firstSsrc) {\n            firstRtxSsrc = Number(ssrcs[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    });\n    const ssrcCnameLine = offerMediaObject.ssrcs\n        .find((line) => (line.attribute === 'cname' && line.id === firstSsrc));\n    if (!ssrcCnameLine) {\n        throw new Error(`a=ssrc line with cname information not found [track.id:${track.id}]`);\n    }\n    const cname = ssrcCnameLine.value;\n    const ssrcs = [];\n    const rtxSsrcs = [];\n    for (let i = 0; i < numStreams; ++i) {\n        ssrcs.push(firstSsrc + i);\n        if (firstRtxSsrc) {\n            rtxSsrcs.push(firstRtxSsrc + i);\n        }\n    }\n    offerMediaObject.ssrcGroups = offerMediaObject.ssrcGroups || [];\n    offerMediaObject.ssrcs = offerMediaObject.ssrcs || [];\n    offerMediaObject.ssrcGroups.push({\n        semantics: 'SIM',\n        ssrcs: ssrcs.join(' ')\n    });\n    for (let i = 0; i < ssrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'cname',\n            value: cname\n        });\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'msid',\n            value: `${streamId} ${track.id}`\n        });\n    }\n    for (let i = 0; i < rtxSsrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        const rtxSsrc = rtxSsrcs[i];\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'cname',\n            value: cname\n        });\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'msid',\n            value: `${streamId} ${track.id}`\n        });\n        offerMediaObject.ssrcGroups.push({\n            semantics: 'FID',\n            ssrcs: `${ssrc} ${rtxSsrc}`\n        });\n    }\n}\nexports.addLegacySimulcast = addLegacySimulcast;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}