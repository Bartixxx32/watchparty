{"ast":null,"code":"/* eslint-disable */ /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */var Guacamole=Guacamole||{};/**\n * Provides cross-browser and cross-keyboard keyboard for a specific element.\n * Browser and keyboard layout variation is abstracted away, providing events\n * which represent keys as their corresponding X11 keysym.\n *\n * @constructor\n * @param {Element|Document} [element]\n *    The Element to use to provide keyboard events. If omitted, at least one\n *    Element must be manually provided through the listenTo() function for\n *    the Guacamole.Keyboard instance to have any effect.\n */Guacamole.Keyboard=function Keyboard(element){/**\n   * Reference to this Guacamole.Keyboard.\n   *\n   * @private\n   * @type {!Guacamole.Keyboard}\n   */var guac_keyboard=this;/**\n   * An integer value which uniquely identifies this Guacamole.Keyboard\n   * instance with respect to other Guacamole.Keyboard instances.\n   *\n   * @private\n   * @type {!number}\n   */var guacKeyboardID=Guacamole.Keyboard._nextID++;/**\n   * The name of the property which is added to event objects via markEvent()\n   * to note that they have already been handled by this Guacamole.Keyboard.\n   *\n   * @private\n   * @constant\n   * @type {!string}\n   */var EVENT_MARKER='_GUAC_KEYBOARD_HANDLED_BY_'+guacKeyboardID;/**\n   * Fired whenever the user presses a key with the element associated\n   * with this Guacamole.Keyboard in focus.\n   *\n   * @event\n   * @param {!number} keysym\n   *     The keysym of the key being pressed.\n   *\n   * @return {!boolean}\n   *     true if the key event should be allowed through to the browser,\n   *     false otherwise.\n   */this.onkeydown=null;/**\n   * Fired whenever the user releases a key with the element associated\n   * with this Guacamole.Keyboard in focus.\n   *\n   * @event\n   * @param {!number} keysym\n   *     The keysym of the key being released.\n   */this.onkeyup=null;/**\n   * Set of known platform-specific or browser-specific quirks which must be\n   * accounted for to properly interpret key events, even if the only way to\n   * reliably detect that quirk is to platform/browser-sniff.\n   *\n   * @private\n   * @type {!Object.<string, boolean>}\n   */var quirks={/**\n     * Whether keyup events are universally unreliable.\n     *\n     * @type {!boolean}\n     */keyupUnreliable:false,/**\n     * Whether the Alt key is actually a modifier for typable keys and is\n     * thus never used for keyboard shortcuts.\n     *\n     * @type {!boolean}\n     */altIsTypableOnly:false,/**\n     * Whether we can rely on receiving a keyup event for the Caps Lock\n     * key.\n     *\n     * @type {!boolean}\n     */capsLockKeyupUnreliable:false};// Set quirk flags depending on platform/browser, if such information is\n// available\nif(navigator&&navigator.platform){// All keyup events are unreliable on iOS (sadly)\nif(navigator.platform.match(/ipad|iphone|ipod/i))quirks.keyupUnreliable=true;// The Alt key on Mac is never used for keyboard shortcuts, and the\n// Caps Lock key never dispatches keyup events\nelse if(navigator.platform.match(/^mac/i)){quirks.altIsTypableOnly=true;quirks.capsLockKeyupUnreliable=true;}}/**\n   * A key event having a corresponding timestamp. This event is non-specific.\n   * Its subclasses should be used instead when recording specific key\n   * events.\n   *\n   * @private\n   * @constructor\n   * @param {KeyboardEvent} [orig]\n   *     The relevant DOM keyboard event.\n   */var KeyEvent=function KeyEvent(orig){/**\n     * Reference to this key event.\n     *\n     * @private\n     * @type {!KeyEvent}\n     */var key_event=this;/**\n     * The JavaScript key code of the key pressed. For most events (keydown\n     * and keyup), this is a scancode-like value related to the position of\n     * the key on the US English \"Qwerty\" keyboard. For keypress events,\n     * this is the Unicode codepoint of the character that would be typed\n     * by the key pressed.\n     *\n     * @type {!number}\n     */this.keyCode=orig?orig.which||orig.keyCode:0;/**\n     * The legacy DOM3 \"keyIdentifier\" of the key pressed, as defined at:\n     * http://www.w3.org/TR/2009/WD-DOM-Level-3-Events-20090908/#events-Events-KeyboardEvent\n     *\n     * @type {!string}\n     */this.keyIdentifier=orig&&orig.keyIdentifier;/**\n     * The standard name of the key pressed, as defined at:\n     * http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent\n     *\n     * @type {!string}\n     */this.key=orig&&orig.key;/**\n     * The location on the keyboard corresponding to the key pressed, as\n     * defined at:\n     * http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent\n     *\n     * @type {!number}\n     */this.location=orig?getEventLocation(orig):0;/**\n     * The state of all local keyboard modifiers at the time this event was\n     * received.\n     *\n     * @type {!Guacamole.Keyboard.ModifierState}\n     */this.modifiers=orig?Guacamole.Keyboard.ModifierState.fromKeyboardEvent(orig):new Guacamole.Keyboard.ModifierState();/**\n     * An arbitrary timestamp in milliseconds, indicating this event's\n     * position in time relative to other events.\n     *\n     * @type {!number}\n     */this.timestamp=new Date().getTime();/**\n     * Whether the default action of this key event should be prevented.\n     *\n     * @type {!boolean}\n     */this.defaultPrevented=false;/**\n     * The keysym of the key associated with this key event, as determined\n     * by a best-effort guess using available event properties and keyboard\n     * state.\n     *\n     * @type {number}\n     */this.keysym=null;/**\n     * Whether the keysym value of this key event is known to be reliable.\n     * If false, the keysym may still be valid, but it's only a best guess,\n     * and future key events may be a better source of information.\n     *\n     * @type {!boolean}\n     */this.reliable=false;/**\n     * Returns the number of milliseconds elapsed since this event was\n     * received.\n     *\n     * @return {!number}\n     *     The number of milliseconds elapsed since this event was\n     *     received.\n     */this.getAge=function(){return new Date().getTime()-key_event.timestamp;};};/**\n   * Information related to the pressing of a key, which need not be a key\n   * associated with a printable character. The presence or absence of any\n   * information within this object is browser-dependent.\n   *\n   * @private\n   * @constructor\n   * @augments Guacamole.Keyboard.KeyEvent\n   * @param {!KeyboardEvent} orig\n   *     The relevant DOM \"keydown\" event.\n   */var KeydownEvent=function KeydownEvent(orig){// We extend KeyEvent\nKeyEvent.call(this,orig);// If key is known from keyCode or DOM3 alone, use that\nthis.keysym=keysym_from_key_identifier(this.key,this.location)||keysym_from_keycode(this.keyCode,this.location);/**\n     * Whether the keyup following this keydown event is known to be\n     * reliable. If false, we cannot rely on the keyup event to occur.\n     *\n     * @type {!boolean}\n     */this.keyupReliable=!quirks.keyupUnreliable;// DOM3 and keyCode are reliable sources if the corresponding key is\n// not a printable key\nif(this.keysym&&!isPrintable(this.keysym))this.reliable=true;// Use legacy keyIdentifier as a last resort, if it looks sane\nif(!this.keysym&&key_identifier_sane(this.keyCode,this.keyIdentifier))this.keysym=keysym_from_key_identifier(this.keyIdentifier,this.location,this.modifiers.shift);// If a key is pressed while meta is held down, the keyup will\n// never be sent in Chrome (bug #108404)\nif(this.modifiers.meta&&this.keysym!==0xffe7&&this.keysym!==0xffe8)this.keyupReliable=false;// We cannot rely on receiving keyup for Caps Lock on certain platforms\nelse if(this.keysym===0xffe5&&quirks.capsLockKeyupUnreliable)this.keyupReliable=false;// Determine whether default action for Alt+combinations must be prevented\nvar prevent_alt=!this.modifiers.ctrl&&!quirks.altIsTypableOnly;// Determine whether default action for Ctrl+combinations must be prevented\nvar prevent_ctrl=!this.modifiers.alt;// We must rely on the (potentially buggy) keyIdentifier if preventing\n// the default action is important\nif(prevent_ctrl&&this.modifiers.ctrl||prevent_alt&&this.modifiers.alt||this.modifiers.meta||this.modifiers.hyper)this.reliable=true;// Record most recently known keysym by associated key code\nrecentKeysym[this.keyCode]=this.keysym;};KeydownEvent.prototype=new KeyEvent();/**\n   * Information related to the pressing of a key, which MUST be\n   * associated with a printable character. The presence or absence of any\n   * information within this object is browser-dependent.\n   *\n   * @private\n   * @constructor\n   * @augments Guacamole.Keyboard.KeyEvent\n   * @param {!KeyboardEvent} orig\n   *     The relevant DOM \"keypress\" event.\n   */var KeypressEvent=function KeypressEvent(orig){// We extend KeyEvent\nKeyEvent.call(this,orig);// Pull keysym from char code\nthis.keysym=keysym_from_charcode(this.keyCode);// Keypress is always reliable\nthis.reliable=true;};KeypressEvent.prototype=new KeyEvent();/**\n   * Information related to the releasing of a key, which need not be a key\n   * associated with a printable character. The presence or absence of any\n   * information within this object is browser-dependent.\n   *\n   * @private\n   * @constructor\n   * @augments Guacamole.Keyboard.KeyEvent\n   * @param {!KeyboardEvent} orig\n   *     The relevant DOM \"keyup\" event.\n   */var KeyupEvent=function KeyupEvent(orig){// We extend KeyEvent\nKeyEvent.call(this,orig);// If key is known from keyCode or DOM3 alone, use that (keyCode is\n// still more reliable for keyup when dead keys are in use)\nthis.keysym=keysym_from_keycode(this.keyCode,this.location)||keysym_from_key_identifier(this.key,this.location);// Fall back to the most recently pressed keysym associated with the\n// keyCode if the inferred key doesn't seem to actually be pressed\nif(!guac_keyboard.pressed[this.keysym])this.keysym=recentKeysym[this.keyCode]||this.keysym;// Keyup is as reliable as it will ever be\nthis.reliable=true;};KeyupEvent.prototype=new KeyEvent();/**\n   * An array of recorded events, which can be instances of the private\n   * KeydownEvent, KeypressEvent, and KeyupEvent classes.\n   *\n   * @private\n   * @type {!KeyEvent[]}\n   */var eventLog=[];/**\n   * Map of known JavaScript keycodes which do not map to typable characters\n   * to their X11 keysym equivalents.\n   *\n   * @private\n   * @type {!Object.<number, number[]>}\n   */var keycodeKeysyms={8:[0xff08],// backspace\n9:[0xff09],// tab\n12:[0xff0b,0xff0b,0xff0b,0xffb5],// clear       / KP 5\n13:[0xff0d],// enter\n16:[0xffe1,0xffe1,0xffe2],// shift\n17:[0xffe3,0xffe3,0xffe4],// ctrl\n18:[0xffe9,0xffe9,0xfe03],// alt\n19:[0xff13],// pause/break\n20:[0xffe5],// caps lock\n27:[0xff1b],// escape\n32:[0x0020],// space\n33:[0xff55,0xff55,0xff55,0xffb9],// page up     / KP 9\n34:[0xff56,0xff56,0xff56,0xffb3],// page down   / KP 3\n35:[0xff57,0xff57,0xff57,0xffb1],// end         / KP 1\n36:[0xff50,0xff50,0xff50,0xffb7],// home        / KP 7\n37:[0xff51,0xff51,0xff51,0xffb4],// left arrow  / KP 4\n38:[0xff52,0xff52,0xff52,0xffb8],// up arrow    / KP 8\n39:[0xff53,0xff53,0xff53,0xffb6],// right arrow / KP 6\n40:[0xff54,0xff54,0xff54,0xffb2],// down arrow  / KP 2\n45:[0xff63,0xff63,0xff63,0xffb0],// insert      / KP 0\n46:[0xffff,0xffff,0xffff,0xffae],// delete      / KP decimal\n91:[0xffe7],// left windows/command key (meta_l)\n92:[0xffe8],// right window/command key (meta_r)\n93:[0xff67],// menu key\n96:[0xffb0],// KP 0\n97:[0xffb1],// KP 1\n98:[0xffb2],// KP 2\n99:[0xffb3],// KP 3\n100:[0xffb4],// KP 4\n101:[0xffb5],// KP 5\n102:[0xffb6],// KP 6\n103:[0xffb7],// KP 7\n104:[0xffb8],// KP 8\n105:[0xffb9],// KP 9\n106:[0xffaa],// KP multiply\n107:[0xffab],// KP add\n109:[0xffad],// KP subtract\n110:[0xffae],// KP decimal\n111:[0xffaf],// KP divide\n112:[0xffbe],// f1\n113:[0xffbf],// f2\n114:[0xffc0],// f3\n115:[0xffc1],// f4\n116:[0xffc2],// f5\n117:[0xffc3],// f6\n118:[0xffc4],// f7\n119:[0xffc5],// f8\n120:[0xffc6],// f9\n121:[0xffc7],// f10\n122:[0xffc8],// f11\n123:[0xffc9],// f12\n144:[0xff7f],// num lock\n145:[0xff14],// scroll lock\n225:[0xfe03]// altgraph (iso_level3_shift)\n};/**\n   * Map of known JavaScript keyidentifiers which do not map to typable\n   * characters to their unshifted X11 keysym equivalents.\n   *\n   * @private\n   * @type {!Object.<string, number[]>}\n   */var keyidentifier_keysym={Again:[0xff66],AllCandidates:[0xff3d],Alphanumeric:[0xff30],Alt:[0xffe9,0xffe9,0xfe03],Attn:[0xfd0e],AltGraph:[0xfe03],ArrowDown:[0xff54],ArrowLeft:[0xff51],ArrowRight:[0xff53],ArrowUp:[0xff52],Backspace:[0xff08],CapsLock:[0xffe5],Cancel:[0xff69],Clear:[0xff0b],Convert:[0xff21],Copy:[0xfd15],Crsel:[0xfd1c],CrSel:[0xfd1c],CodeInput:[0xff37],Compose:[0xff20],Control:[0xffe3,0xffe3,0xffe4],ContextMenu:[0xff67],Delete:[0xffff],Down:[0xff54],End:[0xff57],Enter:[0xff0d],EraseEof:[0xfd06],Escape:[0xff1b],Execute:[0xff62],Exsel:[0xfd1d],ExSel:[0xfd1d],F1:[0xffbe],F2:[0xffbf],F3:[0xffc0],F4:[0xffc1],F5:[0xffc2],F6:[0xffc3],F7:[0xffc4],F8:[0xffc5],F9:[0xffc6],F10:[0xffc7],F11:[0xffc8],F12:[0xffc9],F13:[0xffca],F14:[0xffcb],F15:[0xffcc],F16:[0xffcd],F17:[0xffce],F18:[0xffcf],F19:[0xffd0],F20:[0xffd1],F21:[0xffd2],F22:[0xffd3],F23:[0xffd4],F24:[0xffd5],Find:[0xff68],GroupFirst:[0xfe0c],GroupLast:[0xfe0e],GroupNext:[0xfe08],GroupPrevious:[0xfe0a],FullWidth:null,HalfWidth:null,HangulMode:[0xff31],Hankaku:[0xff29],HanjaMode:[0xff34],Help:[0xff6a],Hiragana:[0xff25],HiraganaKatakana:[0xff27],Home:[0xff50],Hyper:[0xffed,0xffed,0xffee],Insert:[0xff63],JapaneseHiragana:[0xff25],JapaneseKatakana:[0xff26],JapaneseRomaji:[0xff24],JunjaMode:[0xff38],KanaMode:[0xff2d],KanjiMode:[0xff21],Katakana:[0xff26],Left:[0xff51],Meta:[0xffe7,0xffe7,0xffe8],ModeChange:[0xff7e],NumLock:[0xff7f],PageDown:[0xff56],PageUp:[0xff55],Pause:[0xff13],Play:[0xfd16],PreviousCandidate:[0xff3e],PrintScreen:[0xff61],Redo:[0xff66],Right:[0xff53],RomanCharacters:null,Scroll:[0xff14],Select:[0xff60],Separator:[0xffac],Shift:[0xffe1,0xffe1,0xffe2],SingleCandidate:[0xff3c],Super:[0xffeb,0xffeb,0xffec],Tab:[0xff09],UIKeyInputDownArrow:[0xff54],UIKeyInputEscape:[0xff1b],UIKeyInputLeftArrow:[0xff51],UIKeyInputRightArrow:[0xff53],UIKeyInputUpArrow:[0xff52],Up:[0xff52],Undo:[0xff65],Win:[0xffe7,0xffe7,0xffe8],Zenkaku:[0xff28],ZenkakuHankaku:[0xff2a]};/**\n   * All keysyms which should not repeat when held down.\n   *\n   * @private\n   * @type {!Object.<number, boolean>}\n   */var no_repeat={0xfe03:true,// ISO Level 3 Shift (AltGr)\n0xffe1:true,// Left shift\n0xffe2:true,// Right shift\n0xffe3:true,// Left ctrl\n0xffe4:true,// Right ctrl\n0xffe5:true,// Caps Lock\n0xffe7:true,// Left meta\n0xffe8:true,// Right meta\n0xffe9:true,// Left alt\n0xffea:true,// Right alt\n0xffeb:true,// Left super/hyper\n0xffec:true// Right super/hyper\n};/**\n   * All modifiers and their states.\n   *\n   * @type {!Guacamole.Keyboard.ModifierState}\n   */this.modifiers=new Guacamole.Keyboard.ModifierState();/**\n   * The state of every key, indexed by keysym. If a particular key is\n   * pressed, the value of pressed for that keysym will be true. If a key\n   * is not currently pressed, it will not be defined.\n   *\n   * @type {!Object.<number, boolean>}\n   */this.pressed={};/**\n   * The state of every key, indexed by keysym, for strictly those keys whose\n   * status has been indirectly determined thorugh observation of other key\n   * events. If a particular key is implicitly pressed, the value of\n   * implicitlyPressed for that keysym will be true. If a key\n   * is not currently implicitly pressed (the key is not pressed OR the state\n   * of the key is explicitly known), it will not be defined.\n   *\n   * @private\n   * @type {!Object.<number, boolean>}\n   */var implicitlyPressed={};/**\n   * The last result of calling the onkeydown handler for each key, indexed\n   * by keysym. This is used to prevent/allow default actions for key events,\n   * even when the onkeydown handler cannot be called again because the key\n   * is (theoretically) still pressed.\n   *\n   * @private\n   * @type {!Object.<number, boolean>}\n   */var last_keydown_result={};/**\n   * The keysym most recently associated with a given keycode when keydown\n   * fired. This object maps keycodes to keysyms.\n   *\n   * @private\n   * @type {!Object.<number, number>}\n   */var recentKeysym={};/**\n   * Timeout before key repeat starts.\n   *\n   * @private\n   * @type {number}\n   */var key_repeat_timeout=null;/**\n   * Interval which presses and releases the last key pressed while that\n   * key is still being held down.\n   *\n   * @private\n   * @type {number}\n   */var key_repeat_interval=null;/**\n   * Given an array of keysyms indexed by location, returns the keysym\n   * for the given location, or the keysym for the standard location if\n   * undefined.\n   *\n   * @private\n   * @param {number[]} keysyms\n   *     An array of keysyms, where the index of the keysym in the array is\n   *     the location value.\n   *\n   * @param {!number} location\n   *     The location on the keyboard corresponding to the key pressed, as\n   *     defined at: http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent\n   */var get_keysym=function get_keysym(keysyms,location){if(!keysyms)return null;return keysyms[location]||keysyms[0];};/**\n   * Returns true if the given keysym corresponds to a printable character,\n   * false otherwise.\n   *\n   * @param {!number} keysym\n   *     The keysym to check.\n   *\n   * @returns {!boolean}\n   *     true if the given keysym corresponds to a printable character,\n   *     false otherwise.\n   */var isPrintable=function isPrintable(keysym){// Keysyms with Unicode equivalents are printable\nreturn keysym>=0x00&&keysym<=0xff||(keysym&0xffff0000)===0x01000000;};function keysym_from_key_identifier(identifier,location,shifted){if(!identifier)return null;var typedCharacter;// If identifier is U+xxxx, decode Unicode character\nvar unicodePrefixLocation=identifier.indexOf('U+');if(unicodePrefixLocation>=0){var hex=identifier.substring(unicodePrefixLocation+2);typedCharacter=String.fromCharCode(parseInt(hex,16));}// If single character and not keypad, use that as typed character\nelse if(identifier.length===1&&location!==3)typedCharacter=identifier;// Otherwise, look up corresponding keysym\nelse return get_keysym(keyidentifier_keysym[identifier],location);// Alter case if necessary\nif(shifted===true)typedCharacter=typedCharacter.toUpperCase();else if(shifted===false)typedCharacter=typedCharacter.toLowerCase();// Get codepoint\nvar codepoint=typedCharacter.charCodeAt(0);return keysym_from_charcode(codepoint);}function isControlCharacter(codepoint){return codepoint<=0x1f||codepoint>=0x7f&&codepoint<=0x9f;}function keysym_from_charcode(codepoint){// Keysyms for control characters\nif(isControlCharacter(codepoint))return 0xff00|codepoint;// Keysyms for ASCII chars\nif(codepoint>=0x0000&&codepoint<=0x00ff)return codepoint;// Keysyms for Unicode\nif(codepoint>=0x0100&&codepoint<=0x10ffff)return 0x01000000|codepoint;return null;}function keysym_from_keycode(keyCode,location){return get_keysym(keycodeKeysyms[keyCode],location);}/**\n   * Heuristically detects if the legacy keyIdentifier property of\n   * a keydown/keyup event looks incorrectly derived. Chrome, and\n   * presumably others, will produce the keyIdentifier by assuming\n   * the keyCode is the Unicode codepoint for that key. This is not\n   * correct in all cases.\n   *\n   * @private\n   * @param {!number} keyCode\n   *     The keyCode from a browser keydown/keyup event.\n   *\n   * @param {string} keyIdentifier\n   *     The legacy keyIdentifier from a browser keydown/keyup event.\n   *\n   * @returns {!boolean}\n   *     true if the keyIdentifier looks sane, false if the keyIdentifier\n   *     appears incorrectly derived or is missing entirely.\n   */var key_identifier_sane=function key_identifier_sane(keyCode,keyIdentifier){// Missing identifier is not sane\nif(!keyIdentifier)return false;// Assume non-Unicode keyIdentifier values are sane\nvar unicodePrefixLocation=keyIdentifier.indexOf('U+');if(unicodePrefixLocation===-1)return true;// If the Unicode codepoint isn't identical to the keyCode,\n// then the identifier is likely correct\nvar codepoint=parseInt(keyIdentifier.substring(unicodePrefixLocation+2),16);if(keyCode!==codepoint)return true;// The keyCodes for A-Z and 0-9 are actually identical to their\n// Unicode codepoints\nif(keyCode>=65&&keyCode<=90||keyCode>=48&&keyCode<=57)return true;// The keyIdentifier does NOT appear sane\nreturn false;};/**\n   * Marks a key as pressed, firing the keydown event if registered. Key\n   * repeat for the pressed key will start after a delay if that key is\n   * not a modifier. The return value of this function depends on the\n   * return value of the keydown event handler, if any.\n   *\n   * @param {number} keysym\n   *     The keysym of the key to press.\n   *\n   * @return {boolean}\n   *     true if event should NOT be canceled, false otherwise.\n   */this.press=function(keysym){// Don't bother with pressing the key if the key is unknown\nif(keysym===null)return;// Only press if released\nif(!guac_keyboard.pressed[keysym]){// Mark key as pressed\nguac_keyboard.pressed[keysym]=true;// Send key event\nif(guac_keyboard.onkeydown){var result=guac_keyboard.onkeydown(keysym);last_keydown_result[keysym]=result;// Stop any current repeat\nwindow.clearTimeout(key_repeat_timeout);window.clearInterval(key_repeat_interval);// Repeat after a delay as long as pressed\nif(!no_repeat[keysym])key_repeat_timeout=window.setTimeout(function(){key_repeat_interval=window.setInterval(function(){guac_keyboard.onkeyup(keysym);guac_keyboard.onkeydown(keysym);},50);},500);return result;}}// Return the last keydown result by default, resort to false if unknown\nreturn last_keydown_result[keysym]||false;};/**\n   * Marks a key as released, firing the keyup event if registered.\n   *\n   * @param {number} keysym\n   *     The keysym of the key to release.\n   */this.release=function(keysym){// Only release if pressed\nif(guac_keyboard.pressed[keysym]){// Mark key as released\ndelete guac_keyboard.pressed[keysym];delete implicitlyPressed[keysym];// Stop repeat\nwindow.clearTimeout(key_repeat_timeout);window.clearInterval(key_repeat_interval);// Send key event\nif(keysym!==null&&guac_keyboard.onkeyup)guac_keyboard.onkeyup(keysym);}};/**\n   * Presses and releases the keys necessary to type the given string of\n   * text.\n   *\n   * @param {!string} str\n   *     The string to type.\n   */this.type=function type(str){// Press/release the key corresponding to each character in the string\nfor(var i=0;i<str.length;i++){// Determine keysym of current character\nvar codepoint=str.codePointAt?str.codePointAt(i):str.charCodeAt(i);var keysym=keysym_from_charcode(codepoint);// Press and release key for current character\nguac_keyboard.press(keysym);guac_keyboard.release(keysym);}};/**\n   * Resets the state of this keyboard, releasing all keys, and firing keyup\n   * events for each released key.\n   */this.reset=function(){// Release all pressed keys\nfor(var keysym in guac_keyboard.pressed){guac_keyboard.release(parseInt(keysym));}// Clear event log\neventLog=[];};/**\n   * Resynchronizes the remote state of the given modifier with its\n   * corresponding local modifier state, as dictated by\n   * {@link KeyEvent#modifiers} within the given key event, by pressing or\n   * releasing keysyms.\n   *\n   * @private\n   * @param {!string} modifier\n   *     The name of the {@link Guacamole.Keyboard.ModifierState} property\n   *     being updated.\n   *\n   * @param {!number[]} keysyms\n   *     The keysyms which represent the modifier being updated.\n   *\n   * @param {!KeyEvent} keyEvent\n   *     Guacamole's current best interpretation of the key event being\n   *     processed.\n   */var updateModifierState=function updateModifierState(modifier,keysyms,keyEvent){var localState=keyEvent.modifiers[modifier];var remoteState=guac_keyboard.modifiers[modifier];var i;// Do not trust changes in modifier state for events directly involving\n// that modifier: (1) the flag may erroneously be cleared despite\n// another version of the same key still being held and (2) the change\n// in flag may be due to the current event being processed, thus\n// updating things here is at best redundant and at worst incorrect\nif(keysyms.indexOf(keyEvent.keysym)!==-1)return;// Release all related keys if modifier is implicitly released\nif(remoteState&&localState===false){for(i=0;i<keysyms.length;i++){guac_keyboard.release(keysyms[i]);}}// Press if modifier is implicitly pressed\nelse if(!remoteState&&localState){// Verify that modifier flag isn't already pressed or already set\n// due to another version of the same key being held down\nfor(i=0;i<keysyms.length;i++){if(guac_keyboard.pressed[keysyms[i]])return;}// Mark as implicitly pressed only if there is other information\n// within the key event relating to a different key. Some\n// platforms, such as iOS, will send essentially empty key events\n// for modifier keys, using only the modifier flags to signal the\n// identity of the key.\nvar keysym=keysyms[0];if(keyEvent.keysym)implicitlyPressed[keysym]=true;guac_keyboard.press(keysym);}};/**\n   * Given a keyboard event, updates the remote key state to match the local\n   * modifier state and remote based on the modifier flags within the event.\n   * This function pays no attention to keycodes.\n   *\n   * @private\n   * @param {!KeyEvent} keyEvent\n   *     Guacamole's current best interpretation of the key event being\n   *     processed.\n   */var syncModifierStates=function syncModifierStates(keyEvent){// Resync state of alt\nupdateModifierState('alt',[0xffe9,// Left alt\n0xffea,// Right alt\n0xfe03// AltGr\n],keyEvent);// Resync state of shift\nupdateModifierState('shift',[0xffe1,// Left shift\n0xffe2// Right shift\n],keyEvent);// Resync state of ctrl\nupdateModifierState('ctrl',[0xffe3,// Left ctrl\n0xffe4// Right ctrl\n],keyEvent);// Resync state of meta\nupdateModifierState('meta',[0xffe7,// Left meta\n0xffe8// Right meta\n],keyEvent);// Resync state of hyper\nupdateModifierState('hyper',[0xffeb,// Left super/hyper\n0xffec// Right super/hyper\n],keyEvent);// Update state\nguac_keyboard.modifiers=keyEvent.modifiers;};/**\n   * Returns whether all currently pressed keys were implicitly pressed. A\n   * key is implicitly pressed if its status was inferred indirectly from\n   * inspection of other key events.\n   *\n   * @private\n   * @returns {!boolean}\n   *     true if all currently pressed keys were implicitly pressed, false\n   *     otherwise.\n   */var isStateImplicit=function isStateImplicit(){for(var keysym in guac_keyboard.pressed){if(!implicitlyPressed[keysym])return false;}return true;};/**\n   * Reads through the event log, removing events from the head of the log\n   * when the corresponding true key presses are known (or as known as they\n   * can be).\n   *\n   * @private\n   * @return {boolean}\n   *     Whether the default action of the latest event should be prevented.\n   */function interpret_events(){// Do not prevent default if no event could be interpreted\nvar handled_event=interpret_event();if(!handled_event)return false;// Interpret as much as possible\nvar last_event;do{last_event=handled_event;handled_event=interpret_event();}while(handled_event!==null);// Reset keyboard state if we cannot expect to receive any further\n// keyup events\nif(isStateImplicit())guac_keyboard.reset();return last_event.defaultPrevented;}/**\n   * Releases Ctrl+Alt, if both are currently pressed and the given keysym\n   * looks like a key that may require AltGr.\n   *\n   * @private\n   * @param {!number} keysym\n   *     The key that was just pressed.\n   */var release_simulated_altgr=function release_simulated_altgr(keysym){// Both Ctrl+Alt must be pressed if simulated AltGr is in use\nif(!guac_keyboard.modifiers.ctrl||!guac_keyboard.modifiers.alt)return;// Assume [A-Z] never require AltGr\nif(keysym>=0x0041&&keysym<=0x005a)return;// Assume [a-z] never require AltGr\nif(keysym>=0x0061&&keysym<=0x007a)return;// Release Ctrl+Alt if the keysym is printable\nif(keysym<=0xff||(keysym&0xff000000)===0x01000000){guac_keyboard.release(0xffe3);// Left ctrl\nguac_keyboard.release(0xffe4);// Right ctrl\nguac_keyboard.release(0xffe9);// Left alt\nguac_keyboard.release(0xffea);// Right alt\n}};/**\n   * Reads through the event log, interpreting the first event, if possible,\n   * and returning that event. If no events can be interpreted, due to a\n   * total lack of events or the need for more events, null is returned. Any\n   * interpreted events are automatically removed from the log.\n   *\n   * @private\n   * @return {KeyEvent}\n   *     The first key event in the log, if it can be interpreted, or null\n   *     otherwise.\n   */var interpret_event=function interpret_event(){// Peek at first event in log\nvar first=eventLog[0];if(!first)return null;// Keydown event\nif(first instanceof KeydownEvent){var keysym=null;var accepted_events=[];// Defer handling of Meta until it is known to be functioning as a\n// modifier (it may otherwise actually be an alternative method for\n// pressing a single key, such as Meta+Left for Home on ChromeOS)\nif(first.keysym===0xffe7||first.keysym===0xffe8){// Defer handling until further events exist to provide context\nif(eventLog.length===1)return null;// Drop keydown if it turns out Meta does not actually apply\nif(eventLog[1].keysym!==first.keysym){if(!eventLog[1].modifiers.meta)return eventLog.shift();}// Drop duplicate keydown events while waiting to determine\n// whether to acknowledge Meta (browser may repeat keydown\n// while the key is held)\nelse if(eventLog[1]instanceof KeydownEvent)return eventLog.shift();}// If event itself is reliable, no need to wait for other events\nif(first.reliable){keysym=first.keysym;accepted_events=eventLog.splice(0,1);}// If keydown is immediately followed by a keypress, use the indicated character\nelse if(eventLog[1]instanceof KeypressEvent){keysym=eventLog[1].keysym;accepted_events=eventLog.splice(0,2);}// If keydown is immediately followed by anything else, then no\n// keypress can possibly occur to clarify this event, and we must\n// handle it now\nelse if(eventLog[1]){keysym=first.keysym;accepted_events=eventLog.splice(0,1);}// Fire a key press if valid events were found\nif(accepted_events.length>0){syncModifierStates(first);if(keysym){// Fire event\nrelease_simulated_altgr(keysym);var defaultPrevented=!guac_keyboard.press(keysym);recentKeysym[first.keyCode]=keysym;// Release the key now if we cannot rely on the associated\n// keyup event\nif(!first.keyupReliable)guac_keyboard.release(keysym);// Record whether default was prevented\nfor(var i=0;i<accepted_events.length;i++){accepted_events[i].defaultPrevented=defaultPrevented;}}return first;}}// end if keydown\n// Keyup event\nelse if(first instanceof KeyupEvent&&!quirks.keyupUnreliable){// Release specific key if known\nvar keysym=first.keysym;if(keysym){guac_keyboard.release(keysym);delete recentKeysym[first.keyCode];first.defaultPrevented=true;}// Otherwise, fall back to releasing all keys\nelse{guac_keyboard.reset();return first;}syncModifierStates(first);return eventLog.shift();}// end if keyup\n// Ignore any other type of event (keypress by itself is invalid, and\n// unreliable keyup events should simply be dumped)\nelse return eventLog.shift();// No event interpreted\nreturn null;};/**\n   * Returns the keyboard location of the key associated with the given\n   * keyboard event. The location differentiates key events which otherwise\n   * have the same keycode, such as left shift vs. right shift.\n   *\n   * @private\n   * @param {!KeyboardEvent} e\n   *     A JavaScript keyboard event, as received through the DOM via a\n   *     \"keydown\", \"keyup\", or \"keypress\" handler.\n   *\n   * @returns {!number}\n   *     The location of the key event on the keyboard, as defined at:\n   *     http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent\n   */var getEventLocation=function getEventLocation(e){// Use standard location, if possible\nif('location'in e)return e.location;// Failing that, attempt to use deprecated keyLocation\nif('keyLocation'in e)return e.keyLocation;// If no location is available, assume left side\nreturn 0;};/**\n   * Attempts to mark the given Event as having been handled by this\n   * Guacamole.Keyboard. If the Event has already been marked as handled,\n   * false is returned.\n   *\n   * @param {!Event} e\n   *     The Event to mark.\n   *\n   * @returns {!boolean}\n   *     true if the given Event was successfully marked, false if the given\n   *     Event was already marked.\n   */var markEvent=function markEvent(e){// Fail if event is already marked\nif(e[EVENT_MARKER])return false;// Mark event otherwise\ne[EVENT_MARKER]=true;return true;};/**\n   * Attaches event listeners to the given Element, automatically translating\n   * received key, input, and composition events into simple keydown/keyup\n   * events signalled through this Guacamole.Keyboard's onkeydown and\n   * onkeyup handlers.\n   *\n   * @param {!(Element|Document)} element\n   *     The Element to attach event listeners to for the sake of handling\n   *     key or input events.\n   */this.listenTo=function listenTo(element){// When key pressed\nelement.addEventListener('keydown',function(e){// Only intercept if handler set\nif(!guac_keyboard.onkeydown)return;// Ignore events which have already been handled\nif(!markEvent(e))return;var keydownEvent=new KeydownEvent(e);// Ignore (but do not prevent) the \"composition\" keycode sent by some\n// browsers when an IME is in use (see: http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html)\nif(keydownEvent.keyCode===229)return;// Log event\neventLog.push(keydownEvent);// Interpret as many events as possible, prevent default if indicated\nif(interpret_events())e.preventDefault();},true);// When key pressed\nelement.addEventListener('keypress',function(e){// Only intercept if handler set\nif(!guac_keyboard.onkeydown&&!guac_keyboard.onkeyup)return;// Ignore events which have already been handled\nif(!markEvent(e))return;// Log event\neventLog.push(new KeypressEvent(e));// Interpret as many events as possible, prevent default if indicated\nif(interpret_events())e.preventDefault();},true);// When key released\nelement.addEventListener('keyup',function(e){// Only intercept if handler set\nif(!guac_keyboard.onkeyup)return;// Ignore events which have already been handled\nif(!markEvent(e))return;e.preventDefault();// Log event, call for interpretation\neventLog.push(new KeyupEvent(e));interpret_events();},true);// NEKO: Do not automatically type text entered into the wrapped field\n};// Listen to given element, if any\nif(element)guac_keyboard.listenTo(element);};/**\n * The unique numerical identifier to assign to the next Guacamole.Keyboard\n * instance.\n *\n * @private\n * @type {!number}\n */Guacamole.Keyboard._nextID=0;/**\n * The state of all supported keyboard modifiers.\n * @constructor\n */Guacamole.Keyboard.ModifierState=function(){/**\n   * Whether shift is currently pressed.\n   *\n   * @type {!boolean}\n   */this.shift=false;/**\n   * Whether ctrl is currently pressed.\n   *\n   * @type {!boolean}\n   */this.ctrl=false;/**\n   * Whether alt is currently pressed.\n   *\n   * @type {!boolean}\n   */this.alt=false;/**\n   * Whether meta (apple key) is currently pressed.\n   *\n   * @type {!boolean}\n   */this.meta=false;/**\n   * Whether hyper (windows key) is currently pressed.\n   *\n   * @type {!boolean}\n   */this.hyper=false;};/**\n * Returns the modifier state applicable to the keyboard event given.\n *\n * @param {!KeyboardEvent} e\n *     The keyboard event to read.\n *\n * @returns {!Guacamole.Keyboard.ModifierState}\n *     The current state of keyboard modifiers.\n */Guacamole.Keyboard.ModifierState.fromKeyboardEvent=function(e){var state=new Guacamole.Keyboard.ModifierState();// Assign states from old flags\nstate.shift=e.shiftKey;state.ctrl=e.ctrlKey;state.alt=e.altKey;state.meta=e.metaKey;// Use DOM3 getModifierState() for others\nif(e.getModifierState){state.hyper=e.getModifierState('OS')||e.getModifierState('Super')||e.getModifierState('Hyper')||e.getModifierState('Win');}return state;};export default Guacamole.Keyboard;","map":{"version":3,"names":["Guacamole","Keyboard","element","guac_keyboard","guacKeyboardID","_nextID","EVENT_MARKER","onkeydown","onkeyup","quirks","keyupUnreliable","altIsTypableOnly","capsLockKeyupUnreliable","navigator","platform","match","KeyEvent","orig","key_event","keyCode","which","keyIdentifier","key","location","getEventLocation","modifiers","ModifierState","fromKeyboardEvent","timestamp","Date","getTime","defaultPrevented","keysym","reliable","getAge","KeydownEvent","call","keysym_from_key_identifier","keysym_from_keycode","keyupReliable","isPrintable","key_identifier_sane","shift","meta","prevent_alt","ctrl","prevent_ctrl","alt","hyper","recentKeysym","prototype","KeypressEvent","keysym_from_charcode","KeyupEvent","pressed","eventLog","keycodeKeysyms","keyidentifier_keysym","Again","AllCandidates","Alphanumeric","Alt","Attn","AltGraph","ArrowDown","ArrowLeft","ArrowRight","ArrowUp","Backspace","CapsLock","Cancel","Clear","Convert","Copy","Crsel","CrSel","CodeInput","Compose","Control","ContextMenu","Delete","Down","End","Enter","EraseEof","Escape","Execute","Exsel","ExSel","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","Find","GroupFirst","GroupLast","GroupNext","GroupPrevious","FullWidth","HalfWidth","HangulMode","Hankaku","HanjaMode","Help","Hiragana","HiraganaKatakana","Home","Hyper","Insert","JapaneseHiragana","JapaneseKatakana","JapaneseRomaji","JunjaMode","KanaMode","KanjiMode","Katakana","Left","Meta","ModeChange","NumLock","PageDown","PageUp","Pause","Play","PreviousCandidate","PrintScreen","Redo","Right","RomanCharacters","Scroll","Select","Separator","Shift","SingleCandidate","Super","Tab","UIKeyInputDownArrow","UIKeyInputEscape","UIKeyInputLeftArrow","UIKeyInputRightArrow","UIKeyInputUpArrow","Up","Undo","Win","Zenkaku","ZenkakuHankaku","no_repeat","implicitlyPressed","last_keydown_result","key_repeat_timeout","key_repeat_interval","get_keysym","keysyms","identifier","shifted","typedCharacter","unicodePrefixLocation","indexOf","hex","substring","String","fromCharCode","parseInt","length","toUpperCase","toLowerCase","codepoint","charCodeAt","isControlCharacter","press","result","window","clearTimeout","clearInterval","setTimeout","setInterval","release","type","str","i","codePointAt","reset","updateModifierState","modifier","keyEvent","localState","remoteState","syncModifierStates","isStateImplicit","interpret_events","handled_event","interpret_event","last_event","release_simulated_altgr","first","accepted_events","splice","e","keyLocation","markEvent","listenTo","addEventListener","keydownEvent","push","preventDefault","state","shiftKey","ctrlKey","altKey","metaKey","getModifierState"],"sources":["/home/runner/work/watchparty/watchparty/src/components/VBrowser/guacamole-keyboard.js"],"sourcesContent":["/* eslint-disable */\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nvar Guacamole = Guacamole || {};\n\n/**\n * Provides cross-browser and cross-keyboard keyboard for a specific element.\n * Browser and keyboard layout variation is abstracted away, providing events\n * which represent keys as their corresponding X11 keysym.\n *\n * @constructor\n * @param {Element|Document} [element]\n *    The Element to use to provide keyboard events. If omitted, at least one\n *    Element must be manually provided through the listenTo() function for\n *    the Guacamole.Keyboard instance to have any effect.\n */\nGuacamole.Keyboard = function Keyboard(element) {\n  /**\n   * Reference to this Guacamole.Keyboard.\n   *\n   * @private\n   * @type {!Guacamole.Keyboard}\n   */\n  var guac_keyboard = this;\n\n  /**\n   * An integer value which uniquely identifies this Guacamole.Keyboard\n   * instance with respect to other Guacamole.Keyboard instances.\n   *\n   * @private\n   * @type {!number}\n   */\n  var guacKeyboardID = Guacamole.Keyboard._nextID++;\n\n  /**\n   * The name of the property which is added to event objects via markEvent()\n   * to note that they have already been handled by this Guacamole.Keyboard.\n   *\n   * @private\n   * @constant\n   * @type {!string}\n   */\n  var EVENT_MARKER = '_GUAC_KEYBOARD_HANDLED_BY_' + guacKeyboardID;\n\n  /**\n   * Fired whenever the user presses a key with the element associated\n   * with this Guacamole.Keyboard in focus.\n   *\n   * @event\n   * @param {!number} keysym\n   *     The keysym of the key being pressed.\n   *\n   * @return {!boolean}\n   *     true if the key event should be allowed through to the browser,\n   *     false otherwise.\n   */\n  this.onkeydown = null;\n\n  /**\n   * Fired whenever the user releases a key with the element associated\n   * with this Guacamole.Keyboard in focus.\n   *\n   * @event\n   * @param {!number} keysym\n   *     The keysym of the key being released.\n   */\n  this.onkeyup = null;\n\n  /**\n   * Set of known platform-specific or browser-specific quirks which must be\n   * accounted for to properly interpret key events, even if the only way to\n   * reliably detect that quirk is to platform/browser-sniff.\n   *\n   * @private\n   * @type {!Object.<string, boolean>}\n   */\n  var quirks = {\n    /**\n     * Whether keyup events are universally unreliable.\n     *\n     * @type {!boolean}\n     */\n    keyupUnreliable: false,\n\n    /**\n     * Whether the Alt key is actually a modifier for typable keys and is\n     * thus never used for keyboard shortcuts.\n     *\n     * @type {!boolean}\n     */\n    altIsTypableOnly: false,\n\n    /**\n     * Whether we can rely on receiving a keyup event for the Caps Lock\n     * key.\n     *\n     * @type {!boolean}\n     */\n    capsLockKeyupUnreliable: false,\n  };\n\n  // Set quirk flags depending on platform/browser, if such information is\n  // available\n  if (navigator && navigator.platform) {\n    // All keyup events are unreliable on iOS (sadly)\n    if (navigator.platform.match(/ipad|iphone|ipod/i))\n      quirks.keyupUnreliable = true;\n    // The Alt key on Mac is never used for keyboard shortcuts, and the\n    // Caps Lock key never dispatches keyup events\n    else if (navigator.platform.match(/^mac/i)) {\n      quirks.altIsTypableOnly = true;\n      quirks.capsLockKeyupUnreliable = true;\n    }\n  }\n\n  /**\n   * A key event having a corresponding timestamp. This event is non-specific.\n   * Its subclasses should be used instead when recording specific key\n   * events.\n   *\n   * @private\n   * @constructor\n   * @param {KeyboardEvent} [orig]\n   *     The relevant DOM keyboard event.\n   */\n  var KeyEvent = function KeyEvent(orig) {\n    /**\n     * Reference to this key event.\n     *\n     * @private\n     * @type {!KeyEvent}\n     */\n    var key_event = this;\n\n    /**\n     * The JavaScript key code of the key pressed. For most events (keydown\n     * and keyup), this is a scancode-like value related to the position of\n     * the key on the US English \"Qwerty\" keyboard. For keypress events,\n     * this is the Unicode codepoint of the character that would be typed\n     * by the key pressed.\n     *\n     * @type {!number}\n     */\n    this.keyCode = orig ? orig.which || orig.keyCode : 0;\n\n    /**\n     * The legacy DOM3 \"keyIdentifier\" of the key pressed, as defined at:\n     * http://www.w3.org/TR/2009/WD-DOM-Level-3-Events-20090908/#events-Events-KeyboardEvent\n     *\n     * @type {!string}\n     */\n    this.keyIdentifier = orig && orig.keyIdentifier;\n\n    /**\n     * The standard name of the key pressed, as defined at:\n     * http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent\n     *\n     * @type {!string}\n     */\n    this.key = orig && orig.key;\n\n    /**\n     * The location on the keyboard corresponding to the key pressed, as\n     * defined at:\n     * http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent\n     *\n     * @type {!number}\n     */\n    this.location = orig ? getEventLocation(orig) : 0;\n\n    /**\n     * The state of all local keyboard modifiers at the time this event was\n     * received.\n     *\n     * @type {!Guacamole.Keyboard.ModifierState}\n     */\n    this.modifiers = orig\n      ? Guacamole.Keyboard.ModifierState.fromKeyboardEvent(orig)\n      : new Guacamole.Keyboard.ModifierState();\n\n    /**\n     * An arbitrary timestamp in milliseconds, indicating this event's\n     * position in time relative to other events.\n     *\n     * @type {!number}\n     */\n    this.timestamp = new Date().getTime();\n\n    /**\n     * Whether the default action of this key event should be prevented.\n     *\n     * @type {!boolean}\n     */\n    this.defaultPrevented = false;\n\n    /**\n     * The keysym of the key associated with this key event, as determined\n     * by a best-effort guess using available event properties and keyboard\n     * state.\n     *\n     * @type {number}\n     */\n    this.keysym = null;\n\n    /**\n     * Whether the keysym value of this key event is known to be reliable.\n     * If false, the keysym may still be valid, but it's only a best guess,\n     * and future key events may be a better source of information.\n     *\n     * @type {!boolean}\n     */\n    this.reliable = false;\n\n    /**\n     * Returns the number of milliseconds elapsed since this event was\n     * received.\n     *\n     * @return {!number}\n     *     The number of milliseconds elapsed since this event was\n     *     received.\n     */\n    this.getAge = function () {\n      return new Date().getTime() - key_event.timestamp;\n    };\n  };\n\n  /**\n   * Information related to the pressing of a key, which need not be a key\n   * associated with a printable character. The presence or absence of any\n   * information within this object is browser-dependent.\n   *\n   * @private\n   * @constructor\n   * @augments Guacamole.Keyboard.KeyEvent\n   * @param {!KeyboardEvent} orig\n   *     The relevant DOM \"keydown\" event.\n   */\n  var KeydownEvent = function KeydownEvent(orig) {\n    // We extend KeyEvent\n    KeyEvent.call(this, orig);\n\n    // If key is known from keyCode or DOM3 alone, use that\n    this.keysym =\n      keysym_from_key_identifier(this.key, this.location) ||\n      keysym_from_keycode(this.keyCode, this.location);\n\n    /**\n     * Whether the keyup following this keydown event is known to be\n     * reliable. If false, we cannot rely on the keyup event to occur.\n     *\n     * @type {!boolean}\n     */\n    this.keyupReliable = !quirks.keyupUnreliable;\n\n    // DOM3 and keyCode are reliable sources if the corresponding key is\n    // not a printable key\n    if (this.keysym && !isPrintable(this.keysym)) this.reliable = true;\n\n    // Use legacy keyIdentifier as a last resort, if it looks sane\n    if (!this.keysym && key_identifier_sane(this.keyCode, this.keyIdentifier))\n      this.keysym = keysym_from_key_identifier(\n        this.keyIdentifier,\n        this.location,\n        this.modifiers.shift\n      );\n\n    // If a key is pressed while meta is held down, the keyup will\n    // never be sent in Chrome (bug #108404)\n    if (this.modifiers.meta && this.keysym !== 0xffe7 && this.keysym !== 0xffe8)\n      this.keyupReliable = false;\n    // We cannot rely on receiving keyup for Caps Lock on certain platforms\n    else if (this.keysym === 0xffe5 && quirks.capsLockKeyupUnreliable)\n      this.keyupReliable = false;\n\n    // Determine whether default action for Alt+combinations must be prevented\n    var prevent_alt = !this.modifiers.ctrl && !quirks.altIsTypableOnly;\n\n    // Determine whether default action for Ctrl+combinations must be prevented\n    var prevent_ctrl = !this.modifiers.alt;\n\n    // We must rely on the (potentially buggy) keyIdentifier if preventing\n    // the default action is important\n    if (\n      (prevent_ctrl && this.modifiers.ctrl) ||\n      (prevent_alt && this.modifiers.alt) ||\n      this.modifiers.meta ||\n      this.modifiers.hyper\n    )\n      this.reliable = true;\n\n    // Record most recently known keysym by associated key code\n    recentKeysym[this.keyCode] = this.keysym;\n  };\n\n  KeydownEvent.prototype = new KeyEvent();\n\n  /**\n   * Information related to the pressing of a key, which MUST be\n   * associated with a printable character. The presence or absence of any\n   * information within this object is browser-dependent.\n   *\n   * @private\n   * @constructor\n   * @augments Guacamole.Keyboard.KeyEvent\n   * @param {!KeyboardEvent} orig\n   *     The relevant DOM \"keypress\" event.\n   */\n  var KeypressEvent = function KeypressEvent(orig) {\n    // We extend KeyEvent\n    KeyEvent.call(this, orig);\n\n    // Pull keysym from char code\n    this.keysym = keysym_from_charcode(this.keyCode);\n\n    // Keypress is always reliable\n    this.reliable = true;\n  };\n\n  KeypressEvent.prototype = new KeyEvent();\n\n  /**\n   * Information related to the releasing of a key, which need not be a key\n   * associated with a printable character. The presence or absence of any\n   * information within this object is browser-dependent.\n   *\n   * @private\n   * @constructor\n   * @augments Guacamole.Keyboard.KeyEvent\n   * @param {!KeyboardEvent} orig\n   *     The relevant DOM \"keyup\" event.\n   */\n  var KeyupEvent = function KeyupEvent(orig) {\n    // We extend KeyEvent\n    KeyEvent.call(this, orig);\n\n    // If key is known from keyCode or DOM3 alone, use that (keyCode is\n    // still more reliable for keyup when dead keys are in use)\n    this.keysym =\n      keysym_from_keycode(this.keyCode, this.location) ||\n      keysym_from_key_identifier(this.key, this.location);\n\n    // Fall back to the most recently pressed keysym associated with the\n    // keyCode if the inferred key doesn't seem to actually be pressed\n    if (!guac_keyboard.pressed[this.keysym])\n      this.keysym = recentKeysym[this.keyCode] || this.keysym;\n\n    // Keyup is as reliable as it will ever be\n    this.reliable = true;\n  };\n\n  KeyupEvent.prototype = new KeyEvent();\n\n  /**\n   * An array of recorded events, which can be instances of the private\n   * KeydownEvent, KeypressEvent, and KeyupEvent classes.\n   *\n   * @private\n   * @type {!KeyEvent[]}\n   */\n  var eventLog = [];\n\n  /**\n   * Map of known JavaScript keycodes which do not map to typable characters\n   * to their X11 keysym equivalents.\n   *\n   * @private\n   * @type {!Object.<number, number[]>}\n   */\n  var keycodeKeysyms = {\n    8: [0xff08], // backspace\n    9: [0xff09], // tab\n    12: [0xff0b, 0xff0b, 0xff0b, 0xffb5], // clear       / KP 5\n    13: [0xff0d], // enter\n    16: [0xffe1, 0xffe1, 0xffe2], // shift\n    17: [0xffe3, 0xffe3, 0xffe4], // ctrl\n    18: [0xffe9, 0xffe9, 0xfe03], // alt\n    19: [0xff13], // pause/break\n    20: [0xffe5], // caps lock\n    27: [0xff1b], // escape\n    32: [0x0020], // space\n    33: [0xff55, 0xff55, 0xff55, 0xffb9], // page up     / KP 9\n    34: [0xff56, 0xff56, 0xff56, 0xffb3], // page down   / KP 3\n    35: [0xff57, 0xff57, 0xff57, 0xffb1], // end         / KP 1\n    36: [0xff50, 0xff50, 0xff50, 0xffb7], // home        / KP 7\n    37: [0xff51, 0xff51, 0xff51, 0xffb4], // left arrow  / KP 4\n    38: [0xff52, 0xff52, 0xff52, 0xffb8], // up arrow    / KP 8\n    39: [0xff53, 0xff53, 0xff53, 0xffb6], // right arrow / KP 6\n    40: [0xff54, 0xff54, 0xff54, 0xffb2], // down arrow  / KP 2\n    45: [0xff63, 0xff63, 0xff63, 0xffb0], // insert      / KP 0\n    46: [0xffff, 0xffff, 0xffff, 0xffae], // delete      / KP decimal\n    91: [0xffe7], // left windows/command key (meta_l)\n    92: [0xffe8], // right window/command key (meta_r)\n    93: [0xff67], // menu key\n    96: [0xffb0], // KP 0\n    97: [0xffb1], // KP 1\n    98: [0xffb2], // KP 2\n    99: [0xffb3], // KP 3\n    100: [0xffb4], // KP 4\n    101: [0xffb5], // KP 5\n    102: [0xffb6], // KP 6\n    103: [0xffb7], // KP 7\n    104: [0xffb8], // KP 8\n    105: [0xffb9], // KP 9\n    106: [0xffaa], // KP multiply\n    107: [0xffab], // KP add\n    109: [0xffad], // KP subtract\n    110: [0xffae], // KP decimal\n    111: [0xffaf], // KP divide\n    112: [0xffbe], // f1\n    113: [0xffbf], // f2\n    114: [0xffc0], // f3\n    115: [0xffc1], // f4\n    116: [0xffc2], // f5\n    117: [0xffc3], // f6\n    118: [0xffc4], // f7\n    119: [0xffc5], // f8\n    120: [0xffc6], // f9\n    121: [0xffc7], // f10\n    122: [0xffc8], // f11\n    123: [0xffc9], // f12\n    144: [0xff7f], // num lock\n    145: [0xff14], // scroll lock\n    225: [0xfe03], // altgraph (iso_level3_shift)\n  };\n\n  /**\n   * Map of known JavaScript keyidentifiers which do not map to typable\n   * characters to their unshifted X11 keysym equivalents.\n   *\n   * @private\n   * @type {!Object.<string, number[]>}\n   */\n  var keyidentifier_keysym = {\n    Again: [0xff66],\n    AllCandidates: [0xff3d],\n    Alphanumeric: [0xff30],\n    Alt: [0xffe9, 0xffe9, 0xfe03],\n    Attn: [0xfd0e],\n    AltGraph: [0xfe03],\n    ArrowDown: [0xff54],\n    ArrowLeft: [0xff51],\n    ArrowRight: [0xff53],\n    ArrowUp: [0xff52],\n    Backspace: [0xff08],\n    CapsLock: [0xffe5],\n    Cancel: [0xff69],\n    Clear: [0xff0b],\n    Convert: [0xff21],\n    Copy: [0xfd15],\n    Crsel: [0xfd1c],\n    CrSel: [0xfd1c],\n    CodeInput: [0xff37],\n    Compose: [0xff20],\n    Control: [0xffe3, 0xffe3, 0xffe4],\n    ContextMenu: [0xff67],\n    Delete: [0xffff],\n    Down: [0xff54],\n    End: [0xff57],\n    Enter: [0xff0d],\n    EraseEof: [0xfd06],\n    Escape: [0xff1b],\n    Execute: [0xff62],\n    Exsel: [0xfd1d],\n    ExSel: [0xfd1d],\n    F1: [0xffbe],\n    F2: [0xffbf],\n    F3: [0xffc0],\n    F4: [0xffc1],\n    F5: [0xffc2],\n    F6: [0xffc3],\n    F7: [0xffc4],\n    F8: [0xffc5],\n    F9: [0xffc6],\n    F10: [0xffc7],\n    F11: [0xffc8],\n    F12: [0xffc9],\n    F13: [0xffca],\n    F14: [0xffcb],\n    F15: [0xffcc],\n    F16: [0xffcd],\n    F17: [0xffce],\n    F18: [0xffcf],\n    F19: [0xffd0],\n    F20: [0xffd1],\n    F21: [0xffd2],\n    F22: [0xffd3],\n    F23: [0xffd4],\n    F24: [0xffd5],\n    Find: [0xff68],\n    GroupFirst: [0xfe0c],\n    GroupLast: [0xfe0e],\n    GroupNext: [0xfe08],\n    GroupPrevious: [0xfe0a],\n    FullWidth: null,\n    HalfWidth: null,\n    HangulMode: [0xff31],\n    Hankaku: [0xff29],\n    HanjaMode: [0xff34],\n    Help: [0xff6a],\n    Hiragana: [0xff25],\n    HiraganaKatakana: [0xff27],\n    Home: [0xff50],\n    Hyper: [0xffed, 0xffed, 0xffee],\n    Insert: [0xff63],\n    JapaneseHiragana: [0xff25],\n    JapaneseKatakana: [0xff26],\n    JapaneseRomaji: [0xff24],\n    JunjaMode: [0xff38],\n    KanaMode: [0xff2d],\n    KanjiMode: [0xff21],\n    Katakana: [0xff26],\n    Left: [0xff51],\n    Meta: [0xffe7, 0xffe7, 0xffe8],\n    ModeChange: [0xff7e],\n    NumLock: [0xff7f],\n    PageDown: [0xff56],\n    PageUp: [0xff55],\n    Pause: [0xff13],\n    Play: [0xfd16],\n    PreviousCandidate: [0xff3e],\n    PrintScreen: [0xff61],\n    Redo: [0xff66],\n    Right: [0xff53],\n    RomanCharacters: null,\n    Scroll: [0xff14],\n    Select: [0xff60],\n    Separator: [0xffac],\n    Shift: [0xffe1, 0xffe1, 0xffe2],\n    SingleCandidate: [0xff3c],\n    Super: [0xffeb, 0xffeb, 0xffec],\n    Tab: [0xff09],\n    UIKeyInputDownArrow: [0xff54],\n    UIKeyInputEscape: [0xff1b],\n    UIKeyInputLeftArrow: [0xff51],\n    UIKeyInputRightArrow: [0xff53],\n    UIKeyInputUpArrow: [0xff52],\n    Up: [0xff52],\n    Undo: [0xff65],\n    Win: [0xffe7, 0xffe7, 0xffe8],\n    Zenkaku: [0xff28],\n    ZenkakuHankaku: [0xff2a],\n  };\n\n  /**\n   * All keysyms which should not repeat when held down.\n   *\n   * @private\n   * @type {!Object.<number, boolean>}\n   */\n  var no_repeat = {\n    0xfe03: true, // ISO Level 3 Shift (AltGr)\n    0xffe1: true, // Left shift\n    0xffe2: true, // Right shift\n    0xffe3: true, // Left ctrl\n    0xffe4: true, // Right ctrl\n    0xffe5: true, // Caps Lock\n    0xffe7: true, // Left meta\n    0xffe8: true, // Right meta\n    0xffe9: true, // Left alt\n    0xffea: true, // Right alt\n    0xffeb: true, // Left super/hyper\n    0xffec: true, // Right super/hyper\n  };\n\n  /**\n   * All modifiers and their states.\n   *\n   * @type {!Guacamole.Keyboard.ModifierState}\n   */\n  this.modifiers = new Guacamole.Keyboard.ModifierState();\n\n  /**\n   * The state of every key, indexed by keysym. If a particular key is\n   * pressed, the value of pressed for that keysym will be true. If a key\n   * is not currently pressed, it will not be defined.\n   *\n   * @type {!Object.<number, boolean>}\n   */\n  this.pressed = {};\n\n  /**\n   * The state of every key, indexed by keysym, for strictly those keys whose\n   * status has been indirectly determined thorugh observation of other key\n   * events. If a particular key is implicitly pressed, the value of\n   * implicitlyPressed for that keysym will be true. If a key\n   * is not currently implicitly pressed (the key is not pressed OR the state\n   * of the key is explicitly known), it will not be defined.\n   *\n   * @private\n   * @type {!Object.<number, boolean>}\n   */\n  var implicitlyPressed = {};\n\n  /**\n   * The last result of calling the onkeydown handler for each key, indexed\n   * by keysym. This is used to prevent/allow default actions for key events,\n   * even when the onkeydown handler cannot be called again because the key\n   * is (theoretically) still pressed.\n   *\n   * @private\n   * @type {!Object.<number, boolean>}\n   */\n  var last_keydown_result = {};\n\n  /**\n   * The keysym most recently associated with a given keycode when keydown\n   * fired. This object maps keycodes to keysyms.\n   *\n   * @private\n   * @type {!Object.<number, number>}\n   */\n  var recentKeysym = {};\n\n  /**\n   * Timeout before key repeat starts.\n   *\n   * @private\n   * @type {number}\n   */\n  var key_repeat_timeout = null;\n\n  /**\n   * Interval which presses and releases the last key pressed while that\n   * key is still being held down.\n   *\n   * @private\n   * @type {number}\n   */\n  var key_repeat_interval = null;\n\n  /**\n   * Given an array of keysyms indexed by location, returns the keysym\n   * for the given location, or the keysym for the standard location if\n   * undefined.\n   *\n   * @private\n   * @param {number[]} keysyms\n   *     An array of keysyms, where the index of the keysym in the array is\n   *     the location value.\n   *\n   * @param {!number} location\n   *     The location on the keyboard corresponding to the key pressed, as\n   *     defined at: http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent\n   */\n  var get_keysym = function get_keysym(keysyms, location) {\n    if (!keysyms) return null;\n\n    return keysyms[location] || keysyms[0];\n  };\n\n  /**\n   * Returns true if the given keysym corresponds to a printable character,\n   * false otherwise.\n   *\n   * @param {!number} keysym\n   *     The keysym to check.\n   *\n   * @returns {!boolean}\n   *     true if the given keysym corresponds to a printable character,\n   *     false otherwise.\n   */\n  var isPrintable = function isPrintable(keysym) {\n    // Keysyms with Unicode equivalents are printable\n    return (\n      (keysym >= 0x00 && keysym <= 0xff) || (keysym & 0xffff0000) === 0x01000000\n    );\n  };\n\n  function keysym_from_key_identifier(identifier, location, shifted) {\n    if (!identifier) return null;\n\n    var typedCharacter;\n\n    // If identifier is U+xxxx, decode Unicode character\n    var unicodePrefixLocation = identifier.indexOf('U+');\n    if (unicodePrefixLocation >= 0) {\n      var hex = identifier.substring(unicodePrefixLocation + 2);\n      typedCharacter = String.fromCharCode(parseInt(hex, 16));\n    }\n\n    // If single character and not keypad, use that as typed character\n    else if (identifier.length === 1 && location !== 3)\n      typedCharacter = identifier;\n    // Otherwise, look up corresponding keysym\n    else return get_keysym(keyidentifier_keysym[identifier], location);\n\n    // Alter case if necessary\n    if (shifted === true) typedCharacter = typedCharacter.toUpperCase();\n    else if (shifted === false) typedCharacter = typedCharacter.toLowerCase();\n\n    // Get codepoint\n    var codepoint = typedCharacter.charCodeAt(0);\n    return keysym_from_charcode(codepoint);\n  }\n\n  function isControlCharacter(codepoint) {\n    return codepoint <= 0x1f || (codepoint >= 0x7f && codepoint <= 0x9f);\n  }\n\n  function keysym_from_charcode(codepoint) {\n    // Keysyms for control characters\n    if (isControlCharacter(codepoint)) return 0xff00 | codepoint;\n\n    // Keysyms for ASCII chars\n    if (codepoint >= 0x0000 && codepoint <= 0x00ff) return codepoint;\n\n    // Keysyms for Unicode\n    if (codepoint >= 0x0100 && codepoint <= 0x10ffff)\n      return 0x01000000 | codepoint;\n\n    return null;\n  }\n\n  function keysym_from_keycode(keyCode, location) {\n    return get_keysym(keycodeKeysyms[keyCode], location);\n  }\n\n  /**\n   * Heuristically detects if the legacy keyIdentifier property of\n   * a keydown/keyup event looks incorrectly derived. Chrome, and\n   * presumably others, will produce the keyIdentifier by assuming\n   * the keyCode is the Unicode codepoint for that key. This is not\n   * correct in all cases.\n   *\n   * @private\n   * @param {!number} keyCode\n   *     The keyCode from a browser keydown/keyup event.\n   *\n   * @param {string} keyIdentifier\n   *     The legacy keyIdentifier from a browser keydown/keyup event.\n   *\n   * @returns {!boolean}\n   *     true if the keyIdentifier looks sane, false if the keyIdentifier\n   *     appears incorrectly derived or is missing entirely.\n   */\n  var key_identifier_sane = function key_identifier_sane(\n    keyCode,\n    keyIdentifier\n  ) {\n    // Missing identifier is not sane\n    if (!keyIdentifier) return false;\n\n    // Assume non-Unicode keyIdentifier values are sane\n    var unicodePrefixLocation = keyIdentifier.indexOf('U+');\n    if (unicodePrefixLocation === -1) return true;\n\n    // If the Unicode codepoint isn't identical to the keyCode,\n    // then the identifier is likely correct\n    var codepoint = parseInt(\n      keyIdentifier.substring(unicodePrefixLocation + 2),\n      16\n    );\n    if (keyCode !== codepoint) return true;\n\n    // The keyCodes for A-Z and 0-9 are actually identical to their\n    // Unicode codepoints\n    if ((keyCode >= 65 && keyCode <= 90) || (keyCode >= 48 && keyCode <= 57))\n      return true;\n\n    // The keyIdentifier does NOT appear sane\n    return false;\n  };\n\n  /**\n   * Marks a key as pressed, firing the keydown event if registered. Key\n   * repeat for the pressed key will start after a delay if that key is\n   * not a modifier. The return value of this function depends on the\n   * return value of the keydown event handler, if any.\n   *\n   * @param {number} keysym\n   *     The keysym of the key to press.\n   *\n   * @return {boolean}\n   *     true if event should NOT be canceled, false otherwise.\n   */\n  this.press = function (keysym) {\n    // Don't bother with pressing the key if the key is unknown\n    if (keysym === null) return;\n\n    // Only press if released\n    if (!guac_keyboard.pressed[keysym]) {\n      // Mark key as pressed\n      guac_keyboard.pressed[keysym] = true;\n\n      // Send key event\n      if (guac_keyboard.onkeydown) {\n        var result = guac_keyboard.onkeydown(keysym);\n        last_keydown_result[keysym] = result;\n\n        // Stop any current repeat\n        window.clearTimeout(key_repeat_timeout);\n        window.clearInterval(key_repeat_interval);\n\n        // Repeat after a delay as long as pressed\n        if (!no_repeat[keysym])\n          key_repeat_timeout = window.setTimeout(function () {\n            key_repeat_interval = window.setInterval(function () {\n              guac_keyboard.onkeyup(keysym);\n              guac_keyboard.onkeydown(keysym);\n            }, 50);\n          }, 500);\n\n        return result;\n      }\n    }\n\n    // Return the last keydown result by default, resort to false if unknown\n    return last_keydown_result[keysym] || false;\n  };\n\n  /**\n   * Marks a key as released, firing the keyup event if registered.\n   *\n   * @param {number} keysym\n   *     The keysym of the key to release.\n   */\n  this.release = function (keysym) {\n    // Only release if pressed\n    if (guac_keyboard.pressed[keysym]) {\n      // Mark key as released\n      delete guac_keyboard.pressed[keysym];\n      delete implicitlyPressed[keysym];\n\n      // Stop repeat\n      window.clearTimeout(key_repeat_timeout);\n      window.clearInterval(key_repeat_interval);\n\n      // Send key event\n      if (keysym !== null && guac_keyboard.onkeyup)\n        guac_keyboard.onkeyup(keysym);\n    }\n  };\n\n  /**\n   * Presses and releases the keys necessary to type the given string of\n   * text.\n   *\n   * @param {!string} str\n   *     The string to type.\n   */\n  this.type = function type(str) {\n    // Press/release the key corresponding to each character in the string\n    for (var i = 0; i < str.length; i++) {\n      // Determine keysym of current character\n      var codepoint = str.codePointAt ? str.codePointAt(i) : str.charCodeAt(i);\n      var keysym = keysym_from_charcode(codepoint);\n\n      // Press and release key for current character\n      guac_keyboard.press(keysym);\n      guac_keyboard.release(keysym);\n    }\n  };\n\n  /**\n   * Resets the state of this keyboard, releasing all keys, and firing keyup\n   * events for each released key.\n   */\n  this.reset = function () {\n    // Release all pressed keys\n    for (var keysym in guac_keyboard.pressed)\n      guac_keyboard.release(parseInt(keysym));\n\n    // Clear event log\n    eventLog = [];\n  };\n\n  /**\n   * Resynchronizes the remote state of the given modifier with its\n   * corresponding local modifier state, as dictated by\n   * {@link KeyEvent#modifiers} within the given key event, by pressing or\n   * releasing keysyms.\n   *\n   * @private\n   * @param {!string} modifier\n   *     The name of the {@link Guacamole.Keyboard.ModifierState} property\n   *     being updated.\n   *\n   * @param {!number[]} keysyms\n   *     The keysyms which represent the modifier being updated.\n   *\n   * @param {!KeyEvent} keyEvent\n   *     Guacamole's current best interpretation of the key event being\n   *     processed.\n   */\n  var updateModifierState = function updateModifierState(\n    modifier,\n    keysyms,\n    keyEvent\n  ) {\n    var localState = keyEvent.modifiers[modifier];\n    var remoteState = guac_keyboard.modifiers[modifier];\n\n    var i;\n\n    // Do not trust changes in modifier state for events directly involving\n    // that modifier: (1) the flag may erroneously be cleared despite\n    // another version of the same key still being held and (2) the change\n    // in flag may be due to the current event being processed, thus\n    // updating things here is at best redundant and at worst incorrect\n    if (keysyms.indexOf(keyEvent.keysym) !== -1) return;\n\n    // Release all related keys if modifier is implicitly released\n    if (remoteState && localState === false) {\n      for (i = 0; i < keysyms.length; i++) {\n        guac_keyboard.release(keysyms[i]);\n      }\n    }\n\n    // Press if modifier is implicitly pressed\n    else if (!remoteState && localState) {\n      // Verify that modifier flag isn't already pressed or already set\n      // due to another version of the same key being held down\n      for (i = 0; i < keysyms.length; i++) {\n        if (guac_keyboard.pressed[keysyms[i]]) return;\n      }\n\n      // Mark as implicitly pressed only if there is other information\n      // within the key event relating to a different key. Some\n      // platforms, such as iOS, will send essentially empty key events\n      // for modifier keys, using only the modifier flags to signal the\n      // identity of the key.\n      var keysym = keysyms[0];\n      if (keyEvent.keysym) implicitlyPressed[keysym] = true;\n\n      guac_keyboard.press(keysym);\n    }\n  };\n\n  /**\n   * Given a keyboard event, updates the remote key state to match the local\n   * modifier state and remote based on the modifier flags within the event.\n   * This function pays no attention to keycodes.\n   *\n   * @private\n   * @param {!KeyEvent} keyEvent\n   *     Guacamole's current best interpretation of the key event being\n   *     processed.\n   */\n  var syncModifierStates = function syncModifierStates(keyEvent) {\n    // Resync state of alt\n    updateModifierState(\n      'alt',\n      [\n        0xffe9, // Left alt\n        0xffea, // Right alt\n        0xfe03, // AltGr\n      ],\n      keyEvent\n    );\n\n    // Resync state of shift\n    updateModifierState(\n      'shift',\n      [\n        0xffe1, // Left shift\n        0xffe2, // Right shift\n      ],\n      keyEvent\n    );\n\n    // Resync state of ctrl\n    updateModifierState(\n      'ctrl',\n      [\n        0xffe3, // Left ctrl\n        0xffe4, // Right ctrl\n      ],\n      keyEvent\n    );\n\n    // Resync state of meta\n    updateModifierState(\n      'meta',\n      [\n        0xffe7, // Left meta\n        0xffe8, // Right meta\n      ],\n      keyEvent\n    );\n\n    // Resync state of hyper\n    updateModifierState(\n      'hyper',\n      [\n        0xffeb, // Left super/hyper\n        0xffec, // Right super/hyper\n      ],\n      keyEvent\n    );\n\n    // Update state\n    guac_keyboard.modifiers = keyEvent.modifiers;\n  };\n\n  /**\n   * Returns whether all currently pressed keys were implicitly pressed. A\n   * key is implicitly pressed if its status was inferred indirectly from\n   * inspection of other key events.\n   *\n   * @private\n   * @returns {!boolean}\n   *     true if all currently pressed keys were implicitly pressed, false\n   *     otherwise.\n   */\n  var isStateImplicit = function isStateImplicit() {\n    for (var keysym in guac_keyboard.pressed) {\n      if (!implicitlyPressed[keysym]) return false;\n    }\n\n    return true;\n  };\n\n  /**\n   * Reads through the event log, removing events from the head of the log\n   * when the corresponding true key presses are known (or as known as they\n   * can be).\n   *\n   * @private\n   * @return {boolean}\n   *     Whether the default action of the latest event should be prevented.\n   */\n  function interpret_events() {\n    // Do not prevent default if no event could be interpreted\n    var handled_event = interpret_event();\n    if (!handled_event) return false;\n\n    // Interpret as much as possible\n    var last_event;\n    do {\n      last_event = handled_event;\n      handled_event = interpret_event();\n    } while (handled_event !== null);\n\n    // Reset keyboard state if we cannot expect to receive any further\n    // keyup events\n    if (isStateImplicit()) guac_keyboard.reset();\n\n    return last_event.defaultPrevented;\n  }\n\n  /**\n   * Releases Ctrl+Alt, if both are currently pressed and the given keysym\n   * looks like a key that may require AltGr.\n   *\n   * @private\n   * @param {!number} keysym\n   *     The key that was just pressed.\n   */\n  var release_simulated_altgr = function release_simulated_altgr(keysym) {\n    // Both Ctrl+Alt must be pressed if simulated AltGr is in use\n    if (!guac_keyboard.modifiers.ctrl || !guac_keyboard.modifiers.alt) return;\n\n    // Assume [A-Z] never require AltGr\n    if (keysym >= 0x0041 && keysym <= 0x005a) return;\n\n    // Assume [a-z] never require AltGr\n    if (keysym >= 0x0061 && keysym <= 0x007a) return;\n\n    // Release Ctrl+Alt if the keysym is printable\n    if (keysym <= 0xff || (keysym & 0xff000000) === 0x01000000) {\n      guac_keyboard.release(0xffe3); // Left ctrl\n      guac_keyboard.release(0xffe4); // Right ctrl\n      guac_keyboard.release(0xffe9); // Left alt\n      guac_keyboard.release(0xffea); // Right alt\n    }\n  };\n\n  /**\n   * Reads through the event log, interpreting the first event, if possible,\n   * and returning that event. If no events can be interpreted, due to a\n   * total lack of events or the need for more events, null is returned. Any\n   * interpreted events are automatically removed from the log.\n   *\n   * @private\n   * @return {KeyEvent}\n   *     The first key event in the log, if it can be interpreted, or null\n   *     otherwise.\n   */\n  var interpret_event = function interpret_event() {\n    // Peek at first event in log\n    var first = eventLog[0];\n    if (!first) return null;\n\n    // Keydown event\n    if (first instanceof KeydownEvent) {\n      var keysym = null;\n      var accepted_events = [];\n\n      // Defer handling of Meta until it is known to be functioning as a\n      // modifier (it may otherwise actually be an alternative method for\n      // pressing a single key, such as Meta+Left for Home on ChromeOS)\n      if (first.keysym === 0xffe7 || first.keysym === 0xffe8) {\n        // Defer handling until further events exist to provide context\n        if (eventLog.length === 1) return null;\n\n        // Drop keydown if it turns out Meta does not actually apply\n        if (eventLog[1].keysym !== first.keysym) {\n          if (!eventLog[1].modifiers.meta) return eventLog.shift();\n        }\n\n        // Drop duplicate keydown events while waiting to determine\n        // whether to acknowledge Meta (browser may repeat keydown\n        // while the key is held)\n        else if (eventLog[1] instanceof KeydownEvent) return eventLog.shift();\n      }\n\n      // If event itself is reliable, no need to wait for other events\n      if (first.reliable) {\n        keysym = first.keysym;\n        accepted_events = eventLog.splice(0, 1);\n      }\n\n      // If keydown is immediately followed by a keypress, use the indicated character\n      else if (eventLog[1] instanceof KeypressEvent) {\n        keysym = eventLog[1].keysym;\n        accepted_events = eventLog.splice(0, 2);\n      }\n\n      // If keydown is immediately followed by anything else, then no\n      // keypress can possibly occur to clarify this event, and we must\n      // handle it now\n      else if (eventLog[1]) {\n        keysym = first.keysym;\n        accepted_events = eventLog.splice(0, 1);\n      }\n\n      // Fire a key press if valid events were found\n      if (accepted_events.length > 0) {\n        syncModifierStates(first);\n\n        if (keysym) {\n          // Fire event\n          release_simulated_altgr(keysym);\n          var defaultPrevented = !guac_keyboard.press(keysym);\n          recentKeysym[first.keyCode] = keysym;\n\n          // Release the key now if we cannot rely on the associated\n          // keyup event\n          if (!first.keyupReliable) guac_keyboard.release(keysym);\n\n          // Record whether default was prevented\n          for (var i = 0; i < accepted_events.length; i++)\n            accepted_events[i].defaultPrevented = defaultPrevented;\n        }\n\n        return first;\n      }\n    } // end if keydown\n\n    // Keyup event\n    else if (first instanceof KeyupEvent && !quirks.keyupUnreliable) {\n      // Release specific key if known\n      var keysym = first.keysym;\n      if (keysym) {\n        guac_keyboard.release(keysym);\n        delete recentKeysym[first.keyCode];\n        first.defaultPrevented = true;\n      }\n\n      // Otherwise, fall back to releasing all keys\n      else {\n        guac_keyboard.reset();\n        return first;\n      }\n\n      syncModifierStates(first);\n      return eventLog.shift();\n    } // end if keyup\n\n    // Ignore any other type of event (keypress by itself is invalid, and\n    // unreliable keyup events should simply be dumped)\n    else return eventLog.shift();\n\n    // No event interpreted\n    return null;\n  };\n\n  /**\n   * Returns the keyboard location of the key associated with the given\n   * keyboard event. The location differentiates key events which otherwise\n   * have the same keycode, such as left shift vs. right shift.\n   *\n   * @private\n   * @param {!KeyboardEvent} e\n   *     A JavaScript keyboard event, as received through the DOM via a\n   *     \"keydown\", \"keyup\", or \"keypress\" handler.\n   *\n   * @returns {!number}\n   *     The location of the key event on the keyboard, as defined at:\n   *     http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent\n   */\n  var getEventLocation = function getEventLocation(e) {\n    // Use standard location, if possible\n    if ('location' in e) return e.location;\n\n    // Failing that, attempt to use deprecated keyLocation\n    if ('keyLocation' in e) return e.keyLocation;\n\n    // If no location is available, assume left side\n    return 0;\n  };\n\n  /**\n   * Attempts to mark the given Event as having been handled by this\n   * Guacamole.Keyboard. If the Event has already been marked as handled,\n   * false is returned.\n   *\n   * @param {!Event} e\n   *     The Event to mark.\n   *\n   * @returns {!boolean}\n   *     true if the given Event was successfully marked, false if the given\n   *     Event was already marked.\n   */\n  var markEvent = function markEvent(e) {\n    // Fail if event is already marked\n    if (e[EVENT_MARKER]) return false;\n\n    // Mark event otherwise\n    e[EVENT_MARKER] = true;\n    return true;\n  };\n\n  /**\n   * Attaches event listeners to the given Element, automatically translating\n   * received key, input, and composition events into simple keydown/keyup\n   * events signalled through this Guacamole.Keyboard's onkeydown and\n   * onkeyup handlers.\n   *\n   * @param {!(Element|Document)} element\n   *     The Element to attach event listeners to for the sake of handling\n   *     key or input events.\n   */\n  this.listenTo = function listenTo(element) {\n    // When key pressed\n    element.addEventListener(\n      'keydown',\n      function (e) {\n        // Only intercept if handler set\n        if (!guac_keyboard.onkeydown) return;\n\n        // Ignore events which have already been handled\n        if (!markEvent(e)) return;\n\n        var keydownEvent = new KeydownEvent(e);\n\n        // Ignore (but do not prevent) the \"composition\" keycode sent by some\n        // browsers when an IME is in use (see: http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html)\n        if (keydownEvent.keyCode === 229) return;\n\n        // Log event\n        eventLog.push(keydownEvent);\n\n        // Interpret as many events as possible, prevent default if indicated\n        if (interpret_events()) e.preventDefault();\n      },\n      true\n    );\n\n    // When key pressed\n    element.addEventListener(\n      'keypress',\n      function (e) {\n        // Only intercept if handler set\n        if (!guac_keyboard.onkeydown && !guac_keyboard.onkeyup) return;\n\n        // Ignore events which have already been handled\n        if (!markEvent(e)) return;\n\n        // Log event\n        eventLog.push(new KeypressEvent(e));\n\n        // Interpret as many events as possible, prevent default if indicated\n        if (interpret_events()) e.preventDefault();\n      },\n      true\n    );\n\n    // When key released\n    element.addEventListener(\n      'keyup',\n      function (e) {\n        // Only intercept if handler set\n        if (!guac_keyboard.onkeyup) return;\n\n        // Ignore events which have already been handled\n        if (!markEvent(e)) return;\n\n        e.preventDefault();\n\n        // Log event, call for interpretation\n        eventLog.push(new KeyupEvent(e));\n        interpret_events();\n      },\n      true\n    );\n\n    // NEKO: Do not automatically type text entered into the wrapped field\n  };\n\n  // Listen to given element, if any\n  if (element) guac_keyboard.listenTo(element);\n};\n\n/**\n * The unique numerical identifier to assign to the next Guacamole.Keyboard\n * instance.\n *\n * @private\n * @type {!number}\n */\nGuacamole.Keyboard._nextID = 0;\n\n/**\n * The state of all supported keyboard modifiers.\n * @constructor\n */\nGuacamole.Keyboard.ModifierState = function () {\n  /**\n   * Whether shift is currently pressed.\n   *\n   * @type {!boolean}\n   */\n  this.shift = false;\n\n  /**\n   * Whether ctrl is currently pressed.\n   *\n   * @type {!boolean}\n   */\n  this.ctrl = false;\n\n  /**\n   * Whether alt is currently pressed.\n   *\n   * @type {!boolean}\n   */\n  this.alt = false;\n\n  /**\n   * Whether meta (apple key) is currently pressed.\n   *\n   * @type {!boolean}\n   */\n  this.meta = false;\n\n  /**\n   * Whether hyper (windows key) is currently pressed.\n   *\n   * @type {!boolean}\n   */\n  this.hyper = false;\n};\n\n/**\n * Returns the modifier state applicable to the keyboard event given.\n *\n * @param {!KeyboardEvent} e\n *     The keyboard event to read.\n *\n * @returns {!Guacamole.Keyboard.ModifierState}\n *     The current state of keyboard modifiers.\n */\nGuacamole.Keyboard.ModifierState.fromKeyboardEvent = function (e) {\n  var state = new Guacamole.Keyboard.ModifierState();\n\n  // Assign states from old flags\n  state.shift = e.shiftKey;\n  state.ctrl = e.ctrlKey;\n  state.alt = e.altKey;\n  state.meta = e.metaKey;\n\n  // Use DOM3 getModifierState() for others\n  if (e.getModifierState) {\n    state.hyper =\n      e.getModifierState('OS') ||\n      e.getModifierState('Super') ||\n      e.getModifierState('Hyper') ||\n      e.getModifierState('Win');\n  }\n\n  return state;\n};\n\nexport default Guacamole.Keyboard;\n"],"mappings":"AAAA,oB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,GAAIA,UAAS,CAAGA,SAAS,EAAI,EAA7B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACAA,SAAS,CAACC,QAAV,CAAqB,QAASA,SAAT,CAAkBC,OAAlB,CAA2B,CAC9C;AACF;AACA;AACA;AACA;AACA,KACE,GAAIC,cAAa,CAAG,IAApB,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,GAAIC,eAAc,CAAGJ,SAAS,CAACC,QAAV,CAAmBI,OAAnB,EAArB,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIC,aAAY,CAAG,6BAA+BF,cAAlD,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,KAAKG,SAAL,CAAiB,IAAjB,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,KAAKC,OAAL,CAAe,IAAf,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIC,OAAM,CAAG,CACX;AACJ;AACA;AACA;AACA,OACIC,eAAe,CAAE,KANN,CAQX;AACJ;AACA;AACA;AACA;AACA,OACIC,gBAAgB,CAAE,KAdP,CAgBX;AACJ;AACA;AACA;AACA;AACA,OACIC,uBAAuB,CAAE,KAtBd,CAAb,CAyBA;AACA;AACA,GAAIC,SAAS,EAAIA,SAAS,CAACC,QAA3B,CAAqC,CACnC;AACA,GAAID,SAAS,CAACC,QAAV,CAAmBC,KAAnB,CAAyB,mBAAzB,CAAJ,CACEN,MAAM,CAACC,eAAP,CAAyB,IAAzB,CACF;AACA;AAHA,IAIK,IAAIG,SAAS,CAACC,QAAV,CAAmBC,KAAnB,CAAyB,OAAzB,CAAJ,CAAuC,CAC1CN,MAAM,CAACE,gBAAP,CAA0B,IAA1B,CACAF,MAAM,CAACG,uBAAP,CAAiC,IAAjC,CACD,CACF,CAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAII,SAAQ,CAAG,QAASA,SAAT,CAAkBC,IAAlB,CAAwB,CACrC;AACJ;AACA;AACA;AACA;AACA,OACI,GAAIC,UAAS,CAAG,IAAhB,CAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACI,KAAKC,OAAL,CAAeF,IAAI,CAAGA,IAAI,CAACG,KAAL,EAAcH,IAAI,CAACE,OAAtB,CAAgC,CAAnD,CAEA;AACJ;AACA;AACA;AACA;AACA,OACI,KAAKE,aAAL,CAAqBJ,IAAI,EAAIA,IAAI,CAACI,aAAlC,CAEA;AACJ;AACA;AACA;AACA;AACA,OACI,KAAKC,GAAL,CAAWL,IAAI,EAAIA,IAAI,CAACK,GAAxB,CAEA;AACJ;AACA;AACA;AACA;AACA;AACA,OACI,KAAKC,QAAL,CAAgBN,IAAI,CAAGO,gBAAgB,CAACP,IAAD,CAAnB,CAA4B,CAAhD,CAEA;AACJ;AACA;AACA;AACA;AACA,OACI,KAAKQ,SAAL,CAAiBR,IAAI,CACjBjB,SAAS,CAACC,QAAV,CAAmByB,aAAnB,CAAiCC,iBAAjC,CAAmDV,IAAnD,CADiB,CAEjB,GAAIjB,UAAS,CAACC,QAAV,CAAmByB,aAAvB,EAFJ,CAIA;AACJ;AACA;AACA;AACA;AACA,OACI,KAAKE,SAAL,CAAiB,GAAIC,KAAJ,GAAWC,OAAX,EAAjB,CAEA;AACJ;AACA;AACA;AACA,OACI,KAAKC,gBAAL,CAAwB,KAAxB,CAEA;AACJ;AACA;AACA;AACA;AACA;AACA,OACI,KAAKC,MAAL,CAAc,IAAd,CAEA;AACJ;AACA;AACA;AACA;AACA;AACA,OACI,KAAKC,QAAL,CAAgB,KAAhB,CAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OACI,KAAKC,MAAL,CAAc,UAAY,CACxB,MAAO,IAAIL,KAAJ,GAAWC,OAAX,GAAuBZ,SAAS,CAACU,SAAxC,CACD,CAFD,CAGD,CAnGD,CAqGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIO,aAAY,CAAG,QAASA,aAAT,CAAsBlB,IAAtB,CAA4B,CAC7C;AACAD,QAAQ,CAACoB,IAAT,CAAc,IAAd,CAAoBnB,IAApB,EAEA;AACA,KAAKe,MAAL,CACEK,0BAA0B,CAAC,KAAKf,GAAN,CAAW,KAAKC,QAAhB,CAA1B,EACAe,mBAAmB,CAAC,KAAKnB,OAAN,CAAe,KAAKI,QAApB,CAFrB,CAIA;AACJ;AACA;AACA;AACA;AACA,OACI,KAAKgB,aAAL,CAAqB,CAAC9B,MAAM,CAACC,eAA7B,CAEA;AACA;AACA,GAAI,KAAKsB,MAAL,EAAe,CAACQ,WAAW,CAAC,KAAKR,MAAN,CAA/B,CAA8C,KAAKC,QAAL,CAAgB,IAAhB,CAE9C;AACA,GAAI,CAAC,KAAKD,MAAN,EAAgBS,mBAAmB,CAAC,KAAKtB,OAAN,CAAe,KAAKE,aAApB,CAAvC,CACE,KAAKW,MAAL,CAAcK,0BAA0B,CACtC,KAAKhB,aADiC,CAEtC,KAAKE,QAFiC,CAGtC,KAAKE,SAAL,CAAeiB,KAHuB,CAAxC,CAMF;AACA;AACA,GAAI,KAAKjB,SAAL,CAAekB,IAAf,EAAuB,KAAKX,MAAL,GAAgB,MAAvC,EAAiD,KAAKA,MAAL,GAAgB,MAArE,CACE,KAAKO,aAAL,CAAqB,KAArB,CACF;AAFA,IAGK,IAAI,KAAKP,MAAL,GAAgB,MAAhB,EAA0BvB,MAAM,CAACG,uBAArC,CACH,KAAK2B,aAAL,CAAqB,KAArB,CAEF;AACA,GAAIK,YAAW,CAAG,CAAC,KAAKnB,SAAL,CAAeoB,IAAhB,EAAwB,CAACpC,MAAM,CAACE,gBAAlD,CAEA;AACA,GAAImC,aAAY,CAAG,CAAC,KAAKrB,SAAL,CAAesB,GAAnC,CAEA;AACA;AACA,GACGD,YAAY,EAAI,KAAKrB,SAAL,CAAeoB,IAAhC,EACCD,WAAW,EAAI,KAAKnB,SAAL,CAAesB,GAD/B,EAEA,KAAKtB,SAAL,CAAekB,IAFf,EAGA,KAAKlB,SAAL,CAAeuB,KAJjB,CAME,KAAKf,QAAL,CAAgB,IAAhB,CAEF;AACAgB,YAAY,CAAC,KAAK9B,OAAN,CAAZ,CAA6B,KAAKa,MAAlC,CACD,CAvDD,CAyDAG,YAAY,CAACe,SAAb,CAAyB,GAAIlC,SAAJ,EAAzB,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAImC,cAAa,CAAG,QAASA,cAAT,CAAuBlC,IAAvB,CAA6B,CAC/C;AACAD,QAAQ,CAACoB,IAAT,CAAc,IAAd,CAAoBnB,IAApB,EAEA;AACA,KAAKe,MAAL,CAAcoB,oBAAoB,CAAC,KAAKjC,OAAN,CAAlC,CAEA;AACA,KAAKc,QAAL,CAAgB,IAAhB,CACD,CATD,CAWAkB,aAAa,CAACD,SAAd,CAA0B,GAAIlC,SAAJ,EAA1B,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIqC,WAAU,CAAG,QAASA,WAAT,CAAoBpC,IAApB,CAA0B,CACzC;AACAD,QAAQ,CAACoB,IAAT,CAAc,IAAd,CAAoBnB,IAApB,EAEA;AACA;AACA,KAAKe,MAAL,CACEM,mBAAmB,CAAC,KAAKnB,OAAN,CAAe,KAAKI,QAApB,CAAnB,EACAc,0BAA0B,CAAC,KAAKf,GAAN,CAAW,KAAKC,QAAhB,CAF5B,CAIA;AACA;AACA,GAAI,CAACpB,aAAa,CAACmD,OAAd,CAAsB,KAAKtB,MAA3B,CAAL,CACE,KAAKA,MAAL,CAAciB,YAAY,CAAC,KAAK9B,OAAN,CAAZ,EAA8B,KAAKa,MAAjD,CAEF;AACA,KAAKC,QAAL,CAAgB,IAAhB,CACD,CAjBD,CAmBAoB,UAAU,CAACH,SAAX,CAAuB,GAAIlC,SAAJ,EAAvB,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,GAAIuC,SAAQ,CAAG,EAAf,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,GAAIC,eAAc,CAAG,CACnB,EAAG,CAAC,MAAD,CADgB,CACN;AACb,EAAG,CAAC,MAAD,CAFgB,CAEN;AACb,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAAyB,MAAzB,CAHe,CAGmB;AACtC,GAAI,CAAC,MAAD,CAJe,CAIL;AACd,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CALe,CAKW;AAC9B,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CANe,CAMW;AAC9B,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAPe,CAOW;AAC9B,GAAI,CAAC,MAAD,CARe,CAQL;AACd,GAAI,CAAC,MAAD,CATe,CASL;AACd,GAAI,CAAC,MAAD,CAVe,CAUL;AACd,GAAI,CAAC,MAAD,CAXe,CAWL;AACd,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAAyB,MAAzB,CAZe,CAYmB;AACtC,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAAyB,MAAzB,CAbe,CAamB;AACtC,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAAyB,MAAzB,CAde,CAcmB;AACtC,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAAyB,MAAzB,CAfe,CAemB;AACtC,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAAyB,MAAzB,CAhBe,CAgBmB;AACtC,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAAyB,MAAzB,CAjBe,CAiBmB;AACtC,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAAyB,MAAzB,CAlBe,CAkBmB;AACtC,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAAyB,MAAzB,CAnBe,CAmBmB;AACtC,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAAyB,MAAzB,CApBe,CAoBmB;AACtC,GAAI,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAAyB,MAAzB,CArBe,CAqBmB;AACtC,GAAI,CAAC,MAAD,CAtBe,CAsBL;AACd,GAAI,CAAC,MAAD,CAvBe,CAuBL;AACd,GAAI,CAAC,MAAD,CAxBe,CAwBL;AACd,GAAI,CAAC,MAAD,CAzBe,CAyBL;AACd,GAAI,CAAC,MAAD,CA1Be,CA0BL;AACd,GAAI,CAAC,MAAD,CA3Be,CA2BL;AACd,GAAI,CAAC,MAAD,CA5Be,CA4BL;AACd,IAAK,CAAC,MAAD,CA7Bc,CA6BJ;AACf,IAAK,CAAC,MAAD,CA9Bc,CA8BJ;AACf,IAAK,CAAC,MAAD,CA/Bc,CA+BJ;AACf,IAAK,CAAC,MAAD,CAhCc,CAgCJ;AACf,IAAK,CAAC,MAAD,CAjCc,CAiCJ;AACf,IAAK,CAAC,MAAD,CAlCc,CAkCJ;AACf,IAAK,CAAC,MAAD,CAnCc,CAmCJ;AACf,IAAK,CAAC,MAAD,CApCc,CAoCJ;AACf,IAAK,CAAC,MAAD,CArCc,CAqCJ;AACf,IAAK,CAAC,MAAD,CAtCc,CAsCJ;AACf,IAAK,CAAC,MAAD,CAvCc,CAuCJ;AACf,IAAK,CAAC,MAAD,CAxCc,CAwCJ;AACf,IAAK,CAAC,MAAD,CAzCc,CAyCJ;AACf,IAAK,CAAC,MAAD,CA1Cc,CA0CJ;AACf,IAAK,CAAC,MAAD,CA3Cc,CA2CJ;AACf,IAAK,CAAC,MAAD,CA5Cc,CA4CJ;AACf,IAAK,CAAC,MAAD,CA7Cc,CA6CJ;AACf,IAAK,CAAC,MAAD,CA9Cc,CA8CJ;AACf,IAAK,CAAC,MAAD,CA/Cc,CA+CJ;AACf,IAAK,CAAC,MAAD,CAhDc,CAgDJ;AACf,IAAK,CAAC,MAAD,CAjDc,CAiDJ;AACf,IAAK,CAAC,MAAD,CAlDc,CAkDJ;AACf,IAAK,CAAC,MAAD,CAnDc,CAmDJ;AACf,IAAK,CAAC,MAAD,CApDc,CAoDJ;AACf,IAAK,CAAC,MAAD,CArDc,CAqDJ;AACf,IAAK,CAAC,MAAD,CAAU;AAtDI,CAArB,CAyDA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,GAAIC,qBAAoB,CAAG,CACzBC,KAAK,CAAE,CAAC,MAAD,CADkB,CAEzBC,aAAa,CAAE,CAAC,MAAD,CAFU,CAGzBC,YAAY,CAAE,CAAC,MAAD,CAHW,CAIzBC,GAAG,CAAE,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAJoB,CAKzBC,IAAI,CAAE,CAAC,MAAD,CALmB,CAMzBC,QAAQ,CAAE,CAAC,MAAD,CANe,CAOzBC,SAAS,CAAE,CAAC,MAAD,CAPc,CAQzBC,SAAS,CAAE,CAAC,MAAD,CARc,CASzBC,UAAU,CAAE,CAAC,MAAD,CATa,CAUzBC,OAAO,CAAE,CAAC,MAAD,CAVgB,CAWzBC,SAAS,CAAE,CAAC,MAAD,CAXc,CAYzBC,QAAQ,CAAE,CAAC,MAAD,CAZe,CAazBC,MAAM,CAAE,CAAC,MAAD,CAbiB,CAczBC,KAAK,CAAE,CAAC,MAAD,CAdkB,CAezBC,OAAO,CAAE,CAAC,MAAD,CAfgB,CAgBzBC,IAAI,CAAE,CAAC,MAAD,CAhBmB,CAiBzBC,KAAK,CAAE,CAAC,MAAD,CAjBkB,CAkBzBC,KAAK,CAAE,CAAC,MAAD,CAlBkB,CAmBzBC,SAAS,CAAE,CAAC,MAAD,CAnBc,CAoBzBC,OAAO,CAAE,CAAC,MAAD,CApBgB,CAqBzBC,OAAO,CAAE,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CArBgB,CAsBzBC,WAAW,CAAE,CAAC,MAAD,CAtBY,CAuBzBC,MAAM,CAAE,CAAC,MAAD,CAvBiB,CAwBzBC,IAAI,CAAE,CAAC,MAAD,CAxBmB,CAyBzBC,GAAG,CAAE,CAAC,MAAD,CAzBoB,CA0BzBC,KAAK,CAAE,CAAC,MAAD,CA1BkB,CA2BzBC,QAAQ,CAAE,CAAC,MAAD,CA3Be,CA4BzBC,MAAM,CAAE,CAAC,MAAD,CA5BiB,CA6BzBC,OAAO,CAAE,CAAC,MAAD,CA7BgB,CA8BzBC,KAAK,CAAE,CAAC,MAAD,CA9BkB,CA+BzBC,KAAK,CAAE,CAAC,MAAD,CA/BkB,CAgCzBC,EAAE,CAAE,CAAC,MAAD,CAhCqB,CAiCzBC,EAAE,CAAE,CAAC,MAAD,CAjCqB,CAkCzBC,EAAE,CAAE,CAAC,MAAD,CAlCqB,CAmCzBC,EAAE,CAAE,CAAC,MAAD,CAnCqB,CAoCzBC,EAAE,CAAE,CAAC,MAAD,CApCqB,CAqCzBC,EAAE,CAAE,CAAC,MAAD,CArCqB,CAsCzBC,EAAE,CAAE,CAAC,MAAD,CAtCqB,CAuCzBC,EAAE,CAAE,CAAC,MAAD,CAvCqB,CAwCzBC,EAAE,CAAE,CAAC,MAAD,CAxCqB,CAyCzBC,GAAG,CAAE,CAAC,MAAD,CAzCoB,CA0CzBC,GAAG,CAAE,CAAC,MAAD,CA1CoB,CA2CzBC,GAAG,CAAE,CAAC,MAAD,CA3CoB,CA4CzBC,GAAG,CAAE,CAAC,MAAD,CA5CoB,CA6CzBC,GAAG,CAAE,CAAC,MAAD,CA7CoB,CA8CzBC,GAAG,CAAE,CAAC,MAAD,CA9CoB,CA+CzBC,GAAG,CAAE,CAAC,MAAD,CA/CoB,CAgDzBC,GAAG,CAAE,CAAC,MAAD,CAhDoB,CAiDzBC,GAAG,CAAE,CAAC,MAAD,CAjDoB,CAkDzBC,GAAG,CAAE,CAAC,MAAD,CAlDoB,CAmDzBC,GAAG,CAAE,CAAC,MAAD,CAnDoB,CAoDzBC,GAAG,CAAE,CAAC,MAAD,CApDoB,CAqDzBC,GAAG,CAAE,CAAC,MAAD,CArDoB,CAsDzBC,GAAG,CAAE,CAAC,MAAD,CAtDoB,CAuDzBC,GAAG,CAAE,CAAC,MAAD,CAvDoB,CAwDzBC,IAAI,CAAE,CAAC,MAAD,CAxDmB,CAyDzBC,UAAU,CAAE,CAAC,MAAD,CAzDa,CA0DzBC,SAAS,CAAE,CAAC,MAAD,CA1Dc,CA2DzBC,SAAS,CAAE,CAAC,MAAD,CA3Dc,CA4DzBC,aAAa,CAAE,CAAC,MAAD,CA5DU,CA6DzBC,SAAS,CAAE,IA7Dc,CA8DzBC,SAAS,CAAE,IA9Dc,CA+DzBC,UAAU,CAAE,CAAC,MAAD,CA/Da,CAgEzBC,OAAO,CAAE,CAAC,MAAD,CAhEgB,CAiEzBC,SAAS,CAAE,CAAC,MAAD,CAjEc,CAkEzBC,IAAI,CAAE,CAAC,MAAD,CAlEmB,CAmEzBC,QAAQ,CAAE,CAAC,MAAD,CAnEe,CAoEzBC,gBAAgB,CAAE,CAAC,MAAD,CApEO,CAqEzBC,IAAI,CAAE,CAAC,MAAD,CArEmB,CAsEzBC,KAAK,CAAE,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAtEkB,CAuEzBC,MAAM,CAAE,CAAC,MAAD,CAvEiB,CAwEzBC,gBAAgB,CAAE,CAAC,MAAD,CAxEO,CAyEzBC,gBAAgB,CAAE,CAAC,MAAD,CAzEO,CA0EzBC,cAAc,CAAE,CAAC,MAAD,CA1ES,CA2EzBC,SAAS,CAAE,CAAC,MAAD,CA3Ec,CA4EzBC,QAAQ,CAAE,CAAC,MAAD,CA5Ee,CA6EzBC,SAAS,CAAE,CAAC,MAAD,CA7Ec,CA8EzBC,QAAQ,CAAE,CAAC,MAAD,CA9Ee,CA+EzBC,IAAI,CAAE,CAAC,MAAD,CA/EmB,CAgFzBC,IAAI,CAAE,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAhFmB,CAiFzBC,UAAU,CAAE,CAAC,MAAD,CAjFa,CAkFzBC,OAAO,CAAE,CAAC,MAAD,CAlFgB,CAmFzBC,QAAQ,CAAE,CAAC,MAAD,CAnFe,CAoFzBC,MAAM,CAAE,CAAC,MAAD,CApFiB,CAqFzBC,KAAK,CAAE,CAAC,MAAD,CArFkB,CAsFzBC,IAAI,CAAE,CAAC,MAAD,CAtFmB,CAuFzBC,iBAAiB,CAAE,CAAC,MAAD,CAvFM,CAwFzBC,WAAW,CAAE,CAAC,MAAD,CAxFY,CAyFzBC,IAAI,CAAE,CAAC,MAAD,CAzFmB,CA0FzBC,KAAK,CAAE,CAAC,MAAD,CA1FkB,CA2FzBC,eAAe,CAAE,IA3FQ,CA4FzBC,MAAM,CAAE,CAAC,MAAD,CA5FiB,CA6FzBC,MAAM,CAAE,CAAC,MAAD,CA7FiB,CA8FzBC,SAAS,CAAE,CAAC,MAAD,CA9Fc,CA+FzBC,KAAK,CAAE,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CA/FkB,CAgGzBC,eAAe,CAAE,CAAC,MAAD,CAhGQ,CAiGzBC,KAAK,CAAE,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAjGkB,CAkGzBC,GAAG,CAAE,CAAC,MAAD,CAlGoB,CAmGzBC,mBAAmB,CAAE,CAAC,MAAD,CAnGI,CAoGzBC,gBAAgB,CAAE,CAAC,MAAD,CApGO,CAqGzBC,mBAAmB,CAAE,CAAC,MAAD,CArGI,CAsGzBC,oBAAoB,CAAE,CAAC,MAAD,CAtGG,CAuGzBC,iBAAiB,CAAE,CAAC,MAAD,CAvGM,CAwGzBC,EAAE,CAAE,CAAC,MAAD,CAxGqB,CAyGzBC,IAAI,CAAE,CAAC,MAAD,CAzGmB,CA0GzBC,GAAG,CAAE,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CA1GoB,CA2GzBC,OAAO,CAAE,CAAC,MAAD,CA3GgB,CA4GzBC,cAAc,CAAE,CAAC,MAAD,CA5GS,CAA3B,CA+GA;AACF;AACA;AACA;AACA;AACA,KACE,GAAIC,UAAS,CAAG,CACd,OAAQ,IADM,CACA;AACd,OAAQ,IAFM,CAEA;AACd,OAAQ,IAHM,CAGA;AACd,OAAQ,IAJM,CAIA;AACd,OAAQ,IALM,CAKA;AACd,OAAQ,IANM,CAMA;AACd,OAAQ,IAPM,CAOA;AACd,OAAQ,IARM,CAQA;AACd,OAAQ,IATM,CASA;AACd,OAAQ,IAVM,CAUA;AACd,OAAQ,IAXM,CAWA;AACd,OAAQ,IAAM;AAZA,CAAhB,CAeA;AACF;AACA;AACA;AACA,KACE,KAAK7I,SAAL,CAAiB,GAAIzB,UAAS,CAACC,QAAV,CAAmByB,aAAvB,EAAjB,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,KAAK4B,OAAL,CAAe,EAAf,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIiH,kBAAiB,CAAG,EAAxB,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIC,oBAAmB,CAAG,EAA1B,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,GAAIvH,aAAY,CAAG,EAAnB,CAEA;AACF;AACA;AACA;AACA;AACA,KACE,GAAIwH,mBAAkB,CAAG,IAAzB,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,GAAIC,oBAAmB,CAAG,IAA1B,CAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIC,WAAU,CAAG,QAASA,WAAT,CAAoBC,OAApB,CAA6BrJ,QAA7B,CAAuC,CACtD,GAAI,CAACqJ,OAAL,CAAc,MAAO,KAAP,CAEd,MAAOA,QAAO,CAACrJ,QAAD,CAAP,EAAqBqJ,OAAO,CAAC,CAAD,CAAnC,CACD,CAJD,CAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIpI,YAAW,CAAG,QAASA,YAAT,CAAqBR,MAArB,CAA6B,CAC7C;AACA,MACGA,OAAM,EAAI,IAAV,EAAkBA,MAAM,EAAI,IAA7B,EAAsC,CAACA,MAAM,CAAG,UAAV,IAA0B,UADlE,CAGD,CALD,CAOA,QAASK,2BAAT,CAAoCwI,UAApC,CAAgDtJ,QAAhD,CAA0DuJ,OAA1D,CAAmE,CACjE,GAAI,CAACD,UAAL,CAAiB,MAAO,KAAP,CAEjB,GAAIE,eAAJ,CAEA;AACA,GAAIC,sBAAqB,CAAGH,UAAU,CAACI,OAAX,CAAmB,IAAnB,CAA5B,CACA,GAAID,qBAAqB,EAAI,CAA7B,CAAgC,CAC9B,GAAIE,IAAG,CAAGL,UAAU,CAACM,SAAX,CAAqBH,qBAAqB,CAAG,CAA7C,CAAV,CACAD,cAAc,CAAGK,MAAM,CAACC,YAAP,CAAoBC,QAAQ,CAACJ,GAAD,CAAM,EAAN,CAA5B,CAAjB,CACD,CAED;AALA,IAMK,IAAIL,UAAU,CAACU,MAAX,GAAsB,CAAtB,EAA2BhK,QAAQ,GAAK,CAA5C,CACHwJ,cAAc,CAAGF,UAAjB,CACF;AAFK,IAGA,OAAOF,WAAU,CAAClH,oBAAoB,CAACoH,UAAD,CAArB,CAAmCtJ,QAAnC,CAAjB,CAEL;AACA,GAAIuJ,OAAO,GAAK,IAAhB,CAAsBC,cAAc,CAAGA,cAAc,CAACS,WAAf,EAAjB,CAAtB,IACK,IAAIV,OAAO,GAAK,KAAhB,CAAuBC,cAAc,CAAGA,cAAc,CAACU,WAAf,EAAjB,CAE5B;AACA,GAAIC,UAAS,CAAGX,cAAc,CAACY,UAAf,CAA0B,CAA1B,CAAhB,CACA,MAAOvI,qBAAoB,CAACsI,SAAD,CAA3B,CACD,CAED,QAASE,mBAAT,CAA4BF,SAA5B,CAAuC,CACrC,MAAOA,UAAS,EAAI,IAAb,EAAsBA,SAAS,EAAI,IAAb,EAAqBA,SAAS,EAAI,IAA/D,CACD,CAED,QAAStI,qBAAT,CAA8BsI,SAA9B,CAAyC,CACvC;AACA,GAAIE,kBAAkB,CAACF,SAAD,CAAtB,CAAmC,MAAO,QAASA,SAAhB,CAEnC;AACA,GAAIA,SAAS,EAAI,MAAb,EAAuBA,SAAS,EAAI,MAAxC,CAAgD,MAAOA,UAAP,CAEhD;AACA,GAAIA,SAAS,EAAI,MAAb,EAAuBA,SAAS,EAAI,QAAxC,CACE,MAAO,YAAaA,SAApB,CAEF,MAAO,KAAP,CACD,CAED,QAASpJ,oBAAT,CAA6BnB,OAA7B,CAAsCI,QAAtC,CAAgD,CAC9C,MAAOoJ,WAAU,CAACnH,cAAc,CAACrC,OAAD,CAAf,CAA0BI,QAA1B,CAAjB,CACD,CAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIkB,oBAAmB,CAAG,QAASA,oBAAT,CACxBtB,OADwB,CAExBE,aAFwB,CAGxB,CACA;AACA,GAAI,CAACA,aAAL,CAAoB,MAAO,MAAP,CAEpB;AACA,GAAI2J,sBAAqB,CAAG3J,aAAa,CAAC4J,OAAd,CAAsB,IAAtB,CAA5B,CACA,GAAID,qBAAqB,GAAK,CAAC,CAA/B,CAAkC,MAAO,KAAP,CAElC;AACA;AACA,GAAIU,UAAS,CAAGJ,QAAQ,CACtBjK,aAAa,CAAC8J,SAAd,CAAwBH,qBAAqB,CAAG,CAAhD,CADsB,CAEtB,EAFsB,CAAxB,CAIA,GAAI7J,OAAO,GAAKuK,SAAhB,CAA2B,MAAO,KAAP,CAE3B;AACA;AACA,GAAKvK,OAAO,EAAI,EAAX,EAAiBA,OAAO,EAAI,EAA7B,EAAqCA,OAAO,EAAI,EAAX,EAAiBA,OAAO,EAAI,EAArE,CACE,MAAO,KAAP,CAEF;AACA,MAAO,MAAP,CACD,CA1BD,CA4BA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,KAAK0K,KAAL,CAAa,SAAU7J,MAAV,CAAkB,CAC7B;AACA,GAAIA,MAAM,GAAK,IAAf,CAAqB,OAErB;AACA,GAAI,CAAC7B,aAAa,CAACmD,OAAd,CAAsBtB,MAAtB,CAAL,CAAoC,CAClC;AACA7B,aAAa,CAACmD,OAAd,CAAsBtB,MAAtB,EAAgC,IAAhC,CAEA;AACA,GAAI7B,aAAa,CAACI,SAAlB,CAA6B,CAC3B,GAAIuL,OAAM,CAAG3L,aAAa,CAACI,SAAd,CAAwByB,MAAxB,CAAb,CACAwI,mBAAmB,CAACxI,MAAD,CAAnB,CAA8B8J,MAA9B,CAEA;AACAC,MAAM,CAACC,YAAP,CAAoBvB,kBAApB,EACAsB,MAAM,CAACE,aAAP,CAAqBvB,mBAArB,EAEA;AACA,GAAI,CAACJ,SAAS,CAACtI,MAAD,CAAd,CACEyI,kBAAkB,CAAGsB,MAAM,CAACG,UAAP,CAAkB,UAAY,CACjDxB,mBAAmB,CAAGqB,MAAM,CAACI,WAAP,CAAmB,UAAY,CACnDhM,aAAa,CAACK,OAAd,CAAsBwB,MAAtB,EACA7B,aAAa,CAACI,SAAd,CAAwByB,MAAxB,EACD,CAHqB,CAGnB,EAHmB,CAAtB,CAID,CALoB,CAKlB,GALkB,CAArB,CAOF,MAAO8J,OAAP,CACD,CACF,CAED;AACA,MAAOtB,oBAAmB,CAACxI,MAAD,CAAnB,EAA+B,KAAtC,CACD,CAjCD,CAmCA;AACF;AACA;AACA;AACA;AACA,KACE,KAAKoK,OAAL,CAAe,SAAUpK,MAAV,CAAkB,CAC/B;AACA,GAAI7B,aAAa,CAACmD,OAAd,CAAsBtB,MAAtB,CAAJ,CAAmC,CACjC;AACA,MAAO7B,cAAa,CAACmD,OAAd,CAAsBtB,MAAtB,CAAP,CACA,MAAOuI,kBAAiB,CAACvI,MAAD,CAAxB,CAEA;AACA+J,MAAM,CAACC,YAAP,CAAoBvB,kBAApB,EACAsB,MAAM,CAACE,aAAP,CAAqBvB,mBAArB,EAEA;AACA,GAAI1I,MAAM,GAAK,IAAX,EAAmB7B,aAAa,CAACK,OAArC,CACEL,aAAa,CAACK,OAAd,CAAsBwB,MAAtB,EACH,CACF,CAfD,CAiBA;AACF;AACA;AACA;AACA;AACA;AACA,KACE,KAAKqK,IAAL,CAAY,QAASA,KAAT,CAAcC,GAAd,CAAmB,CAC7B;AACA,IAAK,GAAIC,EAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,GAAG,CAACf,MAAxB,CAAgCgB,CAAC,EAAjC,CAAqC,CACnC;AACA,GAAIb,UAAS,CAAGY,GAAG,CAACE,WAAJ,CAAkBF,GAAG,CAACE,WAAJ,CAAgBD,CAAhB,CAAlB,CAAuCD,GAAG,CAACX,UAAJ,CAAeY,CAAf,CAAvD,CACA,GAAIvK,OAAM,CAAGoB,oBAAoB,CAACsI,SAAD,CAAjC,CAEA;AACAvL,aAAa,CAAC0L,KAAd,CAAoB7J,MAApB,EACA7B,aAAa,CAACiM,OAAd,CAAsBpK,MAAtB,EACD,CACF,CAXD,CAaA;AACF;AACA;AACA,KACE,KAAKyK,KAAL,CAAa,UAAY,CACvB;AACA,IAAK,GAAIzK,OAAT,GAAmB7B,cAAa,CAACmD,OAAjC,EACEnD,aAAa,CAACiM,OAAd,CAAsBd,QAAQ,CAACtJ,MAAD,CAA9B,EADF,CAGA;AACAuB,QAAQ,CAAG,EAAX,CACD,CAPD,CASA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAImJ,oBAAmB,CAAG,QAASA,oBAAT,CACxBC,QADwB,CAExB/B,OAFwB,CAGxBgC,QAHwB,CAIxB,CACA,GAAIC,WAAU,CAAGD,QAAQ,CAACnL,SAAT,CAAmBkL,QAAnB,CAAjB,CACA,GAAIG,YAAW,CAAG3M,aAAa,CAACsB,SAAd,CAAwBkL,QAAxB,CAAlB,CAEA,GAAIJ,EAAJ,CAEA;AACA;AACA;AACA;AACA;AACA,GAAI3B,OAAO,CAACK,OAAR,CAAgB2B,QAAQ,CAAC5K,MAAzB,IAAqC,CAAC,CAA1C,CAA6C,OAE7C;AACA,GAAI8K,WAAW,EAAID,UAAU,GAAK,KAAlC,CAAyC,CACvC,IAAKN,CAAC,CAAG,CAAT,CAAYA,CAAC,CAAG3B,OAAO,CAACW,MAAxB,CAAgCgB,CAAC,EAAjC,CAAqC,CACnCpM,aAAa,CAACiM,OAAd,CAAsBxB,OAAO,CAAC2B,CAAD,CAA7B,EACD,CACF,CAED;AANA,IAOK,IAAI,CAACO,WAAD,EAAgBD,UAApB,CAAgC,CACnC;AACA;AACA,IAAKN,CAAC,CAAG,CAAT,CAAYA,CAAC,CAAG3B,OAAO,CAACW,MAAxB,CAAgCgB,CAAC,EAAjC,CAAqC,CACnC,GAAIpM,aAAa,CAACmD,OAAd,CAAsBsH,OAAO,CAAC2B,CAAD,CAA7B,CAAJ,CAAuC,OACxC,CAED;AACA;AACA;AACA;AACA;AACA,GAAIvK,OAAM,CAAG4I,OAAO,CAAC,CAAD,CAApB,CACA,GAAIgC,QAAQ,CAAC5K,MAAb,CAAqBuI,iBAAiB,CAACvI,MAAD,CAAjB,CAA4B,IAA5B,CAErB7B,aAAa,CAAC0L,KAAd,CAAoB7J,MAApB,EACD,CACF,CA1CD,CA4CA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAI+K,mBAAkB,CAAG,QAASA,mBAAT,CAA4BH,QAA5B,CAAsC,CAC7D;AACAF,mBAAmB,CACjB,KADiB,CAEjB,CACE,MADF,CACU;AACR,MAFF,CAEU;AACR,MAAQ;AAHV,CAFiB,CAOjBE,QAPiB,CAAnB,CAUA;AACAF,mBAAmB,CACjB,OADiB,CAEjB,CACE,MADF,CACU;AACR,MAAQ;AAFV,CAFiB,CAMjBE,QANiB,CAAnB,CASA;AACAF,mBAAmB,CACjB,MADiB,CAEjB,CACE,MADF,CACU;AACR,MAAQ;AAFV,CAFiB,CAMjBE,QANiB,CAAnB,CASA;AACAF,mBAAmB,CACjB,MADiB,CAEjB,CACE,MADF,CACU;AACR,MAAQ;AAFV,CAFiB,CAMjBE,QANiB,CAAnB,CASA;AACAF,mBAAmB,CACjB,OADiB,CAEjB,CACE,MADF,CACU;AACR,MAAQ;AAFV,CAFiB,CAMjBE,QANiB,CAAnB,CASA;AACAzM,aAAa,CAACsB,SAAd,CAA0BmL,QAAQ,CAACnL,SAAnC,CACD,CAtDD,CAwDA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIuL,gBAAe,CAAG,QAASA,gBAAT,EAA2B,CAC/C,IAAK,GAAIhL,OAAT,GAAmB7B,cAAa,CAACmD,OAAjC,CAA0C,CACxC,GAAI,CAACiH,iBAAiB,CAACvI,MAAD,CAAtB,CAAgC,MAAO,MAAP,CACjC,CAED,MAAO,KAAP,CACD,CAND,CAQA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,QAASiL,iBAAT,EAA4B,CAC1B;AACA,GAAIC,cAAa,CAAGC,eAAe,EAAnC,CACA,GAAI,CAACD,aAAL,CAAoB,MAAO,MAAP,CAEpB;AACA,GAAIE,WAAJ,CACA,EAAG,CACDA,UAAU,CAAGF,aAAb,CACAA,aAAa,CAAGC,eAAe,EAA/B,CACD,CAHD,MAGSD,aAAa,GAAK,IAH3B,EAKA;AACA;AACA,GAAIF,eAAe,EAAnB,CAAuB7M,aAAa,CAACsM,KAAd,GAEvB,MAAOW,WAAU,CAACrL,gBAAlB,CACD,CAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIsL,wBAAuB,CAAG,QAASA,wBAAT,CAAiCrL,MAAjC,CAAyC,CACrE;AACA,GAAI,CAAC7B,aAAa,CAACsB,SAAd,CAAwBoB,IAAzB,EAAiC,CAAC1C,aAAa,CAACsB,SAAd,CAAwBsB,GAA9D,CAAmE,OAEnE;AACA,GAAIf,MAAM,EAAI,MAAV,EAAoBA,MAAM,EAAI,MAAlC,CAA0C,OAE1C;AACA,GAAIA,MAAM,EAAI,MAAV,EAAoBA,MAAM,EAAI,MAAlC,CAA0C,OAE1C;AACA,GAAIA,MAAM,EAAI,IAAV,EAAkB,CAACA,MAAM,CAAG,UAAV,IAA0B,UAAhD,CAA4D,CAC1D7B,aAAa,CAACiM,OAAd,CAAsB,MAAtB,EAA+B;AAC/BjM,aAAa,CAACiM,OAAd,CAAsB,MAAtB,EAA+B;AAC/BjM,aAAa,CAACiM,OAAd,CAAsB,MAAtB,EAA+B;AAC/BjM,aAAa,CAACiM,OAAd,CAAsB,MAAtB,EAA+B;AAChC,CACF,CAjBD,CAmBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIe,gBAAe,CAAG,QAASA,gBAAT,EAA2B,CAC/C;AACA,GAAIG,MAAK,CAAG/J,QAAQ,CAAC,CAAD,CAApB,CACA,GAAI,CAAC+J,KAAL,CAAY,MAAO,KAAP,CAEZ;AACA,GAAIA,KAAK,WAAYnL,aAArB,CAAmC,CACjC,GAAIH,OAAM,CAAG,IAAb,CACA,GAAIuL,gBAAe,CAAG,EAAtB,CAEA;AACA;AACA;AACA,GAAID,KAAK,CAACtL,MAAN,GAAiB,MAAjB,EAA2BsL,KAAK,CAACtL,MAAN,GAAiB,MAAhD,CAAwD,CACtD;AACA,GAAIuB,QAAQ,CAACgI,MAAT,GAAoB,CAAxB,CAA2B,MAAO,KAAP,CAE3B;AACA,GAAIhI,QAAQ,CAAC,CAAD,CAAR,CAAYvB,MAAZ,GAAuBsL,KAAK,CAACtL,MAAjC,CAAyC,CACvC,GAAI,CAACuB,QAAQ,CAAC,CAAD,CAAR,CAAY9B,SAAZ,CAAsBkB,IAA3B,CAAiC,MAAOY,SAAQ,CAACb,KAAT,EAAP,CAClC,CAED;AACA;AACA;AANA,IAOK,IAAIa,QAAQ,CAAC,CAAD,CAAR,UAAuBpB,aAA3B,CAAyC,MAAOoB,SAAQ,CAACb,KAAT,EAAP,CAC/C,CAED;AACA,GAAI4K,KAAK,CAACrL,QAAV,CAAoB,CAClBD,MAAM,CAAGsL,KAAK,CAACtL,MAAf,CACAuL,eAAe,CAAGhK,QAAQ,CAACiK,MAAT,CAAgB,CAAhB,CAAmB,CAAnB,CAAlB,CACD,CAED;AALA,IAMK,IAAIjK,QAAQ,CAAC,CAAD,CAAR,UAAuBJ,cAA3B,CAA0C,CAC7CnB,MAAM,CAAGuB,QAAQ,CAAC,CAAD,CAAR,CAAYvB,MAArB,CACAuL,eAAe,CAAGhK,QAAQ,CAACiK,MAAT,CAAgB,CAAhB,CAAmB,CAAnB,CAAlB,CACD,CAED;AACA;AACA;AAPK,IAQA,IAAIjK,QAAQ,CAAC,CAAD,CAAZ,CAAiB,CACpBvB,MAAM,CAAGsL,KAAK,CAACtL,MAAf,CACAuL,eAAe,CAAGhK,QAAQ,CAACiK,MAAT,CAAgB,CAAhB,CAAmB,CAAnB,CAAlB,CACD,CAED;AACA,GAAID,eAAe,CAAChC,MAAhB,CAAyB,CAA7B,CAAgC,CAC9BwB,kBAAkB,CAACO,KAAD,CAAlB,CAEA,GAAItL,MAAJ,CAAY,CACV;AACAqL,uBAAuB,CAACrL,MAAD,CAAvB,CACA,GAAID,iBAAgB,CAAG,CAAC5B,aAAa,CAAC0L,KAAd,CAAoB7J,MAApB,CAAxB,CACAiB,YAAY,CAACqK,KAAK,CAACnM,OAAP,CAAZ,CAA8Ba,MAA9B,CAEA;AACA;AACA,GAAI,CAACsL,KAAK,CAAC/K,aAAX,CAA0BpC,aAAa,CAACiM,OAAd,CAAsBpK,MAAtB,EAE1B;AACA,IAAK,GAAIuK,EAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGgB,eAAe,CAAChC,MAApC,CAA4CgB,CAAC,EAA7C,EACEgB,eAAe,CAAChB,CAAD,CAAf,CAAmBxK,gBAAnB,CAAsCA,gBAAtC,CADF,CAED,CAED,MAAOuL,MAAP,CACD,CACF,CAAC;AAEF;AAjEA,IAkEK,IAAIA,KAAK,WAAYjK,WAAjB,EAA+B,CAAC5C,MAAM,CAACC,eAA3C,CAA4D,CAC/D;AACA,GAAIsB,OAAM,CAAGsL,KAAK,CAACtL,MAAnB,CACA,GAAIA,MAAJ,CAAY,CACV7B,aAAa,CAACiM,OAAd,CAAsBpK,MAAtB,EACA,MAAOiB,aAAY,CAACqK,KAAK,CAACnM,OAAP,CAAnB,CACAmM,KAAK,CAACvL,gBAAN,CAAyB,IAAzB,CACD,CAED;AANA,IAOK,CACH5B,aAAa,CAACsM,KAAd,GACA,MAAOa,MAAP,CACD,CAEDP,kBAAkB,CAACO,KAAD,CAAlB,CACA,MAAO/J,SAAQ,CAACb,KAAT,EAAP,CACD,CAAC;AAEF;AACA;AApBK,IAqBA,OAAOa,SAAQ,CAACb,KAAT,EAAP,CAEL;AACA,MAAO,KAAP,CACD,CAjGD,CAmGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIlB,iBAAgB,CAAG,QAASA,iBAAT,CAA0BiM,CAA1B,CAA6B,CAClD;AACA,GAAI,YAAcA,EAAlB,CAAqB,MAAOA,EAAC,CAAClM,QAAT,CAErB;AACA,GAAI,eAAiBkM,EAArB,CAAwB,MAAOA,EAAC,CAACC,WAAT,CAExB;AACA,MAAO,EAAP,CACD,CATD,CAWA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,GAAIC,UAAS,CAAG,QAASA,UAAT,CAAmBF,CAAnB,CAAsB,CACpC;AACA,GAAIA,CAAC,CAACnN,YAAD,CAAL,CAAqB,MAAO,MAAP,CAErB;AACAmN,CAAC,CAACnN,YAAD,CAAD,CAAkB,IAAlB,CACA,MAAO,KAAP,CACD,CAPD,CASA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,KAAKsN,QAAL,CAAgB,QAASA,SAAT,CAAkB1N,OAAlB,CAA2B,CACzC;AACAA,OAAO,CAAC2N,gBAAR,CACE,SADF,CAEE,SAAUJ,CAAV,CAAa,CACX;AACA,GAAI,CAACtN,aAAa,CAACI,SAAnB,CAA8B,OAE9B;AACA,GAAI,CAACoN,SAAS,CAACF,CAAD,CAAd,CAAmB,OAEnB,GAAIK,aAAY,CAAG,GAAI3L,aAAJ,CAAiBsL,CAAjB,CAAnB,CAEA;AACA;AACA,GAAIK,YAAY,CAAC3M,OAAb,GAAyB,GAA7B,CAAkC,OAElC;AACAoC,QAAQ,CAACwK,IAAT,CAAcD,YAAd,EAEA;AACA,GAAIb,gBAAgB,EAApB,CAAwBQ,CAAC,CAACO,cAAF,GACzB,CApBH,CAqBE,IArBF,EAwBA;AACA9N,OAAO,CAAC2N,gBAAR,CACE,UADF,CAEE,SAAUJ,CAAV,CAAa,CACX;AACA,GAAI,CAACtN,aAAa,CAACI,SAAf,EAA4B,CAACJ,aAAa,CAACK,OAA/C,CAAwD,OAExD;AACA,GAAI,CAACmN,SAAS,CAACF,CAAD,CAAd,CAAmB,OAEnB;AACAlK,QAAQ,CAACwK,IAAT,CAAc,GAAI5K,cAAJ,CAAkBsK,CAAlB,CAAd,EAEA;AACA,GAAIR,gBAAgB,EAApB,CAAwBQ,CAAC,CAACO,cAAF,GACzB,CAdH,CAeE,IAfF,EAkBA;AACA9N,OAAO,CAAC2N,gBAAR,CACE,OADF,CAEE,SAAUJ,CAAV,CAAa,CACX;AACA,GAAI,CAACtN,aAAa,CAACK,OAAnB,CAA4B,OAE5B;AACA,GAAI,CAACmN,SAAS,CAACF,CAAD,CAAd,CAAmB,OAEnBA,CAAC,CAACO,cAAF,GAEA;AACAzK,QAAQ,CAACwK,IAAT,CAAc,GAAI1K,WAAJ,CAAeoK,CAAf,CAAd,EACAR,gBAAgB,GACjB,CAdH,CAeE,IAfF,EAkBA;AACD,CAjED,CAmEA;AACA,GAAI/M,OAAJ,CAAaC,aAAa,CAACyN,QAAd,CAAuB1N,OAAvB,EACd,CAtwCD,CAwwCA;AACA;AACA;AACA;AACA;AACA;AACA,GACAF,SAAS,CAACC,QAAV,CAAmBI,OAAnB,CAA6B,CAA7B,CAEA;AACA;AACA;AACA,GACAL,SAAS,CAACC,QAAV,CAAmByB,aAAnB,CAAmC,UAAY,CAC7C;AACF;AACA;AACA;AACA,KACE,KAAKgB,KAAL,CAAa,KAAb,CAEA;AACF;AACA;AACA;AACA,KACE,KAAKG,IAAL,CAAY,KAAZ,CAEA;AACF;AACA;AACA;AACA,KACE,KAAKE,GAAL,CAAW,KAAX,CAEA;AACF;AACA;AACA;AACA,KACE,KAAKJ,IAAL,CAAY,KAAZ,CAEA;AACF;AACA;AACA;AACA,KACE,KAAKK,KAAL,CAAa,KAAb,CACD,CAnCD,CAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACAhD,SAAS,CAACC,QAAV,CAAmByB,aAAnB,CAAiCC,iBAAjC,CAAqD,SAAU8L,CAAV,CAAa,CAChE,GAAIQ,MAAK,CAAG,GAAIjO,UAAS,CAACC,QAAV,CAAmByB,aAAvB,EAAZ,CAEA;AACAuM,KAAK,CAACvL,KAAN,CAAc+K,CAAC,CAACS,QAAhB,CACAD,KAAK,CAACpL,IAAN,CAAa4K,CAAC,CAACU,OAAf,CACAF,KAAK,CAAClL,GAAN,CAAY0K,CAAC,CAACW,MAAd,CACAH,KAAK,CAACtL,IAAN,CAAa8K,CAAC,CAACY,OAAf,CAEA;AACA,GAAIZ,CAAC,CAACa,gBAAN,CAAwB,CACtBL,KAAK,CAACjL,KAAN,CACEyK,CAAC,CAACa,gBAAF,CAAmB,IAAnB,GACAb,CAAC,CAACa,gBAAF,CAAmB,OAAnB,CADA,EAEAb,CAAC,CAACa,gBAAF,CAAmB,OAAnB,CAFA,EAGAb,CAAC,CAACa,gBAAF,CAAmB,KAAnB,CAJF,CAKD,CAED,MAAOL,MAAP,CACD,CAnBD,CAqBA,cAAejO,UAAS,CAACC,QAAzB"},"metadata":{},"sourceType":"module"}